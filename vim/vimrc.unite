"                  ██   ██                       ██
"                 ░░   ░██                      ░░
" ██   ██ ███████  ██ ██████  █████     ██    ██ ██ ██████████
"░██  ░██░░██░░░██░██░░░██░  ██░░░██   ░██   ░██░██░░██░░██░░██
"░██  ░██ ░██  ░██░██  ░██  ░███████   ░░██ ░██ ░██ ░██ ░██ ░██
"░██  ░██ ░██  ░██░██  ░██  ░██░░░░  ██ ░░████  ░██ ░██ ░██ ░██
"░░██████ ███  ░██░██  ░░██ ░░██████░██  ░░██   ░██ ███ ░██ ░██
" ░░░░░░ ░░░   ░░ ░░    ░░   ░░░░░░ ░░    ░░    ░░ ░░░  ░░  ░░
"
" author: yusiwen@gmail.com
"
" unite.vim settings {{{
" Start in insert mode
let g:unite_enable_start_insert = 1
let g:unite_prompt = ">>"
let g:unite_data_directory = "~/.unite"
" Enable short source name in window
let g:unite_enable_short_source_names = 1
" Enable history yank source
let g:unite_source_history_yank_enable = 1
" Open in bottom right
let g:unite_split_rule = "botright"
" Shorten the default update date of 500ms
let g:unite_update_time = 200
let g:unite_source_file_mru_limit = 1000
let g:unite_cursor_line_highlight = 'TabLineSel'
" let g:unite_abbr_highlight = 'TabLine'
let g:unite_source_file_mru_filename_format = ':~:.'
let g:unite_source_file_mru_time_format = ''
" Max length of tag name field
let g:unite_source_tag_max_name_length = 30
" Max length of file name field
let g:unite_source_tag_max_fname_length = 40

if executable('ag')
  " Using ag as recursive command.
  let g:unite_source_rec_async_command = ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', '']
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif

" Use the fuzzy matcher for everything
call unite#filters#matcher_default#use(['matcher_fuzzy'])
" Use the rank sorter for everything
" call unite#filters#sorter_default#use(['sorter_rank'])

" Set up some custom ignores
call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      \ 'ignore_pattern', join([
      \ '\.git/',
      \ 'git5/.*/review/',
      \ 'google/obj/',
      \ 'tmp/',
      \ '.sass-cache',
      \ 'node_modules/',
      \ 'bower_components/',
      \ 'dist/',
      \ '.git5_specs/',
      \ '.pyc',
      \ ], '\|'))

" Map space to the prefix for Unite
nnoremap [unite] <Nop>
nmap <space> [unite]

" General fuzzy search
"nnoremap <silent> [unite]<space> :<C-u>Unite
"      \ -no-split -buffer-name=files buffer file_mru bookmark file_rec/async<CR>

" Quick registers
nnoremap <silent> [unite]r :<C-u>Unite -quick-match -buffer-name=register register<CR>

" Quick buffer and mru
nnoremap <silent> [unite]u :<C-u>Unite -quick-match -buffer-name=buffers buffer<CR>

" Quick yank history
nnoremap <silent> [unite]y :<C-u>Unite -quick-match -auto-preview -buffer-name=yanks history/yank<CR>

" Quick outline (Need 'Shougo/unite-outline' installed)
nnoremap <silent> [unite]o :<C-u>Unite -buffer-name=outline -vertical outline<CR>

" Quick sessions (projects)
nnoremap <silent> [unite]p :<C-u>Unite -buffer-name=sessions session<CR>

" Quick sources
nnoremap <silent> [unite]a :<C-u>Unite -buffer-name=sources source<CR>

" Quick snippet
nnoremap <silent> [unite]s :<C-u>Unite -buffer-name=snippets ultisnips<CR>

" Quickly switch lcd
nnoremap <silent> [unite]d
      \ :<C-u>Unite -buffer-name=change-cwd -default-action=cd directory_mru directory_rec/async<CR>

" Quick file search
nnoremap <silent> [unite]f :<C-u>Unite -no-split -buffer-name=files file_rec/async file/new<CR>

" Quick grep from cwd
nnoremap <silent> [unite]g :<C-u>Unite -no-split -buffer-name=grep grep:.<CR>

" Quick help
nnoremap <silent> [unite]h :<C-u>Unite -buffer-name=help help<CR>

" Quick line using the word under cursor
" nnoremap <silent> [unite]l :<C-u>UniteWithCursorWord -buffer-name=search_file line<CR>

" Quick line
nnoremap <silent> [unite]l :<C-u>Unite -buffer-name=search_file line<CR>

" Quick MRU search
nnoremap <silent> [unite]m :<C-u>Unite -buffer-name=mru file_mru<CR>

" Quick find
nnoremap <silent> [unite]n :<C-u>Unite -buffer-name=find find:.<CR>

" Quick commands
nnoremap <silent> [unite]c :<C-u>Unite -buffer-name=commands command<CR>

" Quick bookmarks
nnoremap <silent> [unite]b :<C-u>Unite -buffer-name=bookmarks bookmark<CR>

" Quick jump
nnoremap <silent> [unite]j :<C-u>Unite -buffer-name=jumps jump<CR>

" Fuzzy search from current buffer
" nnoremap <silent> [unite]b :<C-u>UniteWithBufferDir
" \ -buffer-name=files -prompt=%\  buffer file_mru bookmark file<CR>

" Quick commands
nnoremap <silent> [unite]; :<C-u>Unite -buffer-name=history -default-action=edit history/command command<CR>

" Quick tags (Need tsukkee/unite-tag installed)
nnoremap <silent> [unite]t :<C-u>Unite -buffer-name=tags tag<CR>

augroup MyAutoCmd
augroup END

augroup unite_wipe_nosplit
  autocmd!
  autocmd BufLeave *
  \ if empty(&bufhidden)
  \ && &buftype  ==# 'nofile'
  \ && &filetype ==# 'unite'
  \ && !unite#get_current_unite().context.split |
  \   setlocal bufhidden=wipe |
  \ endif
augroup END

" Custom Unite settings
autocmd MyAutoCmd FileType unite call s:unite_settings()
function! s:unite_settings()
  "nmap <buffer> <ESC>   <Plug>(unite_exit)
  "nmap <buffer> <ESC>   <Plug>(unite_insert_enter)
  "imap <buffer> <ESC>   <Plug>(unite_exit)
  "imap <buffer> <c-j>   <Plug>(unite_select_next_line)
  imap <buffer> <c-j>   <Plug>(unite_insert_leave)
  nmap <buffer> <c-j>   <Plug>(unite_loop_cursor_down)
  imap <buffer> <c-k>   <Plug>(unite_insert_leave)
  nmap <buffer> <c-k>   <Plug>(unite_loop_cursor_up)
  imap <buffer> <tab>   <Plug>(unite_insert_leave)
  nmap <buffer> <tab>   <Plug>(unite_loop_cursor_down)
  nmap <buffer> <s-tab> <Plug>(unite_loop_cursor_up)
  imap <buffer> <c-a>   <Plug>(unite_choose_action)
  imap <buffer> <Tab>   <Plug>(unite_insert_leave)
  imap <buffer> jj      <Plug>(unite_insert_leave)
  imap <buffer> <C-w>   <Plug>(unite_delete_backward_word)
  imap <buffer> <C-u>   <Plug>(unite_delete_backward_path)
  imap <buffer> '       <Plug>(unite_quick_match_default_action)
  nmap <buffer> '       <Plug>(unite_quick_match_default_action)
  nmap <buffer> <C-r>   <Plug>(unite_redraw)
  imap <buffer> <C-r>   <Plug>(unite_redraw)
  inoremap <silent><buffer><expr> <C-s> unite#do_action('split')
  nnoremap <silent><buffer><expr> <C-s> unite#do_action('split')
  inoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  nnoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')

  let unite = unite#get_current_unite()
  if unite.buffer_name =~# '^search'
    nnoremap <silent><buffer><expr> r     unite#do_action('replace')
  else
    nnoremap <silent><buffer><expr> r     unite#do_action('rename')
  endif

  nnoremap <silent><buffer><expr> cd     unite#do_action('lcd')

  " Using Ctrl-\ to trigger outline, so close it using the same keystroke
  if unite.buffer_name =~# '^outline'
    imap <buffer> <C-\> <Plug>(unite_exit)
  endif

  " Using Ctrl-/ to trigger line, close it using same keystroke
  if unite.buffer_name =~# '^search_file'
    imap <buffer> <C-_> <Plug>(unite_exit)
  endif
endfunction
" }}}

" unite sessions {{{
" Save session automatically.
let g:unite_source_session_enable_auto_save = 1

" Pop up session selection if no file is specified
" TODO: Why does this not work when Vim isn't run from tmux???!
"autocmd MyAutoCmd VimEnter * call s:unite_session_on_enter()
"function! s:unite_session_on_enter()
"  if !argc() && !exists("g:start_session_from_cmdline")
"    Unite -buffer-name=sessions session
"  endif
"endfunction
" }}}
