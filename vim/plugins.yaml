---
# PLUGINS
# =====================================

# Non-lazy plugins {{{
- repo: Shougo/dein.vim
# Provides the branch name of the current git repository, ":echo gitbranch#name()"
- repo: itchyny/vim-gitbranch
# Peekaboo extends " and @ in normal mode and <C-R> in insert mode so you can see the contents of the registers.
- repo: junegunn/vim-peekaboo
- repo: romainl/vim-cool
- repo: sgur/vim-editorconfig
# Heuristically set buffer options
- repo: tpope/vim-sleuth
# An efficient alternative to the standard matchparen plugin
- repo: itchyny/vim-parenmatch
# Colorize text in the form #rrggbb or #rgb
- repo: lilydjwg/colorizer
  hook_source: |
    let g:colorizer_nomap = 1
    let g:colorizer_startup = 0
# sublime text style multiple selection
- repo: terryma/vim-multiple-cursors
# accelerated smooth scroll
- repo: yonchu/accelerated-smooth-scroll
# enable repeating supported plugin maps with "."
- repo: tpope/vim-repeat
# Keep/restore fcitx state when toggling insert mode
# fcitx.vim is only needed under Linux
- repo: vim-scripts/fcitx.vim
  if: has('unix') && system('uname') =~? '^linux' && executable('fcitx')

# Colorschemes
# - repo: chriskempson/base16-vim
# - repo: morhetz/gruvbox
# - repo: dracula/vim
# - repo: nanotech/jellybeans.vim
# - repo: altercation/vim-colors-solarized
# }}}

# Lazy loading
# =====================================

# Commands {{{
# defx
- repo: Shougo/defx.nvim
  on_cmd: Defx
  hook_source: source $VIMPATH/vimrc.defx
- {repo: kristijanhusak/defx-git, on_source: defx.nvim}
- repo: kristijanhusak/defx-icons
  on_source: defx.nvim
  on_func: defx_icons#get

- {repo: tyru/caw.vim on_map: {nx: <Plug>}}

# git wrapper
- {repo: jreybert/vimagit, on_cmd: Magit, on_func: magit#show_magit}
- repo: chemzqm/vim-easygit
  on_cmd: [Gadd, Gcd, Glcd, Gcommit, Gblame, Gstatus, Gdiff, Gbrowse, Gpush]
  hook_source: let g:easygit_enable_command = 1
- {repo: lambdalisue/gina.vim, on_cmd: Gina}

# Vim motions on speed!
- repo: easymotion/vim-easymotion
  on_map: {n: <Plug>}
  hook_source: |
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_prompt = 'Jump to → '
    let g:EasyMotion_keys = 'fjdksweoavn'
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_use_smartsign_us = 1
    let g:EasyMotion_startofline = 0
    hi link EasyMotionMoveHL Search

- {repo: liuchengxu/vim-which-key, on_cmd: WhichKey}
# Comment stuff out
- {repo: tpope/vim-commentary, on_map: <Plug>Commentary}
# Ultimate hex editing system with Vim
- {repo: Shougo/vinarise.vim, on_cmd: Vinarise}
# Make blockwise Visual mode more useful
- {repo: kana/vim-niceblock, on_map: {x: <Plug>}}
- {repo: guns/xterm-color-table.vim, on_cmd: XtermColorTable}
# The ultimate undo history visualizer for VIM
- {repo: mbbill/undotree, on_cmd: UndotreeToggle}
# The interactive scratchpad for hackers
- {repo: metakirby5/codi.vim, on_cmd: Codi, if: empty($VIM_MINIMAL)}
# Uncover usage problems in your writing
- {repo: reedes/vim-wordy, on_cmd: [Wordy, NextWordy, PrevWordy]}
# Far.vim makes it easier to find and replace text through multiple files
- {repo: brooth/far.vim, on_cmd: [Far, Farp, F]}
# text filtering and alignment
- {repo: godlygeek/tabular, on_cmd: Tabularize}
# view man pages in vim
- repo: vim-utils/vim-man
  on_cmd: [Man, Vman]
# easy code formatting in Vim by integrating existing code formatters
- repo: Chiel92/vim-autoformat
  on_cmd: Autoformat
# Vim sugar for the UNIX shell commands that need it the most
- repo: tpope/vim-eunuch
  on_cmd: [Delete, Unlink, Move, Rename, Chmod, Mkdir, Cfind, Clocate, Lfind, Wall, SudoWrite, SudoEdit]
- repo: vimlab/split-term.vim
  if: has('nvim')
  on_cmd: [Term, VTerm]
- {repo: kana/vim-altr, on_map: {n: <Plug>}}

# Mimic tmux's display-pane feature, which enables you to choose a window interactively.
- repo: t9md/vim-choosewin
  on_map: {n: <Plug>}
  hook_add: |
    let g:choosewin_label = 'SDFJKLZXCV'
    let g:choosewin_overlay_enable = 1
    let g:choosewin_statusline_replace = 1
    let g:choosewin_overlay_clear_multibyte = 0
    let g:choosewin_blink_on_land = 0

# An alternative sudo.vim for Vim and Neovim, limited support sudo in Windows
- repo: lambdalisue/suda.vim
  on_event: BufRead
  hook_add: let g:suda_smart_edit = 1

- repo: tyru/open-browser.vim
  on_map: {nxv: <Plug>(openbrowser}
  on_cmd: [OpenBrowser, OpenBrowserSearch, OpenBrowserSmartSearch]

- repo: tyru/open-browser-unicode.vim
  depends: open-browser.vim
  on_cmd: OpenBrowserUnicode

- repo: tyru/open-browser-github.vim
  depends: open-browser.vim
  on_cmd: [OpenGithubFile, OpenGithubIssue, OpenGithubProject]

- repo: mzlogin/vim-markdown-toc
  on_cmd: [GenTocGFM, GenTocRedcarpet, GenTocGitLab, UpdateToc]
  hook_add: let g:vmt_auto_update_on_save = 0

- repo: liuchengxu/vista.vim
  on_cmd: Vista
  hook_add: |
    let g:vista#renderer#enable_icon = 1
    let g:vista_echo_cursor_strategy = 'scroll'

- repo: beloglazov/vim-online-thesaurus  # FIXME
  on_cmd: [OnlineThesaurusCurrentWord, Thesaurus]
  hook_add: let g:online_thesaurus_map_keys = 0
# }}}
# Interface {{{
- {repo: haya14busa/vim-asterisk, on_map: {nv: <Plug>}}
- {repo: rhysd/accelerated-jk, on_map: {n: <Plug>}}
- {repo: haya14busa/vim-edgemotion, on_map: {nv: <Plug>}}
- {repo: t9md/vim-quickhl, on_map: {nv: <Plug>}}
- {repo: hotwatermorning/auto-git-diff, on_ft: gitrebase}
- {repo: rafi/vim-sidemenu, on_map: {nv: <Plug>}}

# Underlines the word under the cursor
- repo: itchyny/vim-cursorword
  on_path: .*
  hook_source: |
    augroup user_plugin_cursorword
      autocmd!
      autocmd FileType denite,qf,easygitblame let b:cursorword=0
      autocmd WinEnter * if &diff | let b:cursorword=0 | endif
      autocmd InsertEnter * let b:cursorword=0
      autocmd InsertLeave * let b:cursorword=1
    augroup END

# shows a git diff in the gutter
- repo: airblade/vim-gitgutter
  on_path: .*
  hook_add: |
    let g:gitgutter_map_keys = 0
    let g:gitgutter_realtime = 1
    let g:gitgutter_eager = 1
    let g:gitgutter_diff_args = '-w'
    let g:gitgutter_max_signs = 1500
    let g:gitgutter_sign_added = '+'
    let g:gitgutter_sign_modified = '~'
    let g:gitgutter_sign_removed = '-'
    let g:gitgutter_sign_removed_first_line = '^'
    let g:gitgutter_sign_modified_removed = ':'
    let g:gitgutter_sign_allow_clobber = 0
    let g:gitgutter_sign_priority = 0
    let g:gitgutter_override_sign_column_highlight = 0

- repo: kshenoy/vim-signature
  depends: vim-gitgutter
  on_path: .*
  hook_add: |
    let g:SignatureForceRemoveGlobal = 0
    let g:SignatureUnconditionallyRecycleMarks = 1
    let g:SignatureErrorIfNoAvailableMarks = 0
    let g:SignaturePurgeConfirmation = 0
    let g:SignatureMarkTextHLDynamic = 1
    let g:SignatureMarkerTextHLDynamic = 1
    let g:SignatureIncludeMarks = 'abcdefgABCDEFG'
    let g:SignatureIncludeMarkers = repeat('⚐', 10)
    autocmd MyAutoCmd User GitGutter call signature#sign#Refresh()

- repo: nathanaelkane/vim-indent-guides
  on_cmd: [IndentGuidesEnable, IndentGuidesDisable, IndentGuidesToggle]
  hook_post_source: |
    call indent_guides#init_script_vars()
    call indent_guides#highlight_colors()
  hook_add: |
    let g:indent_guides_color_change_percent = 3
    let g:indent_guides_autocmds_enabled = 0
    let g:indent_guides_default_mapping = 0
    let g:indent_guides_guide_size = 1
    let g:indent_guides_indent_levels = 25
    let g:indent_exclude = [ 'help', 'denite', 'codi' ]
    augroup user_plugin_indentguides
      autocmd!
      autocmd BufEnter *
      \ if ! empty(&l:filetype) && index(g:indent_exclude, &l:filetype) == -1
      \|   if g:indent_guides_autocmds_enabled == 0 && &l:expandtab
      \|     IndentGuidesEnable
      \|   elseif g:indent_guides_autocmds_enabled == 1 && ! &l:expandtab
      \|     IndentGuidesDisable
      \|   endif
      \| endif
    augroup END
    if ! has('vim_starting')
      doautocmd <nomodeline> user_plugin_indentguides BufEnter
    endif

- repo: rhysd/committia.vim
  on_path: COMMIT_EDITMSG
  hook_source: let g:committia_min_window_width = 70

- repo: junegunn/limelight.vim
  if: empty($VIM_MINIMAL)
  on_cmd: Limelight

- repo: junegunn/goyo.vim
  if: empty($VIM_MINIMAL)
  depends: limelight.vim
  on_cmd: Goyo
  hook_source: source $VIMPATH/vimrc.goyo

# Asynchronous linting and make framework for Neovim/Vim
- repo: neomake/neomake
  on_cmd: [Neomake, NeomakeInfo, NeomakeToggle, NeomakeDisable, NeomakeEnable]
  hook_add: |
    let g:lint_filetypes = [
      \  'yaml.ansible', 'python', 'php', 'ruby', 'vim', 'go', 'sh',
      \  'javascript', 'jsx', 'javascript.jsx', 'json', 'css',
      \  'markdown', 'html', 'yaml'
      \ ]
    autocmd MyAutoCmd BufWritePost *
      \ if index(g:lint_filetypes, &filetype) > -1 && empty(&buftype)
      \|   Neomake
      \| elseif &filetype =~ 'html'
      \|   Neomake tidy
      \| endif
    autocmd VimEnter * NeomakeDisable

- repo: itchyny/calendar.vim
  if: empty($VIM_MINIMAL)
  on_cmd: Calendar
  hook_source: |
    let g:calendar_google_calendar = 0
    let g:calendar_google_task = 0

# Personal Wiki for Vim
- repo: vimwiki/vimwiki
  if: empty($VIM_MINIMAL)
  on_map: {n: <Plug>}
  on_cmd: [VimwikiIndex, VimwikiUISelect]
  hook_add: |
    let g:vimwiki_use_calendar = 1
    let g:vimwiki_hl_headers = 1
    let g:vimwiki_hl_cb_checked = 1
    let g:vimwiki_autowriteall = 0
  hook_source: |
    let g:vimwiki_list = [
    \   { 'auto_toc': 1,
    \     'path': '~/git/wiki/',
    \     'index': 'home',
    \     'syntax': 'markdown',
    \     'ext': '.md' },
    \   { 'diary_header': 'Diary',
    \     'diary_link_fmt': '%Y-%m-%d',
    \     'auto_toc': 1,
    \     'path': '~/git/diary/',
    \     'syntax': 'markdown',
    \     'ext': '.md' }
    \ ]

# }}}
# Completion {{{
- repo: ludovicchabant/vim-gutentags
  if: executable('ctags') && empty($VIM_MINIMAL)
  on_path: .*
  hook_add: |
    let g:gutentags_cache_dir = $VARPATH.'/tags'
    if ! isdirectory(g:gutentags_cache_dir)
      call mkdir(g:gutentags_cache_dir, 'p')
    endif
    let g:gutentags_generate_on_write = 1
    let g:gutentags_generate_on_missing = 1
    let g:gutentags_generate_on_new = 0
    let g:gutentags_exclude_project_root = [ '/usr/local' ]
    let g:gutentags_exclude_filetypes = [ 'defx', 'denite', 'vista' ]
    let g:gutentags_ctags_exclude_wildignore = 1
    let g:gutentags_ctags_exclude = [
      \ '.idea', '.cache', '.tox', '.bundle', 'build', 'dist',
      \ '*/wp-admin', '*/wp-content', '*/wp-includes',
      \ '*/application/vendor', '*/vendor/ckeditor', '*/media/vendor'
      \ ]

# emmet-vim is a vim plug-in which provides support for expanding abbreviations similar to emmet.
- repo: mattn/emmet-vim
  if: empty($VIM_MINIMAL)
  on_event: InsertEnter
  on_ft: [html, css, jsx, javascript, javascript.jsx]
  hook_source: |
    let g:use_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'

- repo: Raimondi/delimitMate
  on_event: InsertEnter
  hook_source: |
    let g:delimitMate_expand_cr = 1
    let g:delimitMate_expand_space = 1
    let g:delimitMate_excluded_ft = 'html'

- repo: Shougo/deoplete.nvim
  depends: context_filetype.vim
  if: has('nvim') && empty($VIM_MINIMAL)
  on_event: InsertEnter
  hook_source: |
    source $VIMPATH/vimrc.deoplete
    call deoplete#enable()

- repo: zchee/deoplete-go
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft: go
  on_event: InsertEnter

- repo: zchee/deoplete-jedi
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft: python
  on_event: InsertEnter
  hook_source: autocmd MyAutoCmd FileType python setlocal omnifunc=

- repo: carlitux/deoplete-ternjs
  build: npm install -g tern
  if: executable('npm') && has('nvim') && empty($VIM_MINIMAL)
  on_event: InsertEnter
  on_ft: [javascript, jsx, javascript.jsx]
  hook_source: |
    let g:tern_request_timeout = 1
    let g:tern_show_signature_in_pum = 0

- repo: fszymanski/deoplete-emoji
  on_ft: [ markdown, gitcommit ]
  on_event: InsertEnter

- repo: ternjs/tern_for_vim
  build: npm install
  if: executable('npm') && empty($VIM_MINIMAL)
  on_event: InsertEnter
  on_ft: [javascript, jsx, javascript.jsx]
  hook_add: |
    let g:tern#command = ['tern']
    let g:tern#arguments = ['--persistent']
    let g:tern_request_timeout = 1
    let g:tern_show_signature_in_pum = 0
  hook_post_source: |
    autocmd MyAutoCmd FileType javascript setlocal omnifunc=tern#Complete

- repo: Shougo/neosnippet.vim
  depends: [neosnippet-snippets, context_filetype.vim]
  if: empty($VIM_MINIMAL)
  on_event: InsertCharPre
  on_ft: snippet
  hook_add: |
    let g:neosnippet#data_directory = $VARPATH.'/snippets'
    let g:neosnippet#snippets_directory=expand('$VIMPATH/snippets')
  hook_source: |
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#enable_complete_done = 1
    let g:neosnippet#expand_word_boundary = 1
    let g:neosnippet#enable_auto_clear_markers = 1
    autocmd MyAutoCmd InsertLeave * NeoSnippetClearMarkers

- repo: Shougo/echodoc.vim
  on_event: CompleteDone
  hook_post_source: call echodoc#enable()

- repo: ncm2/float-preview.nvim
  if: has('nvim') && exists('#CompleteChanged')
  on_event: InsertEnter
  hook_add: |
    let g:float_preview#docked = 0
    let g:float_preview#max_width = 80

- {repo: Shougo/neosnippet-snippets, on_source: neosnippet.vim}
- {repo: Shougo/context_filetype.vim, lazy: 1}
- {repo: Shougo/neco-vim, on_ft: vim}
- {repo: Shougo/neoinclude.vim, on_source: deoplete.nvim}
- {repo: Shougo/neco-syntax, on_source: deoplete.nvim}

# jedi-vim is a VIM binding to the python autocompletion library Jedi.
- repo: davidhalter/jedi-vim
  if: empty($VIM_MINIMAL)
  on_ft: python
  hook_add: |
    let g:jedi#completions_enabled = 0
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#smart_auto_mappings = 0
    let g:jedi#show_call_signatures = 1
  hook_source: |
    let g:jedi#use_tag_stack = 0
    let g:jedi#popup_select_first = 0
    let g:jedi#popup_on_dot = 0
    let g:jedi#max_doc_height = 100
    let g:jedi#quickfix_window_height = 10
    let g:jedi#use_splits_not_buffers = 'right'
# }}}
# Denite {{{
- repo: Shougo/denite.nvim
  on_cmd: Denite
  hook_source: source $VIMPATH/vimrc.denite

- {repo: Shougo/neoyank.vim, on_source: denite.nvim, on_event: TextYankPost}
- {repo: Shougo/junkfile.vim, on_source: denite.nvim}
- {repo: chemzqm/unite-location, on_source: denite.nvim}
- {repo: chemzqm/denite-git, on_source: denite.nvim}
- {repo: rafi/vim-denite-z, on_source: denite.nvim}
- {repo: rafi/vim-denite-session, on_source: denite.nvim}

# - repo: raghur/fruzzy
#   on_source: denite.nvim
#   hook_post_update: call fruzzy#install()
#   hook_source: let g:fruzzy#sortonempty = 0
# }}}
# Language & DevTools {{{
- {repo: hail2u/vim-css3-syntax, on_ft: css}
- {repo: ap/vim-css-color, on_ft: [css, scss, sass]}
- {repo: cakebaker/scss-syntax.vim, on_ft: [scss, sass]}
- {repo: groenewege/vim-less, on_ft: less}
- {repo: othree/csscomplete.vim, on_ft: css}
- {repo: iloginow/vim-stylus, on_ft: stylus } # or wavded/vim-stylus ?
- {repo: mustache/vim-mustache-handlebars, on_ft: html}

- repo: othree/html5.vim
  on_ft: html
  hook_add: |
    let g:html5_event_handler_attributes_complete = 0
    let g:html5_rdfa_attributes_complete = 0
    let g:html5_microdata_attributes_complete = 0
    let g:html5_aria_attributes_complete = 0

# tools for json
- {repo: elzr/vim-json, on_ft: [json]}
# tools for developing Node.js
- {repo: moll/vim-node, on_ft: [javascript, jsx, javascript.jsx]}
# improved Javascript indentation and syntax
- repo: pangloss/vim-javascript
  on_ft: [javascript, jsx, javascript.jsx]
  hook_add: |
    let g:javascript_plugin_jsdoc = 1
    let g:javascript_plugin_flow = 1

- repo: MaxMEllon/vim-jsx-pretty
  on_ft: [javascript, jsx]
  depends: vim-javascript
  hook_add: let g:vim_jsx_pretty_colorful_config = 1

- {repo: heavenshell/vim-jsdoc, on_ft: [javascript, jsx, javascript.jsx]}
- {repo: jparise/vim-graphql, on_ft: [javascript, jsx]}
- {repo: posva/vim-vue, on_ft: vue}

# CoffeeScript support
- {repo: kchmck/vim-coffee-script, on_ft: [coffee]}

- repo: plasticboy/vim-markdown
  on_ft: markdown
  hook_add: |
    let g:vim_markdown_folding_level = 1
    let g:vim_markdown_folding_style_pythonic = 1
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_auto_insert_bullets = 1
    let g:vim_markdown_new_list_item_indent = 0
    let g:vim_markdown_conceal_code_blocks = 0
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_strikethrough = 1
    let g:vim_markdown_edit_url_in = 'vsplit'
    let g:vim_markdown_fenced_languages = [
      \ 'c++=cpp',
      \ 'viml=vim',
      \ 'bash=sh',
      \ 'ini=dosini',
      \ 'js=javascript',
      \ 'json=javascript',
      \ 'docker=Dockerfile',
      \ 'makefile=make',
      \ 'py=python'
      \ ]

- repo: rhysd/vim-gfm-syntax
  depends: vim-markdown
  on_ft: markdown
  hook_add: |
    let g:gfm_syntax_enable_always = 0
    let g:gfm_syntax_highlight_emoji = 0
    let g:gfm_syntax_enable_filetypes = ['markdown']

- repo: fatih/vim-go
  on_ft: [go, gomod]
  hook_add: |
    let g:go_highlight_array_whitespace_error = 0
    let g:go_highlight_chan_whitespace_error = 0
    let g:go_highlight_space_tab_error = 0
    let g:go_highlight_trailing_whitespace_error = 0
    let g:go_highlight_extra_types = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_format_strings = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_function_calls = 1
    let g:go_highlight_function_parameters = 1
    let g:go_highlight_types = 1
    let g:go_highlight_generate_tags = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_string_spellcheck = 0
    let g:go_highlight_variable_declarations = 0
    let g:go_highlight_variable_assignments = 0

- {repo: vim-python/python-syntax, on_ft: python}
- {repo: Vimjas/vim-python-pep8-indent, on_ft: python}
- {repo: vim-scripts/python_match.vim, on_ft: python}
- {repo: tmhedberg/SimpylFold, on_ft: python}
- {repo: raimon49/requirements.txt.vim, on_ft: requirements}

- {repo: tbastos/vim-lua, on_ft: lua}
- {repo: vim-ruby/vim-ruby, on_ft: ruby }
- {repo: keith/swift.vim, on_ft: swift }
- {repo: vim-jp/syntax-vim-ex, on_ft: vim}

- {repo: chrisbra/csv.vim, on_ft: csv}
- {repo: tpope/vim-git, on_ft: [gitcommit, gitrebase, gitconfig]}
- {repo: ekalinin/Dockerfile.vim, on_ft: [Dockerfile, yaml.docker-compose]}
- {repo: MTDL9/vim-log-highlighting, on_ft: log }

- {repo: cespare/vim-toml, on_ft: toml}
- {repo: mboughaba/i3config.vim, on_ft: i3config}
- {repo: dag/vim-fish, on_ft: fish}
- {repo: jstrater/mpvim, on_ft: portfile}
- {repo: robbles/logstash.vim, on_ft: logstash}
- {repo: lifepillar/pgsql.vim, on_ft: pgsql }
- {repo: chr4/nginx.vim, on_ft: nginx }
- {repo: IN3D/vim-raml, on_ft: raml}

- repo: hashivim/vim-terraform
  on_ft: [terraform, hcl]
  on_cmd: [Terraform, TerraformFmt]
  hook_add: let g:terraform_fmt_on_save = 1

- repo: pearofducks/ansible-vim
  on_ft: [ansible, ansible_hosts, jinja2]
  hook_add: |
    let g:ansible_extra_keywords_highlight = 1
    let g:ansible_template_syntaxes = {
      \   '*.json.j2': 'json',
      \   '*.(ba)?sh.j2': 'sh',
      \   '*.ya?ml.j2': 'yaml',
      \   '*.xml.j2': 'xml',
      \   '*.conf.j2': 'conf',
      \   '*.ini.j2': 'ini'
      \ }
# }}}
# Operators {{{
- {repo: kana/vim-operator-user, lazy: 1}

- repo: kana/vim-operator-replace
  depends: vim-operator-user
  on_map: {vnx: <Plug>}

- repo: machakann/vim-sandwich
  depends: vim-operator-user
  on_map: { vonx: <Plug>(operator-sandwich- }
  hook_add: |
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1
    let g:textobj_sandwich_no_default_key_mappings = 1

- repo: haya14busa/vim-operator-flashy
  depends: vim-operator-user
  on_map: {nx: <Plug>}
# }}}
# Text objects {{{
- repo: kana/vim-textobj-user
- {repo: terryma/vim-expand-region, on_map: {x: <Plug>}}
- {repo: AndrewRadev/sideways.vim, on_map: {ox: <Plug>Sideways}}
- {repo: AndrewRadev/splitjoin.vim, on_map: {n: <Plug>Splitjoin}}
- {repo: AndrewRadev/linediff.vim, on_cmd: Linediff}

- repo: AndrewRadev/dsf.vim
  on_map: {n: <Plug>Dsf}
  hook_add: let g:dsf_no_mappings = 1

- repo: osyo-manga/vim-textobj-multiblock
  depends: vim-textobj-user
  on_map: {ox: <Plug>}
  hook_add: let g:textobj_multiblock_no_default_key_mappings = 1

- repo: kana/vim-textobj-function
  depends: vim-textobj-user
  on_map: {ox: <Plug>}
  hook_add: let g:textobj_function_no_default_key_mappings = 1
# }}}

# vim: set foldmethod=marker ts=2 sw=2 tw=80 expandtab :
