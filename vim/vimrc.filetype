" File Types
"-------------------------------------------------

" Reload vim config automatically {{{
execute 'autocmd MyAutoCmd BufWritePost '.$VIMPATH.'/config/*,vimrc nested'
  \ .' source $MYVIMRC | redraw | silent doautocmd ColorScheme'
" }}}

" Ruby {{{
" Support functions {{{
function! s:setf(filetype) abort
  if &filetype !~# '\<'.a:filetype.'\>'
    let &filetype = a:filetype
  endif
endfunction

func! s:StarSetf(ft)
  if expand('<amatch>') !~ g:ft_ignore_pat
    exe 'setf ' . a:ft
  endif
endfunc
" }}}

" HTML with Ruby - eRuby
au BufNewFile,BufRead *.erb,*.rhtml call s:setf('eruby')
" Interactive Ruby shell
au BufNewFile,BufRead .irbrc,irbrc call s:setf('ruby')
" Ruby
au BufNewFile,BufRead *.rb,*.rbw,*.gemspec call s:setf('ruby')
" Rackup
au BufNewFile,BufRead *.ru call s:setf('ruby')
" Bundler
au BufNewFile,BufRead Gemfile call s:setf('ruby')
" Ruby on Rails
au BufNewFile,BufRead *.builder,*.rxml,*.rjs,*.ruby call s:setf('ruby')
" Rakefile
au BufNewFile,BufRead [rR]akefile,*.rake call s:setf('ruby')
au BufNewFile,BufRead [rR]akefile* call s:StarSetf('ruby')
" Rantfile
au BufNewFile,BufRead [rR]antfile,*.rant call s:setf('ruby')
" Appraisal
au BufNewFile,BufRead Appraisals call s:setf('ruby')
" Autotest
au BufNewFile,BufRead .autotest call s:setf('ruby')
" Buildr Buildfile
au BufNewFile,BufRead [Bb]uildfile call s:setf('ruby')
" Capistrano
au BufNewFile,BufRead Capfile,*.cap call s:setf('ruby')
" Chef
au BufNewFile,BufRead Cheffile call s:setf('ruby')
au BufNewFile,BufRead Berksfile call s:setf('ruby')
" CocoaPods
au BufNewFile,BufRead Podfile,*.podspec call s:setf('ruby')
" Guard
au BufNewFile,BufRead Guardfile,.Guardfile call s:setf('ruby')
" Jbuilder
au BufNewFile,BufRead *.jbuilder call s:setf('ruby')
" Kitchen Sink
au BufNewFile,BufRead KitchenSink call s:setf('ruby')
" Opal
au BufNewFile,BufRead *.opal call s:setf('ruby')
" Pry config
au BufNewFile,BufRead .pryrc call s:setf('ruby')
" Puppet librarian
au BufNewFile,BufRead Puppetfile call s:setf('ruby')
" Rabl
au BufNewFile,BufRead *.rabl call s:setf('ruby')
" Routefile
au BufNewFile,BufRead [rR]outefile call s:setf('ruby')
" SimpleCov
au BufNewFile,BufRead .simplecov call s:setf('ruby')
" Thor
au BufNewFile,BufRead [tT]horfile,*.thor call s:setf('ruby')
" Vagrant
au BufNewFile,BufRead [vV]agrantfile call s:setf('ruby')
" }}}

augroup MyAutoCmd " {{{

  " Highlight current line only on focused window
  autocmd WinEnter,InsertLeave * set cursorline
  autocmd WinLeave,InsertEnter * set nocursorline

  " Vim detects *.pc as filetype 'proc' but has no syntax highlighting for Pro*C. Override it so that it highlights as C.
  "   See http://vim.wikia.com/wiki/Forcing_Syntax_Coloring_for_files_with_odd_extensions
  autocmd BufRead,BufNewFile *.pc set filetype=c

  " Automatically set read-only for files being edited elsewhere
  autocmd SwapExists * nested let v:swapchoice = 'o'

  " Check if file changed when its window is focus, more eager than 'autoread'
  autocmd WinEnter,FocusGained * checktime

  autocmd Syntax * if 5000 < line('$') | syntax sync minlines=200 | endif

  " Update filetype on save if empty
  autocmd BufWritePost * nested
    \ if &l:filetype ==# '' || exists('b:ftdetect')
    \ |   unlet! b:ftdetect
    \ |   filetype detect
    \ | endif

  " Reload Vim script automatically if setlocal autoread
  autocmd BufWritePost,FileWritePost *.vim nested
    \ if &l:autoread > 0 | source <afile> |
    \   echo 'source '.bufname('%') |
    \ endif

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  autocmd BufReadPost *
    \ if &ft !~ '^git\c' && ! &diff && line("'\"") > 0 && line("'\"") <= line("$")
    \|   execute 'normal! g`"zvzz'
    \| endif

  " Disable paste and/or update diff when leaving insert mode
  autocmd InsertLeave *
      \ if &paste | setlocal nopaste mouse=a | echo 'nopaste' | endif |
      \ if &l:diff | diffupdate | endif

  autocmd TabLeave * let g:lasttab = tabpagenr()

  autocmd FileType crontab setlocal nobackup nowritebackup

  autocmd FileType docker-compose setlocal expandtab

  " Turn off expandtab for editing makefiles
  autocmd FileType make setlocal noexpandtab

  autocmd FileType gitcommit setlocal spell textwidth=72

  autocmd FileType gitcommit,qfreplace setlocal nofoldenable

  " https://webpack.github.io/docs/webpack-dev-server.html#working-with-editors-ides-supporting-safe-write
  autocmd FileType html,css,javascript,jsx,javascript.jsx setlocal backupcopy=yes

  autocmd FileType zsh setlocal foldenable foldmethod=marker

  autocmd FileType html setlocal path+=./;/

  autocmd FileType markdown
    \ setlocal spell expandtab autoindent
      \ formatoptions=tcroqn2 comments=n:>

  autocmd FileType apache setlocal path+=./;/

  autocmd FileType cam setlocal nonumber synmaxcol=10000

  autocmd FileType go highlight default link goErr WarningMsg |
        \ match goErr /\<err\>/

augroup END " }}}

" vim: set foldmethod=marker ts=2 sw=2 tw=80 expandtab :
