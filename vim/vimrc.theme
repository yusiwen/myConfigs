" THEME
" ================================

scriptencoding utf-8
execute 'source ' . expand('$VIMPATH/vimrc.colortheme')

" Tabline {{{
function! Tabline() abort "{{{
  " Active project tab
  let s:tabline =
    \ '%#TabLineAlt# %{badge#project()} >'.
    \ '%#TabLineAltShade#'.
    \ '%#TabLineFill#  '

  let l:nr = tabpagenr()
  for l:i in range(tabpagenr('$'))
    if l:i + 1 == l:nr
      " Active tab
      let s:tabline .=
        \ '%#TabLineSel# '.
        \ '%'.(l:i+1).'T'.'[%{badge#label('.(l:i+1).', "", "N/A")}'.'] '
    else
      " Normal tab
      let s:tabline .=
        \ '%#TabLine# '.
        \ '%'.(l:i+1).'T%{badge#label('.(l:i+1).', "", "N/A")} '
    endif
  endfor
  " Empty space and session indicator
  let s:tabline .=
    \ '%#TabLineFill#%T%=%#TabLine#%{badge#session("['.fnamemodify(v:this_session, ':t:r').']")}'
  return s:tabline
endfunction "}}}

let &tabline='%!Tabline()'
" }}}
" Statusline {{{
function! EditMode()
  redraw

  "n	Normal
  "no	Operator-pending
  "v	Visual by character
  "V	Visual by line
  "CTRL-V	Visual blockwise
  "s	Select by character
  "S	Select by line
  "CTRL-S	Select blockwise
  "i	Insert
  "R	Replace |R|
  "Rv	Virtual Replace |gR|
  "c	Command-line
  "cv	Vim Ex mode |gQ|
  "ce	Normal Ex mode |Q|
  "r	Hit-enter prompt
  "rm	The -- more -- prompt
  "r?	A |:confirm| query of some sort
  "!	Shell or external command is executing
  if (mode() =~# '\v(n|no)')
    execute 'hi User8 cterm=NONE ctermfg=248 ctermbg=235 guifg=#a8a8a8 guibg=#262626'
  elseif (mode() =~# '\v(v|V)')
    execute 'hi User8 cterm=NONE ctermfg=255 ctermbg=6 guifg=#eeeeee guibg=#528b8b'
  elseif (mode() ==# '')
    execute 'hi User8 cterm=NONE ctermfg=255 ctermbg=6 guifg=#eeeeee guibg=#528b8b'
    return 'X'
  elseif (mode() ==# 'R')
    execute 'hi User8 cterm=NONE ctermfg=255 ctermbg=3 guifg=#eeeeee guibg=#cc8800'
  elseif (mode() ==# 'i')
    execute 'hi User8 cterm=NONE ctermfg=255 ctermbg=2 guifg=#eeeeee guibg=#719611'
  else
    execute 'hi User8 cterm=NONE ctermfg=248 ctermbg=235 guifg=#a8a8a8 guibg=#262626'
  endif

  return mode()
endfunction

function! FileMode()
  redraw
  let s:modes = badge#mode('R', 'Z')
  if empty(s:modes)
    let s:modes = '#'
    execute 'hi User4 ctermfg=242 ctermbg=235 guifg=#6c6c6c guibg=#262626'
  elseif s:modes ==# 'R'
    execute 'hi User4 cterm=bold ctermfg=1 ctermbg=235 guifg=#aa4450 guibg=#262626 gui=bold'
  elseif s:modes ==# 'Z'
    execute 'hi User4 cterm=bold ctermfg=1 ctermbg=235 guifg=#aa4450 guibg=#262626 gui=bold'
  endif
  return s:modes
endfunction

function! BufferNumber()
  redraw
  let s:modified = badge#modified('+')
  let s:bufno = bufnr('%')
  if empty(s:modified)
    execute 'hi User3 ctermfg=244 ctermbg=237 guifg=#808080 guibg=#3a3a3a'
  else
    execute 'hi User3 cterm=bold ctermfg=255 ctermbg=1 guifg=#eeeeee guibg=#aa4450 gui=bold'
  endif
  return s:bufno
endfunction

" Status line detail:
" -------------------
"
" %f    file name
" %F    file path
" %y    file type between braces (if defined)
"
" %{v:servername}   server/session name (gvim only)
"
" %<    collapse to the left if window is to small
"
" %( %) display contents only if not empty
"
" %1*   use color preset User1 from this point on (use %0* to reset)
"
" %([%R%M]%)   read-only, modified and modifiable flags between braces
"
" %{'!'[&ff=='default_file_format']}
"        shows a '!' if the file format is not the platform default
"
" %{'$'[!&list]}  shows a '*' if in list mode
" %{'~'[&pm=='']} shows a '~' if in patchmode
"
" %=     right-align following items
"
" %{&fileencoding}  displays encoding (like utf8)
" %{&fileformat}    displays file format (unix, dos, etc..)
" %{&filetype}      displays file type (vim, python, etc..)
"
" #%n   buffer number
" %l/%L line number, total number of lines
" %p%   percentage of file
" %c%V  column number, absolute column number
" &modified         whether or not file was modified
"
" %-5.x - syntax to add 5 chars of padding to some element x
let s:stl  = " %7*%{&paste ? 'P' : ''}%*"         " Paste symbol
let s:stl .= '%4* %{FileMode()} %*'               " Modified symbol
let s:stl .= '%3* %{BufferNumber()} %*'           " Buffer number and edit flag
let s:stl .= '%8* %{EditMode()} %*'               " Edit mode
let s:stl .= ' %1*%{badge#filename()}%*'          " Filename
let s:stl .= ' %<'                                " Truncate here
let s:stl .= '%( %{badge#branch()} %)'           " Git branch name
let s:stl .= "%5*%( %{badge#trails('WS:%s')} %)" " Whitespace
let s:stl .= '%(%{badge#syntax()} %)%*'           " syntax check
let s:stl .= '%='                                 " Align to right
let s:stl .= "%3*%(%{tagbar#currenttag(' %s ', '')}%)%*  "   " Current tag
let s:stl .= '%{badge#format()} %*'               " File format
let s:stl .= '%( %{&fenc} %)'                     " File encoding
let s:stl .= '%*%( %{&ft} %)'                     " File type
let s:stl .= '%2* %l/%2c%4p%% '                   " Line and column
let s:stl .= '%{badge#indexing()}%*'              " Indexing tags indicator

" Non-active Statusline {{{
let s:stl_nc  = "  %{badge#mode('R', 'Z')}%n"     " Readonly & buffer
let s:stl_nc .= "%5*%{badge#modified('+')}%*"     " Write symbol
let s:stl_nc .= ' %{badge#filename()}'            " Relative supername
let s:stl_nc .= '%='                              " Align to right
let s:stl_nc .= '%{&ft} '                         " File type
" }}}

let s:disable_statusline =
  \ 'denite\|unite\|vimfiler\|tagbar\|nerdtree\|undotree\|gundo\|diff\|peekaboo\|sidemenu'

" Toggle Statusline {{{
augroup statusline
  autocmd!
  autocmd FileType,WinEnter,BufWinEnter,BufReadPost *
    \ if &filetype !~? s:disable_statusline
    \ | let &l:statusline = s:stl
    \ | endif
  autocmd WinLeave *
    \ if &filetype !~? s:disable_statusline
    \ | let &l:statusline = s:stl_nc
    \ | endif
augroup END "}}}
" }}}
" Plugin: NERDTree icons and highlights {{{
let g:NERDTreeIndicatorMapCustom = {
  \ 'Modified':  '»',
  \ 'Staged':    '✚',
  \ 'Untracked': '★',
  \ 'Renamed':   '→',
  \ 'Unmerged':  '±',
  \ 'Deleted':   '✖',
  \ 'Dirty':     '≈',
  \ 'Clean':     '✓',
  \ 'Ignored':   '≠',
  \ 'Unknown':   '?'
  \ }

let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '-'

highlight! NERDTreeOpenable ctermfg=132 guifg=#af5f87
highlight! def link NERDTreeClosable NERDTreeOpenable

highlight! NERDTreeFile ctermfg=246 guifg=#949494
highlight! NERDTreeExecFile ctermfg=246 guifg=#949494

highlight! clear NERDTreeFlags
highlight! NERDTreeFlags ctermfg=234 guifg=#1c1c1c
highlight! NERDTreeCWD ctermfg=243 guifg=#767676

highlight! NERDTreeGitStatusModified ctermfg=1 guifg=#aa4450
highlight! NERDTreeGitStatusStaged ctermfg=10 guifg=#b1d631
highlight! NERDTreeGitStatusUntracked ctermfg=12 guifg=#90b0d1
highlight! def link NERDTreeGitStatusRenamed Title
highlight! def link NERDTreeGitStatusUnmerged Label
highlight! def link NERDTreeGitStatusDirDirty Constant
highlight! def link NERDTreeGitStatusDirClean DiffAdd
highlight! def link NERDTreeGitStatusUnknown Comment

function! s:NERDTreeHighlight()
  for l:name in keys(g:NERDTreeIndicatorMapCustom)
    let l:icon = g:NERDTreeIndicatorMapCustom[l:name]
    if empty(l:icon)
      continue
    endif
    let l:prefix = index(['Dirty', 'Clean'], l:name) > -1 ? 'Dir' : ''
    let l:hiname = escape('NERDTreeGitStatus'.l:prefix.l:name, '~')
    execute 'syntax match '.l:hiname.' #'.l:icon.'# containedin=NERDTreeFlags'
  endfor

  syntax match hideBracketsInNerdTree "\]" contained conceal containedin=NERDTreeFlags
  syntax match hideBracketsInNerdTree "\[" contained conceal containedin=NERDTreeFlags
endfunction

augroup nerdtree-highlights
  autocmd!
  autocmd FileType nerdtree call s:NERDTreeHighlight()
augroup END
"}}}
" Plugin: Tagbar icons {{{
let g:tagbar_iconchars = ['▷', '◢']
"}}}
" Plugin: Neomake icons {{{
let g:neomake_error_sign = {'text': '!', 'texthl': 'ErrorMsg'}
let g:neomake_warning_sign = {'text': '!', 'texthl': 'WarningMsg'}
let g:neomake_message_sign = {'text': '!', 'texthl': 'NeomakeMessageSign'}
let g:neomake_info_sign = {'text': '!', 'texthl': 'NeomakeInfoSign'}
"}}}
" Plugin: vim-gitgutter {{{
highlight! GitGutterAdd          ctermfg=46 ctermbg=237 guifg=#00ff00 guibg=#303030
highlight! GitGutterChange       ctermfg=3  ctermbg=237 guifg=#cc8800 guibg=#303030
highlight! GitGutterDelete       ctermfg=1  ctermbg=237 guifg=#aa4450 guibg=#303030
highlight! GitGutterChangeDelete ctermfg=1  ctermbg=237 guifg=#aa4450 guibg=#303030
" }}}
" Plugin: denite {{{
highlight! clear WildMenu
highlight! link WildMenu CursorLine
highlight! link deniteSelectedLine Type
highlight! link deniteMatchedChar Function
highlight! link deniteMatchedRange Underlined
highlight! link deniteMode Comment
highlight! link deniteSource_QuickfixPosition qfLineNr
" }}}
" Plugin: vim-operator-flashy {{{
highlight! link Flashy DiffText
" }}}
" Plugin: vim-bookmarks {{{
let g:bookmark_sign = '⚐'
highlight! BookmarkSign            ctermfg=12 guifg=#90b0d1
highlight! BookmarkAnnotationSign  ctermfg=11 guifg=#ff9800
" }}}
" Plugin: vim-choosewin {{{
let g:choosewin_label = 'SDFJKLZXCV'
let g:choosewin_overlay_enable = 1
let g:choosewin_statusline_replace = 1
let g:choosewin_overlay_clear_multibyte = 0
let g:choosewin_blink_on_land = 0

let g:choosewin_color_label = {
  \ 'cterm': [ 236, 2 ], 'gui': [ '#555555', '#000000' ] }
let g:choosewin_color_label_current = {
  \ 'cterm': [ 234, 220 ], 'gui': [ '#333333', '#000000' ] }
let g:choosewin_color_other = {
  \ 'cterm': [ 235, 235 ], 'gui': [ '#333333' ] }
let g:choosewin_color_overlay = {
  \ 'cterm': [ 2, 10 ], 'gui': [ '#88A2A4' ] }
let g:choosewin_color_overlay_current = {
  \ 'cterm': [ 72, 64 ], 'gui': [ '#7BB292' ] }
" }}}

" vim: set foldmethod=marker ts=2 sw=0 tw=80 expandtab :
