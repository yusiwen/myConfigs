"
" ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
" ██║   ██║██║████╗ ████║██╔══██╗██╔════╝
" ██║   ██║██║██╔████╔██║██████╔╝██║
" ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║
"  ╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
"   ╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝
"
"  @author: yusiwen@gmail.com
"  ~/.vim/vimrc is a symbolic link to ~/myConfigs/vim/vimrc

set nocompatible               " Be iMproved

" Variables {{{
let s:is_windows = has('win16') || has('win32') || has('win64')
let s:is_cygwin = has('win32unix')
let s:is_mac = !s:is_windows && !s:is_cygwin
      \ && (has('mac') || has('macunix') || has('gui_macvim') ||
      \   (!executable('xdg-open') &&
      \     system('uname') =~? '^darwin'))
let s:is_linux = !s:is_windows && !s:is_cygwin && !s:is_mac
      \ && (has('unix') && system('uname') =~? '^linux')

let $VIMPATH = expand('~/.vim')
let $VARPATH = expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : '~/.cache').'/vim')

augroup MyAutoCmd
augroup END

" }}}

" Global Mappings {{{
" Use spacebar as leader and ; as secondary-leader
" Required before loading plugins!
let g:mapleader="\<Space>"
let g:maplocalleader=';'

" Release keymappings prefixes, evict entirely for use of plug-ins.
nnoremap <Space>  <Nop>
xnoremap <Space>  <Nop>
nnoremap ,        <Nop>
xnoremap ,        <Nop>
nnoremap ;        <Nop>
xnoremap ;        <Nop>
nnoremap m        <Nop>
xnoremap m        <Nop>
" }}}

" dein.vim {{{
filetype off

let g:dein#install_max_processes = 16
let g:dein#install_progress_type = 'echo'
let g:dein#enable_notification = 0
let g:dein#install_log_filename = $VARPATH.'/dein.log'

function! s:dein_check_ruby() abort
  call system("ruby -e 'require \"json\"; require \"yaml\"'")
  return (v:shell_error == 0) ? 1 : 0
endfunction

function! s:dein_load_yaml(filename) abort
  if executable('yaml2json') && exists('*json_decode')
    " Decode YAML using the CLI tool yaml2json
    " See: https://github.com/koraa/large-yaml2json-json2yaml
    let g:denite_plugins = json_decode(
          \ system('yaml2json', readfile(a:filename)))
  elseif executable('ruby') && exists('*json_decode') && s:dein_check_ruby()
    let g:denite_plugins = json_decode(
          \ system("ruby -e 'require \"json\"; require \"yaml\"; ".
                 \ "print JSON.generate YAML.load \$stdin.read'",
                 \ readfile(a:filename)))
  else
    " Fallback to use python3 and PyYAML
  python3 << endpython
import vim, yaml
with open(vim.eval('a:filename'), 'r') as f:
  vim.vars['denite_plugins'] = yaml.load(f.read())
endpython
  endif

  for plugin in g:denite_plugins
    call dein#add(plugin['repo'], extend(plugin, {}, 'keep'))
  endfor
  unlet g:denite_plugins
endfunction

if &runtimepath !~# '/dein.vim'
  let s:dein_dir = expand('$VARPATH/dein').'/repos/github.com/Shougo/dein.vim'
  if ! isdirectory(s:dein_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_dir
  endif

  execute 'set runtimepath+='.substitute(
         \ fnamemodify(s:dein_dir, ':p') , '/$', '', '')
endif

" Initialize dein.vim (package manager)
let s:path = expand('$VARPATH/dein')
let s:plugins_path = expand('$VIMPATH/plugins.yaml')
if dein#load_state(s:path)
  call dein#begin(s:path, [expand('<sfile>'), s:plugins_path])
  try
    call s:dein_load_yaml(s:plugins_path)
  catch /.*/
    echoerr v:exception
    echomsg 'Error loading plugins.yaml...'
    echomsg 'Caught: ' v:exception
    echoerr 'Please run: pip3 install --user PyYAML'
  endtry

  if isdirectory(expand('$VIMPATH/dev'))
    call dein#local(expand('$VIMPATH/dev'), {'frozen': 1, 'merged': 0})
  endif
  call dein#end()
  call dein#save_state()
  if dein#check_install()
    if ! has('nvim')
      set nomore
    endif
    call dein#install()
  endif
endif
" }}}

" Load less plugins while SSHing to remote machines {{{
if len($SSH_CLIENT)
  let $VIM_MINIMAL = 1
endif
" }}}

" Disable default plugins {{{
" Disable pre-bundled plugins
let g:loaded_getscript = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_gzip = 1
let g:loaded_logiPat = 1
let g:loaded_matchit = 1
let g:loaded_matchparen = 1
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1
let g:loaded_netrwFileHandlers = 1
let g:loaded_netrwSettings = 1
let g:loaded_rrhelper = 1
let g:loaded_ruby_provider = 1
let g:loaded_shada_plugin = 1
let g:loaded_spellfile_plugin  = 1
let g:loaded_tar = 1
let g:loaded_tarPlugin = 1
let g:loaded_tutor_mode_plugin = 1
let g:loaded_2html_plugin = 1
let g:loaded_vimball = 1
let g:loaded_vimballPlugin = 1
let g:loaded_zip = 1
let g:loaded_zipPlugin = 1
" }}}

" General settings {{{
filetype plugin indent on
syntax on

set title
set mouse=a
set ttymouse=sgr

set shortmess=at      " shorten error messages

set nrformats+=alpha  " in-/decrease letters with C-a/C-x

set modeline          " enable modelines
set modelines=5

set selection=inclusive

set number            " enable line numbers
set ruler             " enable something
set cursorline        " enable hiliting of cursor line

set backspace=2       " backspace over EOL etc.

set background=dark   " i prefer dark backgrounds

set hidden            " buffer switching should be quick
set confirm           " ask instead of just print errors

set equalalways       " make splits equal size
" Always splits to the right and below
set splitright
set splitbelow

set lazyredraw        " don't redraw while executing macros

set noshowmode        " don't display mode, it's already in the status line

set laststatus=2      " always show statusline

set encoding=utf-8    " Necessary to show Unicode glyphs
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set fileformats=unix,dos,mac " Use Unix as the standard file type"

set timeoutlen=1000
set ttimeoutlen=0

set fillchars=""

" Mac OSX specific settings {{{
if s:is_mac
  " set italic codes under Mac
  set t_ZH=[3m t_ZR=[23m
  " using OSX system clipboard
  set clipboard=unnamed
endif
" }}}
" }}}

" Sessions {{{
" What to save in sessions:
set sessionoptions-=blank
set sessionoptions-=options
set sessionoptions-=globals
set sessionoptions-=folds
set sessionoptions-=help
set sessionoptions-=buffers
set sessionoptions+=tabpages
" }}}

" GUI or no GUI, that's the question {{{
if has('gui_running')
  set guicursor+=a:blinkon0       " Cursor doesn't blink - it's annoying
  set guioptions-=m               " No Menubar
  set guioptions-=T               " No Toolbar
  set guioptions-=l               " No Scrollbar left
  set guioptions-=L               " No Scrollbar left when split
  set guioptions-=r               " No Scrollbar right
  set guioptions-=r               " No Scrollbar right when split

  set guifont=Input\ Mono\ Compressed\ Regular\ 10

  set lines=50                    " Height
  set columns=130                 " Width

  execute 'source ' . expand('$VIMPATH/vimrc.theme')
else
  execute 'source ' . expand('$VIMPATH/vimrc.theme')
  set t_Co=256
endif
" }}}

" Tabstops {{{
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
set smartindent
set expandtab
" }}}

" Invisibles {{{
" tab: U+25BA, extends: U+00BB, precedes:U+00AB, trail:U+2017, eol:U+00AC
set listchars=tab:►\ ,extends:»,precedes:«,trail:_,eol:¬
set list
nmap <silent> <F11> :set list!<CR>
" }}}

" Folds {{{
" FastFold
" Credits: https://github.com/Shougo/shougo-s-github
autocmd MyAutoCmd TextChangedI,TextChanged *
  \ if &l:foldenable && &l:foldmethod !=# 'manual' |
  \   let b:foldmethod_save = &l:foldmethod |
  \   let &l:foldmethod = 'manual' |
  \ endif

autocmd MyAutoCmd BufWritePost *
  \ if &l:foldmethod ==# 'manual' && exists('b:foldmethod_save') |
  \   let &l:foldmethod = b:foldmethod_save |
  \   execute 'normal! zx' |
  \ endif

if has('folding')
  set foldenable
  set foldmethod=syntax
  set foldlevelstart=0
  set foldtext=FoldText()
endif

" Improved Vim fold-text
" See: http://www.gregsexton.org/2011/03/improving-the-text-displayed-in-a-fold/
function! FoldText()
  " Get first non-blank line
  let fs = v:foldstart
  while getline(fs) =~? '^\s*$' | let fs = nextnonblank(fs + 1)
  endwhile
  if fs > v:foldend
    let line = getline(v:foldstart)
  else
    let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  endif

  let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
  let foldSize = 1 + v:foldend - v:foldstart
  let foldSizeStr = ' ' . foldSize . ' lines '
  let foldLevelStr = repeat('+--', v:foldlevel)
  let lineCount = line('$')
  let foldPercentage = printf('[%.1f', (foldSize*1.0)/lineCount*100) . '%] '
  let expansionString = repeat('.', w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
  return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
endfunction
" }}}

" Pairings {{{
set showmatch
set matchpairs+=<:> " Add HTML brackets to pair matching
set matchtime=1     " Tenths of a second to show the matching paren
set cpoptions-=m    " showmatch will wait 0.5s or until a char is typed"
" }}}

" Margins {{{
set scrolloff=5
set sidescroll=5
" }}}

" Search {{{
set noignorecase
set smartcase       " Keep case when searching with *
set infercase       " Adjust case in insert completion mode
set incsearch       " Incremental search
set hlsearch        " Highlight search results
set wrapscan        " Searches wrap around the end of the file"

" Toggle that stupid highlight search
nmap <silent> ,n :set invhls<CR>:set hls?<CR>
" }}}

" Backup and Recovery {{{
set nobackup
set writebackup
" set swap file directory to ~/.vim/swap, need to mkdir it first
let &directory=expand('$VIMPATH/swap,.')
set swapfile
" }}}

" Completion {{{
if has('wildmenu')
  set nowildmenu
  set wildmode=list:longest,full
  set wildoptions=tagfile
  set wildignorecase
  set wildignore+=.git,.hg,.svn,.stversions,*.pyc,*.spl,*.o,*.out,*~,%*
  set wildignore+=*.jpg,*.jpeg,*.png,*.gif,*.zip,**/tmp/**,*.DS_Store
  set wildignore+=**/node_modules/**,**/bower_modules/**,*/.sass-cache/*
  set wildignore+=__pycache__,*.egg-info
endif

set ofu=syntaxcomplete#Complete
" }}}

" Wrapping {{{
set linebreak
set showbreak=∟\
" toggle wrapping
nmap <silent> <F12> :let &wrap = !&wrap<CR>
" }}}

" Tabs Navigatoin {{{
" Since most terminal emulators do not intercept Ctrl-Tab, they just send the
" same code as for Tab, use <Leader>(which is ',' by default) intead of <C>
" If want to change that, please checkout this post below:
" http://www.staldal.nu/tech/2009/01/10/how-to-use-ctrl-tab-in-gnu-screen/
nnoremap <Leader><S-Tab> :tabprevious<CR>
nnoremap <Leader><Tab> :tabnext<CR>
nnoremap <Leader>nt :tabnew<CR>

"map <C-W> <Esc>:confirm bdelete<CR>

inoremap <Leader><Tab> <Esc>:tabnext<CR>
inoremap <Leader><S-Tab> <Esc>:tabpreviuos<CR>
inoremap <C-t> <Esc>:tabnew<CR>
" }}}

" Tags {{{
set tags=./tags;
nmap <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
nmap <C-]>v :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
nmap <C-]>h :sp <CR>:exec("tag ".expand("<cword>"))<CR>
" }}}

" Macros {{{
" }}}

" Specific File Types Settings {{{
" turn off expandtab for editing makefiles
autocmd FileType make setlocal noexpandtab
" for git commit messages
autocmd Filetype gitcommit setlocal spell textwidth=72
" Vim detects *.pc as filetype 'proc' but has no syntax highlighting for Pro*C. Override it so that it highlights as C.
"   See http://vim.wikia.com/wiki/Forcing_Syntax_Coloring_for_files_with_odd_extensions
augroup filetypedetect
  au BufRead,BufNewFile *.pc set filetype=c
augroup END
" }}}

" Plugins {{{
execute 'source ' . expand('$VIMPATH/vimrc.airline')
execute 'source ' . expand('$VIMPATH/vimrc.mappings')

" {{{ Neomake
let g:neomake_open_list = 2
let g:neomake_verbose = 1
let g:airline#extensions#neomake#enabled = 1

" JAVASCRIPT / JSX
let g:neomake_jsx_enabled_makers = ['eslint']
let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_javascript_eslint_exe = './node_modules/.bin/eslint'

" YAML / ANSIBLE
let g:neomake_yaml_enabled_makers = ['yamllint']
let g:neomake_ansible_enabled_makers = ['yamllint']
" }}}

" vim-multiple_cursors {{{
" make NeoComplete compatible with vim-multiple-cursors
function! Multiple_cursors_before()
  exe 'NeoCompleteLock'
endfunction

function! Multiple_cursors_after()
  exe 'NeoCompleteUnlock'
endfunction
" }}}

" {{{ Eclim
let g:EclimCompletionMethod = 'omnifunc'
" }}}

" RagTag {{{
imap <M-O> <Esc>o
imap <C-J> <Down>
let g:ragtag_global_maps = 1

imap <C-Space> <C-X><Space>
imap <C-CR> <C-X><CR>
" }}}

" vim-better-whitespace {{{
let g:better_whitespace_enabled=0
" }}}

" vim-autoformat {{{
noremap <F3> :Autoformat<CR>
" Custom formatters {{{
" -p = --pad-oper
" -c = --convert-tabs
" -H = --pad-header
" -s# = --indent=spaces=#
" -t = --indent=tab
" -k1 = --align-pointer=type
" -W1 = --align-reference=type
" -xd = --pad-first-paren-out
let g:formatdef_my_astyle_c = '"astyle --mode=c --style=google -xdk1W1pcH".(&expandtab ? "s".shiftwidth() : "t")'
let g:formatters_c = ['my_astyle_c']

let g:formatdef_my_astyle_cpp = '"astyle --mode=c --style=google -xdk1W1pcH".(&expandtab ? "s".shiftwidth() : "t")'
let g:formatters_cpp = ['my_astyle_cpp']
"}}}
" }}}
" }}}

" vim: set foldmethod=marker ts=2 sw=2 tw=80 expandtab :
