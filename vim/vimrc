"
"   V I M R C
"
"   @author: yusiwen@gmail.com
"   ~/.vimrc is a symbolic link to ~/myConfigs/vim/vimrc

set nocompatible               " be iMproved

" Vundle {{{
  filetype off
  set rtp+=~/.vim/bundle/Vundle.vim/
  call vundle#begin()

  " let Vundle manage Vundle
  Plugin 'gmarik/Vundle.vim'

  " Vundles
  " Libraris bundles

  " Github repos
  " quoting/parenthesizing made simple
  Plugin 'tpope/vim-surround'
  " pairs of handy bracket mappings
  Plugin 'tpope/vim-unimpaired'
  " insert or delete brackets, parens, quotes in pair
  Plugin 'jiangmiao/auto-pairs'

  " displays tags in a window
  Plugin 'majutsushi/tagbar'

  " tree explorer plugin for vim
  Plugin 'scrooloose/nerdtree'
  Plugin 'Xuyuanp/nerdtree-git-plugin'

  " easy note taking in Vim
  Plugin 'xolox/vim-misc'
  Plugin 'xolox/vim-notes'

  " sublime text style multiple selection
  Plugin 'terryma/vim-multiple-cursors'

  " Shuogo's neo packages
  Plugin 'Shougo/vimproc.vim'
  Plugin 'Shougo/unite.vim'
  Plugin 'Shougo/unite-session'
  Plugin 'Shougo/neomru.vim'
  "Plugin 'Shougo/vimfiler.vim'
  Plugin 'Shougo/neocomplete.vim'
  "Plugin 'Shougo/neosnippet.vim'
  "Plugin 'Shougo/neosnippet-snippets'
  "Plugin 'honza/vim-snippets'

  "Plugin 'ervandew/supertab'

  " extensible & universal comment
  Plugin 'tomtom/tcomment_vim'
  " colorize text in the form #rrggbb or #rgb
  Plugin 'lilydjwg/colorizer'
  " text filtering and alignment
  Plugin 'godlygeek/tabular'
  " accelerated smooth scroll
  Plugin 'yonchu/accelerated-smooth-scroll'
  " better whitespace highlighting
  Plugin 'ntpeters/vim-better-whitespace'

  " Language & Develop specific repos
  " git wrapper
  Plugin 'tpope/vim-fugitive'
  " shows a git diff in the gutter
  Plugin 'airblade/vim-gitgutter'
  " groovy
  Plugin 'vim-scripts/groovy.vim'
  " gradle support
  Plugin 'tfnico/vim-gradle'
  " wisely add 'end' in ruby, vim script, etc
  Plugin 'tpope/vim-endwise'
  " Ruby on Rails power tools
  Plugin 'tpope/vim-rails'
  " mappings for HTML, XML, PHP, eRuby, JSP, etc
  Plugin 'tpope/vim-ragtag'
  " runtime files for Haml, Sass, and SCSS
  Plugin 'tpope/vim-haml'
  " runtime files for Markdown
  Plugin 'tpope/vim-markdown'
  " tools for developing Node.js
  Plugin 'moll/vim-node'
  " improved Javascript indentation and syntax
  Plugin 'pangloss/vim-javascript'
  " CoffeeScript support
  Plugin 'kchmck/vim-coffee-script'

  " vim-scripts repos
" Plugin 'vim-scripts/TabBar'
  " keep/restore fcitx state when toggling insert mode
  Plugin 'vim-scripts/fcitx.vim'
  " extended % matching for HTML, LaTeX, etc
  Plugin 'vim-scripts/matchit.zip'
  " Markdown preview instantly
  Plugin 'vim-scripts/instant-markdown.vim'

  " non github repos

  " themes repos
  Plugin 'altercation/vim-colors-solarized'
  Plugin 'nanotech/jellybeans.vim'
  Plugin 'jnurmine/Zenburn'
  Plugin 'morhetz/gruvbox'
  Plugin 'chriskempson/base16-vim'
  Plugin 'bling/vim-airline'

  call vundle#end()
" }}}

" General settings {{{

  filetype plugin indent on
  syntax on

  set title
  set mouse=a

  set shortmess=at      " shorten error messages

  set nrformats+=alpha  " in-/decrease letters with C-a/C-x

  set modeline          " enable modelines
  set modelines=5

  set selection=inclusive

  set number            " enable line numbers
  set ruler             " enable something
  set cursorline        " enable hiliting of cursor line

  set backspace=2       " backspace over EOL etc.

  set background=dark   " i prefer dark backgrounds

  set hidden            " buffer switching should be quick
  set confirm           " ask instead of just print errors

  set equalalways       " make splits equal size
  " Always splits to the right and below
  set splitright
  set splitbelow

  set lazyredraw        " don't redraw while executing macros

  set noshowmode        " don't display mode, it's already in the status line

  set laststatus=2      " always show statusline

  set encoding=utf-8    " Necessary to show Unicode glyphs
  set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

  set timeoutlen=500
  set ttimeoutlen=50

  set fillchars=""
" }}}

" General Keybindings & Mappings {{{

  let mapleader=","
  let maplocalleader=","

  set pastetoggle=<F10>

" Allow saving of files as sudo when I forgot to start vim using sudo.
  command W w !sudo tee % > /dev/null
" }}}

" GUI or no GUI, that's the question {{{
  if has('gui_running')
    set guicursor+=a:blinkon0       " Cursor doesn't blink - it's annoying
    set guioptions-=m               " No Menubar
    set guioptions-=T               " No Toolbar
    set guioptions-=l               " No Scrollbar left
    set guioptions-=L               " No Scrollbar left when split
    set guioptions-=r               " No Scrollbar right
    set guioptions-=r               " No Scrollbar right when split

    set guifont=Input\ Mono\ 10

    set lines=40                    " Height
    set columns=85                  " Width

    set background=dark

    colorscheme solarized
  else
    colorscheme solarized
" Make italic comments in gruvbox possible
    set t_ZH=[3m
    set t_ZR=[23m
    "let g:gruvbox_italic=1
    highlight Comment cterm=italic

    set t_Co=256
  endif
" }}}

" Tabstops {{{
  set tabstop=2
  set shiftwidth=2
  set softtabstop=2
  set autoindent
  set smartindent
  set expandtab
" }}}

" Invisibles {{{
  set listchars=tab:‚ñ∏\ ,extends:‚ùØ,precedes:‚ùÆ,trail:‚ê£,eol:¬¨
  set list
  nmap <silent> <F11> :set list!<CR>
" }}}

" Folds {{{
  set foldmethod=marker
  set foldcolumn=1
" }}}

" Pairings {{{
  set showmatch
" }}}

" Margins {{{
  set scrolloff=5
  set sidescroll=5
" }}}

" Search {{{
  set incsearch
  set ignorecase

  " Toggle that stupid highlight search
  nmap <silent> ,n :set invhls<CR>:set hls?<CR>
" }}}

" Backup files {{{
  set nobackup
  set nowb
  set noswapfile
" }}}

" Completion {{{
  set wildmenu
  set wildmode=longest,full,list

  set ofu=syntaxcomplete#Complete
" }}}

" Wrapping {{{
  set linebreak
  set showbreak=‚Ü≥\
" toggle wrapping
  nmap <silent> <F12> :let &wrap = !&wrap<CR>
" }}}

" Tabs Navigatoin {{{

  " Since most terminal emulators do not intercept Ctrl-Tab, they just send the
  " same code as for Tab, use <Leader>(which is ',' by default) intead of <C>
  " If want to change that, please checkout this post below:
  " http://www.staldal.nu/tech/2009/01/10/how-to-use-ctrl-tab-in-gnu-screen/
  nnoremap <Leader><S-Tab> :tabprevious<CR>
  nnoremap <Leader><Tab> :tabnext<CR>
  nnoremap <Leader>nt :tabnew<CR>

  "map <C-W> <Esc>:confirm bdelete<CR>

  inoremap <Leader><Tab> <Esc>:tabnext<CR>
  inoremap <Leader><S-Tab> <Esc>:tabpreviuos<CR>
  inoremap <C-t> <Esc>:tabnew<CR>
" }}}

" Macros {{{
" }}}

" Plugins {{{

" unite {{{
  source ~/myConfigs/vim/vimrc.unite
" }}}

" neocomplete {{{
  source ~/myConfigs/vim/vimrc.neocomplete
" }}}

" {{{ Eclim
  let g:EclimCompletionMethod = 'omnifunc'
" }}}

" Colorizer {{{
  let g:colorizer_nomap = 1
  let g:colorizer_startup = 0
" }}}

" RagTag {{{
  imap <M-O> <Esc>o
  imap <C-J> <Down>
  let g:ragtag_global_maps = 1

  imap <C-Space> <C-X><Space>
  imap <C-CR> <C-X><CR>
" }}}

" NERDTree {{{
  nnoremap <silent> <Leader>1 :NERDTreeToggle<CR>

  let g:NERDTreeChDirMode = 2
  let g:NERDTreeShowBookmarks = 1
  let g:NERDTreeWinPos = "left"
  let g:NERDTreeShowHidden = 0
" }}}

" Fugitive {{{
  let FugitiveIgnoreBufferTitles = ['NERDTree']
  let FugitivePreferFileBuffers = 1
" }}}

" TagBar {{{
  nnoremap <silent> <Leader>2 <Esc>:TagbarToggle<CR>
" }}}

" vim-notes {{{
  let g:notes_directories = ['~/notes']
  let g:notes_suffix = '.note'
  let g:notes_title_sync = 'change_title'
  let g:notes_tab_indents = 0

" }}}

" Airline {{{
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_right_sep = ''

  let g:airline_symbols.paste = 'œÅ'
  let g:airline_symbols.branch = 'ÓÇ†'
  let g:airline_symbols.readonly = 'ÓÇ¢'
  let g:airline_symbols.linenr = 'ÓÇ°'
  let g:airline_symbols.whitespace = 'Œû'

  " turn tabline on
  let g:airline#extensions#tabline#enabled = 1

  " other plugins integretion options
  let g:airline#extensions#syntastic#enabled = 1
  let g:airline#extensions#tagbar#enabled = 1
  let g:airline#extensions#eclim#enabled = 1

  let g:airline#extensions#whitespace#trailing_format = 'TR[%s]'
  let g:airline#extensions#whitespace#mixed_indent_format = 'MI[%s]'
" }}}

" Instant-Markdown {{{
  let g:instant_markdown_slow = 1
  let g:instant_markdown_autostart = 0
  nmap <F8> <Esc>:InstantMarkdownPreview<CR>
" }}}

" vim-better-whitespace {{{
  let g:better_whitespace_enabled=0
" }}}
" }}}
