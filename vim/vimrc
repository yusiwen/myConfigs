"
"   V I M R C
"
"   @author: yusiwen@gmail.com
"   ~/.vimrc is a symbolic link to ~/myConfigs/vim/vimrc

set nocompatible               " be iMproved

" Vundle {{{
  filetype off
  set rtp+=~/.vim/bundle/Vundle.vim/
  call vundle#begin()

  " let Vundle manage Vundle
  Plugin 'gmarik/Vundle.vim'

  " Vundles
  " Libraris bundles

  " Github repos
  " quoting/parenthesizing made simple
  Plugin 'tpope/vim-surround'
  " pairs of handy bracket mappings
  Plugin 'tpope/vim-unimpaired'
  " insert or delete brackets, parens, quotes in pair
  Plugin 'jiangmiao/auto-pairs'

  " displays tags in a window
  Plugin 'majutsushi/tagbar'

  " tree explorer plugin for vim
  Plugin 'scrooloose/nerdtree'
  Plugin 'Xuyuanp/nerdtree-git-plugin'

  " easy note taking in Vim
  Plugin 'xolox/vim-misc'
  Plugin 'xolox/vim-notes'

  " sublime text style multiple selection
  Plugin 'terryma/vim-multiple-cursors'

  " Shuogo's neo packages
  Plugin 'Shougo/vimproc.vim'
  Plugin 'Shougo/unite.vim'
  Plugin 'Shougo/unite-session'
  Plugin 'Shougo/neomru.vim'
  "Plugin 'Shougo/neocomplete.vim'
  "Plugin 'Shougo/neosnippet.vim'
  "Plugin 'Shougo/neosnippet-snippets'
  "Plugin 'honza/vim-snippets'

  Plugin 'ervandew/supertab'

  " extensible & universal comment
  Plugin 'tomtom/tcomment_vim'
  " colorize text in the form #rrggbb or #rgb
  Plugin 'lilydjwg/colorizer'
  " text filtering and alignment
  Plugin 'godlygeek/tabular'
  " accelerated smooth scroll
  Plugin 'yonchu/accelerated-smooth-scroll'
  Plugin 'ntpeters/vim-better-whitespace'

  " Language & Develop specific repos
  " git wrapper
  Plugin 'tpope/vim-fugitive'
  " shows a git diff in the gutter
  Plugin 'airblade/vim-gitgutter'
  " groovy
  Plugin 'vim-scripts/groovy.vim'
  " grade support
  Plugin 'tfnico/vim-gradle'
  " wisely add 'end' in ruby, vim script, etc
  Plugin 'tpope/vim-endwise'
  " Ruby on Rails power tools
  Plugin 'tpope/vim-rails'
  " mappings for HTML, XML, PHP, eRuby, JSP, etc
  Plugin 'tpope/vim-ragtag'
  " runtime files for Haml, Sass, and SCSS
  Plugin 'tpope/vim-haml'
  " runtime files for Markdown
  Plugin 'tpope/vim-markdown'
  " tools for developing Node.js
  Plugin 'moll/vim-node'
  " improved Javascript indentation and syntax
  Plugin 'pangloss/vim-javascript'
  " CoffeeScript support
  Plugin 'kchmck/vim-coffee-script'

  " vim-scripts repos
" Plugin 'vim-scripts/TabBar'
  " keep/restore fcitx state when toggling insert mode
  Plugin 'vim-scripts/fcitx.vim'
  " extended % matching for HTML, LaTeX, etc
  Plugin 'vim-scripts/matchit.zip'
  " Markdown preview instantly
  Plugin 'vim-scripts/instant-markdown.vim'

  " non github repos

  " themes repos
  Plugin 'nanotech/jellybeans.vim'
  Plugin 'jnurmine/Zenburn'
  Plugin 'bling/vim-airline'

  call vundle#end()
" }}}

" General settings {{{

  filetype plugin indent on
  syntax on

  set title
  set mouse=a

  set shortmess=at      " shorten error messages

  set nrformats+=alpha  " in-/decrease letters with C-a/C-x

  set modeline          " enable modelines
  set modelines=5

  set selection=inclusive

  set number            " enable line numbers
  set ruler             " enable something
  set cursorline        " enable hiliting of cursor line

  set backspace=2       " backspace over EOL etc.

  set background=dark   " i prefer dark backgrounds

  set hidden            " buffer switching should be quick
  set confirm           " ask instead of just print errors

  set equalalways       " make splits equal size
  " Always splits to the right and below
  set splitright
  set splitbelow

  set lazyredraw        " don't redraw while executing macros

  set noshowmode        " don't display mode, it's already in the status line

  set laststatus=2      " always show statusline

  set encoding=utf-8    " Necessary to show Unicode glyphs
  set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

  set timeoutlen=1000
  set ttimeoutlen=50
" }}}

" General Keybindings {{{

  let mapleader=","
  let maplocalleader=","

  set pastetoggle=<F10>
" }}}

" GUI or no GUI, that's the question {{{
  if has('gui_running')
    set guicursor+=a:blinkon0       " Cursor doesn't blink - it's annoying
    set guioptions-=m               " No Menubar
    set guioptions-=T               " No Toolbar
    set guioptions-=l               " No Scrollbar left
    set guioptions-=L               " No Scrollbar left when split
    set guioptions-=r               " No Scrollbar right
    set guioptions-=r               " No Scrollbar right when split

    set gfn=Meslo\ LG\ S\ DZ\ for\ Powerline\ 10

    set lines=40                    " Height
    set columns=85                  " Width

    set background=dark

    colorscheme jellybeans

  else
    colorscheme jellybeans
    set t_Co=256
  endif
" }}}

" Tabstops {{{
  set tabstop=2
  set shiftwidth=2
  set softtabstop=2
  set autoindent
  set smartindent
  set expandtab
" }}}

" Invisibles {{{
  set listchars=tab:▸\ ,extends:❯,precedes:❮,trail:␣,eol:¬
  set list
  nmap <silent> <F11> :set list!<CR>
" }}}

" Folds {{{
  set foldmethod=marker
  set foldcolumn=1
" }}}

" Pairings {{{
  set showmatch
" }}}

" Margins {{{
  set scrolloff=5
  set sidescroll=5
" }}}

" Search {{{
  set incsearch
  set ignorecase

  " Toggle that stupid highlight search
  nmap <silent> ,n :set invhls<CR>:set hls?<CR>
" }}}

" Backup files {{{
  set nobackup
  set nowb
  set noswapfile
" }}}

" Completion {{{
  set wildmenu
  set wildmode=longest,full,list

  set ofu=syntaxcomplete#Complete
" }}}

" Wrapping {{{
  set linebreak
  set showbreak=↳\
" toggle wrapping
  nmap <silent> <F12> :let &wrap = !&wrap<CR>
" }}}

" Tabs Navigatoin {{{

  " Since most terminal emulators do not intercept Ctrl-Tab, they just send the
  " same code as for Tab, use <Leader>(which is ',' by default) intead of <C>
  " If want to change that, please checkout this post below:
  " http://www.staldal.nu/tech/2009/01/10/how-to-use-ctrl-tab-in-gnu-screen/
  nnoremap <Leader><S-Tab> :tabprevious<CR>
  nnoremap <Leader><Tab> :tabnext<CR>
  nnoremap <Leader>nt :tabnew<CR>

  "map <C-W> <Esc>:confirm bdelete<CR>

  inoremap <Leader><Tab> <Esc>:tabnext<CR>
  inoremap <Leader><S-Tab> <Esc>:tabpreviuos<CR>
  inoremap <C-t> <Esc>:tabnew<CR>
" }}}

" Macros {{{
" }}}

" Plugins {{{
" unite {{{
  " Use the fuzzy matcher for everything
  call unite#filters#matcher_default#use(['matcher_fuzzy'])
  " Use the rank sorter for everything
  " call unite#filters#sorter_default#use(['sorter_rank'])

  " Set up some custom ignores
  call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
        \ 'ignore_pattern', join([
        \ '\.git/',
        \ 'git5/.*/review/',
        \ 'google/obj/',
        \ 'tmp/',
        \ '.sass-cache',
        \ 'node_modules/',
        \ 'bower_components/',
        \ 'dist/',
        \ '.git5_specs/',
        \ '.pyc',
        \ ], '\|'))

  " Map space to the prefix for Unite
  nnoremap [unite] <Nop>
  nmap <space> [unite]

  " General fuzzy search
  "nnoremap <silent> [unite]<space> :<C-u>Unite
  "      \ -no-split -buffer-name=files buffer file_mru bookmark file_rec/async<CR>

  " Quick registers
  nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>

  nnoremap <silent> [unite]u :<C-u>Unite -no-split -buffer-name=buffers buffer<CR>
  " Quick buffer and mru

  " Quick yank history
  nnoremap <silent> [unite]y :<C-u>Unite -no-split -auto-preview -buffer-name=yanks history/yank<CR>

  " Quick outline
  nnoremap <silent> [unite]o :<C-u>Unite -no-split -auto-preview -buffer-name=outline -vertical outline<CR>

  " Quick sessions (projects)
  nnoremap <silent> [unite]p :<C-u>Unite -buffer-name=sessions session<CR>

  " Quick sources
  nnoremap <silent> [unite]a :<C-u>Unite -buffer-name=sources source<CR>

  " Quick snippet
  nnoremap <silent> [unite]s :<C-u>Unite -buffer-name=snippets ultisnips<CR>

  " Quickly switch lcd
  nnoremap <silent> [unite]d
        \ :<C-u>Unite -buffer-name=change-cwd -default-action=cd directory_mru directory_rec/async<CR>

  " Quick file search
  nnoremap <silent> [unite]f :<C-u>Unite -no-split -buffer-name=files file_rec/async file/new<CR>

  " Quick grep from cwd
  nnoremap <silent> [unite]g :<C-u>Unite -no-split -buffer-name=grep grep:.<CR>

  " Quick help
  nnoremap <silent> [unite]h :<C-u>Unite -buffer-name=help help<CR>

  " Quick line using the word under cursor
  " nnoremap <silent> [unite]l :<C-u>UniteWithCursorWord -buffer-name=search_file line<CR>

  " Quick line
  nnoremap <silent> [unite]l :<C-u>Unite -buffer-name=search_file line<CR>

  " Quick MRU search
  nnoremap <silent> [unite]m :<C-u>Unite -buffer-name=mru file_mru<CR>

  " Quick find
  nnoremap <silent> [unite]n :<C-u>Unite -buffer-name=find find:.<CR>

  " Quick commands
  nnoremap <silent> [unite]c :<C-u>Unite -buffer-name=commands command<CR>

  " Quick bookmarks
  nnoremap <silent> [unite]b :<C-u>Unite -buffer-name=bookmarks bookmark<CR>

  " Fuzzy search from current buffer
  " nnoremap <silent> [unite]b :<C-u>UniteWithBufferDir
  " \ -buffer-name=files -prompt=%\  buffer file_mru bookmark file<CR>

  " Quick commands
  nnoremap <silent> [unite]; :<C-u>Unite -buffer-name=history -default-action=edit history/command command<CR>

  augroup MyAutoCmd
  augroup END

  " Custom Unite settings
  autocmd MyAutoCmd FileType unite call s:unite_settings()
  function! s:unite_settings()
    " nmap <buffer> <ESC> <Plug>(unite_exit)
    nmap <buffer> <ESC> <Plug>(unite_insert_enter)
    imap <buffer> <ESC> <Plug>(unite_exit)
    " imap <buffer> <c-j> <Plug>(unite_select_next_line)
    imap <buffer> <c-j> <Plug>(unite_insert_leave)
    nmap <buffer> <c-j> <Plug>(unite_loop_cursor_down)
    nmap <buffer> <c-k> <Plug>(unite_loop_cursor_up)
    nmap <buffer> <tab> <Plug>(unite_loop_cursor_down)
    nmap <buffer> <s-tab> <Plug>(unite_loop_cursor_up)
    imap <buffer> <c-a> <Plug>(unite_choose_action)
    imap <buffer> <Tab> <Plug>(unite_insert_leave)
    imap <buffer> jj <Plug>(unite_insert_leave)
    imap <buffer> <C-w> <Plug>(unite_delete_backward_word)
    imap <buffer> <C-u> <Plug>(unite_delete_backward_path)
    imap <buffer> '     <Plug>(unite_quick_match_default_action)
    nmap <buffer> '     <Plug>(unite_quick_match_default_action)
    nmap <buffer> <C-r> <Plug>(unite_redraw)
    imap <buffer> <C-r> <Plug>(unite_redraw)
    inoremap <silent><buffer><expr> <C-s> unite#do_action('split')
    nnoremap <silent><buffer><expr> <C-s> unite#do_action('split')
    inoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
    nnoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')

    let unite = unite#get_current_unite()
    if unite.buffer_name =~# '^search'
      nnoremap <silent><buffer><expr> r     unite#do_action('replace')
    else
      nnoremap <silent><buffer><expr> r     unite#do_action('rename')
    endif

    nnoremap <silent><buffer><expr> cd     unite#do_action('lcd')

    " Using Ctrl-\ to trigger outline, so close it using the same keystroke
    if unite.buffer_name =~# '^outline'
      imap <buffer> <C-\> <Plug>(unite_exit)
    endif

    " Using Ctrl-/ to trigger line, close it using same keystroke
    if unite.buffer_name =~# '^search_file'
      imap <buffer> <C-_> <Plug>(unite_exit)
    endif
  endfunction

  " Start in insert mode
  let g:unite_enable_start_insert = 1

  let g:unite_data_directory = "~/.unite"

  " Enable short source name in window
  " let g:unite_enable_short_source_names = 1

  " Enable history yank source
  " let g:unite_source_history_yank_enable = 1

  " Open in bottom right
  let g:unite_split_rule = "botright"

  " Shorten the default update date of 500ms
  let g:unite_update_time = 200

  let g:unite_source_file_mru_limit = 1000
  let g:unite_cursor_line_highlight = 'TabLineSel'
  " let g:unite_abbr_highlight = 'TabLine'

  let g:unite_source_file_mru_filename_format = ':~:.'
  let g:unite_source_file_mru_time_format = ''

" }}}

" unite sessions {{{
"  " Save session automatically.
"  let g:unite_source_session_enable_auto_save = 1
"
"  " Pop up session selection if no file is specified
"  " TODO: Why does this not work when Vim isn't run from tmux???!
"  autocmd MyAutoCmd VimEnter * call s:unite_session_on_enter()
"  function! s:unite_session_on_enter()
"    if !argc() && !exists("g:start_session_from_cmdline")
"      Unite -buffer-name=sessions session
"    endif
"  endfunction
" }}}

" {{{ Eclim
  let g:SuperTabDefaultCompletionType = 'context'
" }}}

" Colorizer {{{
  let g:colorizer_nomap = 1
  let g:colorizer_startup = 0
" }}}

" RagTag {{{
  imap <M-O> <Esc>o
  imap <C-J> <Down>
  let g:ragtag_global_maps = 1

  imap <C-Space> <C-X><Space>
  imap <C-CR> <C-X><CR>
" }}}

" NERDTree {{{
  nnoremap <silent> <Leader>1 :NERDTreeToggle<CR>

  let g:NERDTreeChDirMode = 2
  let g:NERDTreeShowBookmarks = 1
  let g:NERDTreeWinPos = "left"
  let g:NERDTreeShowHidden = 1
" }}}

" TagBar {{{
  nnoremap <silent> <Leader>2 <Esc>:TagbarToggle<CR>
" }}}

" vim-notes {{{
  let g:notes_directories = ['~/notes']

" }}}

" Airline {{{
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_right_sep = ''

  let g:airline_symbols.paste = 'ρ'
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
  let g:airline_symbols.whitespace = 'Ξ'

  " turn tabline on
  let g:airline#extensions#tabline#enabled = 1

  " other plugins integretion options
  let g:airline#extensions#syntastic#enabled = 1
  let g:airline#extensions#tagbar#enabled = 1
  let g:airline#extensions#eclim#enabled = 1

  let g:airline#extensions#whitespace#trailing_format = 'TR[%s]'
  let g:airline#extensions#whitespace#mixed_indent_format = 'MI[%s]'
" }}}

" Instant-Markdown {{{
  let g:instant_markdown_slow = 1
  let g:instant_markdown_autostart = 0
  nmap <F8> <Esc>:InstantMarkdownPreview<CR>
" }}}
" }}}
