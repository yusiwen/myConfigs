"
" ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
" ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
" ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë
" ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
"  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
"   ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"
"  @author: yusiwen@gmail.com
"  ~/.vim/vimrc is a symbolic link to ~/myConfigs/vim/vimrc

set nocompatible               " Be iMproved

" Local variables {{{
let s:is_windows = has('win16') || has('win32') || has('win64')
let s:is_cygwin = has('win32unix')
let s:is_mac = !s:is_windows && !s:is_cygwin
      \ && (has('mac') || has('macunix') || has('gui_macvim') ||
      \   (!executable('xdg-open') &&
      \     system('uname') =~? '^darwin'))
let s:is_linux = !s:is_windows && !s:is_cygwin && !s:is_mac
      \ && (has('unix') && system('uname') =~? '^linux')
" }}}

" NeoBundle {{{
filetype off
let s:vimfiles = ""
if s:is_windows
  let s:vimfiles = "$HOME/vimfiles/"
else
  let s:vimfiles = "$HOME/.vim/"
endif

let &runtimepath .= ',' . expand(s:vimfiles . "bundle/neobundle.vim/")

let g:neobundle#types#git#default_protocol='ssh'
call neobundle#begin(expand(s:vimfiles . 'bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'
" quoting/parenthesizing made simple
NeoBundle 'tpope/vim-surround'
" pairs of handy bracket mappings
NeoBundle 'tpope/vim-unimpaired'
" insert or delete brackets, parens, quotes in pair
NeoBundle 'jiangmiao/auto-pairs'

" displays tags in a window
"NeoBundle 'majutsushi/tagbar'
" Ctags generator for Vim
NeoBundle 'szw/vim-tags'
" Automatically discover and update ctags files on save
NeoBundle 'craigemery/vim-autotag'
NeoBundle 'vim-airline/vim-airline'
NeoBundle 'yusiwen/vim-airline-themes'

" easy note taking in Vim
" NeoBundle 'xolox/vim-misc'
" NeoBundle 'xolox/vim-notes'

" sublime text style multiple selection
NeoBundle 'terryma/vim-multiple-cursors'
" visually select increasingly larger regions
NeoBundle 'terryma/vim-expand-region'

" Shuogo's neo packages
NeoBundle 'Shougo/vimproc.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-session'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'Shougo/neoyank.vim'
NeoBundle 'Shougo/unite-help'
NeoBundle 'tsukkee/unite-tag'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/vimfiler.vim'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
"NeoBundle 'honza/vim-snippets'

" extensible & universal comment
NeoBundle 'tomtom/tcomment_vim'
" colorize text in the form #rrggbb or #rgb
NeoBundle 'lilydjwg/colorizer'
" text filtering and alignment
NeoBundle 'godlygeek/tabular'
" accelerated smooth scroll
NeoBundle 'yonchu/accelerated-smooth-scroll'
" better whitespace highlighting
NeoBundle 'ntpeters/vim-better-whitespace'
" Vim motions on speed!
NeoBundle 'easymotion/vim-easymotion'
" enable repeating supported NeoBundle maps with "."
NeoBundle 'tpope/vim-repeat'

" Language & Develop specific repos
" git wrapper
NeoBundle 'tpope/vim-fugitive'
" gitk for Vim
NeoBundle 'gregsexton/gitv'
" shows a git diff in the gutter
NeoBundle 'airblade/vim-gitgutter'
" groovy
NeoBundle 'vim-scripts/groovy.vim'
" gradle support
NeoBundle 'tfnico/vim-gradle'
" wisely add 'end' in ruby, vim script, etc
NeoBundle 'tpope/vim-endwise'
" Ruby on Rails power tools
NeoBundle 'tpope/vim-rails'
" mappings for HTML, XML, PHP, eRuby, JSP, etc
NeoBundle 'tpope/vim-ragtag'
" runtime files for Haml, Sass, and SCSS
NeoBundle 'tpope/vim-haml'
" tools for developing Node.js
NeoBundle 'moll/vim-node'
" improved Javascript indentation and syntax
NeoBundle 'pangloss/vim-javascript'
" CoffeeScript support
NeoBundle 'kchmck/vim-coffee-script'
" view man pages in vim
NeoBundle 'bruno-/vim-man'

" 'fcitx.vim' is only needed under Linux
if s:is_linux
  " keep/restore fcitx state when toggling insert mode
  NeoBundle 'vim-scripts/fcitx.vim'
endif
" extended % matching for HTML, LaTeX, etc
NeoBundle 'vim-scripts/matchit.zip'
" easy code formatting in Vim by integrating existing code formatters
NeoBundle 'Chiel92/vim-autoformat'

" themes repos
"NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'yusiwen/jellybeans.vim'
"NeoBundle 'jnurmine/Zenburn'
NeoBundle 'morhetz/gruvbox'
NeoBundle 'yusiwen/base16-vim'

call neobundle#end()

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
" }}}

" General settings {{{
filetype plugin indent on
syntax on

set title
set mouse=a

set shortmess=at      " shorten error messages

set nrformats+=alpha  " in-/decrease letters with C-a/C-x

set modeline          " enable modelines
set modelines=5

set selection=inclusive

set number            " enable line numbers
set ruler             " enable something
set cursorline        " enable hiliting of cursor line

set backspace=2       " backspace over EOL etc.

set background=dark   " i prefer dark backgrounds

set hidden            " buffer switching should be quick
set confirm           " ask instead of just print errors

set equalalways       " make splits equal size
" Always splits to the right and below
set splitright
set splitbelow

set lazyredraw        " don't redraw while executing macros

set noshowmode        " don't display mode, it's already in the status line

set laststatus=2      " always show statusline

set encoding=utf-8    " Necessary to show Unicode glyphs
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

set timeoutlen=1000
set ttimeoutlen=0

set fillchars=""

" Mac OSX specific settings {{{
if s:is_mac
  " set italic codes under Mac
  set t_ZH=[3m t_ZR=[23m
  " using OSX system clipboard
  set clipboard=unnamed
endif
" }}}
" }}}

" General Keybindings & Mappings {{{
let mapleader=","
let maplocalleader=","

set pastetoggle=<F10>

" Allow saving of files as sudo when I forgot to start vim using sudo.
"command W w !sudo tee % > /dev/null
" }}}

" GUI or no GUI, that's the question {{{
if has('gui_running')
  set guicursor+=a:blinkon0       " Cursor doesn't blink - it's annoying
  set guioptions-=m               " No Menubar
  set guioptions-=T               " No Toolbar
  set guioptions-=l               " No Scrollbar left
  set guioptions-=L               " No Scrollbar left when split
  set guioptions-=r               " No Scrollbar right
  set guioptions-=r               " No Scrollbar right when split

  set guifont=Input\ Mono\ Compressed\ Regular\ 10

  set lines=50                    " Height
  set columns=130                 " Width

  execute 'source ' . expand(s:vimfiles . 'vimrc.theme')
else
  execute 'source ' . expand(s:vimfiles . 'vimrc.theme')
  set t_Co=256
endif
" }}}

" Tabstops {{{
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
set smartindent
set expandtab
" }}}

" Invisibles {{{
" tab: U+25BA, extends: U+00BB, precedes:U+00AB, trail:U+2017, eol:U+00AC
set listchars=tab:‚ñ∫\ ,extends:¬ª,precedes:¬´,trail:_,eol:¬¨
set list
nmap <silent> <F11> :set list!<CR>
" }}}

" Folds {{{
set foldmethod=marker
set foldcolumn=1
" }}}

" Pairings {{{
set showmatch
" }}}

" Margins {{{
set scrolloff=5
set sidescroll=5
" }}}

" Search {{{
set incsearch
set ignorecase

" Toggle that stupid highlight search
nmap <silent> ,n :set invhls<CR>:set hls?<CR>
" }}}

" Backup and Recovery {{{
set nobackup
set writebackup
" set swap file directory to ~/.vim/swap, need to mkdir it first
let &directory=expand(s:vimfiles . 'swap,.')
set swapfile
" }}}

" Completion {{{
set wildmenu
set wildmode=longest,full,list

set ofu=syntaxcomplete#Complete
" }}}

" Wrapping {{{
set linebreak
set showbreak=‚àü\
" toggle wrapping
nmap <silent> <F12> :let &wrap = !&wrap<CR>
" }}}

" Tabs Navigatoin {{{
" Since most terminal emulators do not intercept Ctrl-Tab, they just send the
" same code as for Tab, use <Leader>(which is ',' by default) intead of <C>
" If want to change that, please checkout this post below:
" http://www.staldal.nu/tech/2009/01/10/how-to-use-ctrl-tab-in-gnu-screen/
nnoremap <Leader><S-Tab> :tabprevious<CR>
nnoremap <Leader><Tab> :tabnext<CR>
nnoremap <Leader>nt :tabnew<CR>

"map <C-W> <Esc>:confirm bdelete<CR>

inoremap <Leader><Tab> <Esc>:tabnext<CR>
inoremap <Leader><S-Tab> <Esc>:tabpreviuos<CR>
inoremap <C-t> <Esc>:tabnew<CR>
" }}}

" Tags {{{
set tags=./tags;
nmap <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
nmap <C-]>v :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
nmap <C-]>h :sp <CR>:exec("tag ".expand("<cword>"))<CR>
" }}}

" Macros {{{
" }}}

" Specific File Types Settings {{{
" turn off expandtab for editing makefiles
autocmd FileType make setlocal noexpandtab
" for git commit messages
autocmd Filetype gitcommit setlocal spell textwidth=72
" }}}

" Plugins {{{
" Airline {{{
execute 'source ' . expand(s:vimfiles . 'vimrc.airline')
" }}}

" unite {{{
execute 'source ' . expand(s:vimfiles . 'vimrc.unite')
" }}}

" neocomplete {{{
execute 'source ' . expand(s:vimfiles . 'vimrc.neocomplete')
" }}}

" neosnippet {{{
let g:neosnippet#snippets_directory=expand(s:vimfiles . 'snippets')

" Plugin key-mappings.
imap <expr><C-k> (pumvisible()? "\<C-y>" : '') . "\<Plug>(neosnippet_expand_or_jump)"
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB>
      \ pumvisible() ? "\<C-n>" :
      \ neosnippet#expandable_or_jumpable() ?
      \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "
      \<Plug>(neosnippet_expand_or_jump)"
      \: "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
" }}}

" vimfiler {{{
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_enable_clipboard = 0
" [unite] is difined in 'unite.vim' setting above, which is included in
" separated file 'vimrc.unite'
nnoremap <silent> [unite]q :<C-u>VimFilerExplorer -buffer-name=explorer -split -simple -winwidth=40 -toggle -no-quit<CR>
nnoremap <silent> [unite]w :<C-u>VimFiler -buffer-name=files -no-split<CR>
" }}}

" vim-multiple_cursors {{{
" make NeoComplete compatible with vim-multiple-cursors
function! Multiple_cursors_before()
  exe 'NeoCompleteLock'
endfunction

function! Multiple_cursors_after()
  exe 'NeoCompleteUnlock'
endfunction
" }}}

" {{{ Eclim
let g:EclimCompletionMethod = 'omnifunc'
" }}}

" Colorizer {{{
let g:colorizer_nomap = 1
let g:colorizer_startup = 0
" }}}

" RagTag {{{
imap <M-O> <Esc>o
imap <C-J> <Down>
let g:ragtag_global_maps = 1

imap <C-Space> <C-X><Space>
imap <C-CR> <C-X><CR>
" }}}

" NERDTree {{{
let bundle = neobundle#tap('nerdtree')
if bundle
  nnoremap <silent> <Leader>1 :NERDTreeToggle<CR>
  function! neobundle#hooks.on_source(bundle)
    let g:NERDTreeChDirMode = 2
    let g:NERDTreeShowBookmarks = 1
    let g:NERDTreeWinPos = "left"
    let g:NERDTreeShowHidden = 0
  endfunction

  call neobundle#untap()
endif
" }}}

" Fugitive {{{
let FugitiveIgnoreBufferTitles = ['NERDTree']
let FugitivePreferFileBuffers = 1
" }}}

" GitGutter {{{
execute 'source ' . expand(s:vimfiles . 'vimrc.gitgutter')
" }}}

" TagBar {{{
let bundle = neobundle#tap('tagbar')
if bundle
  nnoremap <silent> <Leader>2 <Esc>:TagbarToggle<CR>
  function! neobundle#hooks.on_source(bundle)
    " on mac, default '/bin/ctags' provided by Apple is not exuberant ctags,
    " homebrew's ctags is installed under '/usr/local/bin'
    if s:is_mac
      let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
    endif
  endfunction

  call neobundle#untap()
endif
" }}}

" vim-tags {{{
" do not let vim-tags auto generate tags on save
" use vim-autotag plugin to do this instead
let g:vim_tags_auto_generate = 1
" }}}

" vim-notes {{{
" let g:notes_directories = ['~/notes']
" let g:notes_suffix = '.note'
" let g:notes_title_sync = 'change_title'
" let g:notes_tab_indents = 0
" }}}

" vim-better-whitespace {{{
let g:better_whitespace_enabled=0
" }}}

" vim-easymotion {{{
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
" nmap s <Plug>(easymotion-s)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap <Leader>s <Plug>(easymotion-s2)
nmap <Leader>t <Plug>(easymotion-t2)

map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)

let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
hi link EasyMotionMoveHL Search
" }}}

" vim-autoformat {{{
noremap <F3> :Autoformat<CR>
" Custom formatters {{{
" -p = --pad-oper
" -c = --convert-tabs
" -H = --pad-header
" -s# = --indent=spaces=#
" -t = --indent=tab
" -k1 = --align-pointer=type
" -W1 = --align-reference=type
" -xd = --pad-first-paren-out
let g:formatdef_my_astyle_c = '"astyle --mode=c --style=google -xdk1W1pcH".(&expandtab ? "s".shiftwidth() : "t")'
let g:formatters_c = ['my_astyle_c']

let g:formatdef_my_astyle_cpp = '"astyle --mode=c --style=google -xdk1W1pcH".(&expandtab ? "s".shiftwidth() : "t")'
let g:formatters_cpp = ['my_astyle_cpp']
"}}}
" }}}
" }}}
