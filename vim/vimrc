"
"   V I M R C
"
"   @author: yusiwen@gmail.com
"   ~/.vimrc is a symbolic link to ~/myConfigs/vim/vimrc

set nocompatible               " be iMproved

" Vundle {{{
  filetype off
  set rtp+=~/.vim/bundle/Vundle.vim/
  call vundle#begin()

  " let Vundle manage Vundle
  Plugin 'gmarik/Vundle.vim'

  " Vundles
  " Libraris bundles

  " Github repos
  " git wrapper
  Plugin 'tpope/vim-fugitive'
  " quoting/parenthesizing made simple
  Plugin 'tpope/vim-surround'
  " pairs of handy bracket mappings
  Plugin 'tpope/vim-unimpaired'
  " insert or delete brackets, parens, quotes in pair
  Plugin 'jiangmiao/auto-pairs'
  " tree explorer plugin for vim
  Plugin 'scrooloose/nerdtree'
  " changes working dir to project's root
  Plugin 'airblade/vim-rooter'

  Plugin 'Shougo/neocomplete.vim'
  Plugin 'Shougo/neosnippet.vim'
  Plugin 'Shougo/neosnippet-snippets'
  Plugin 'honza/vim-snippets'

  " extensible & universal comment
  Plugin 'tomtom/tcomment_vim'
  " displays tags in a window
  Plugin 'majutsushi/tagbar'
  " colorize text in the form #rrggbb or #rgb
  Plugin 'lilydjwg/colorizer'
" Plugin 'fholgado/minibufexpl.vim'
  " full path fuzzy finder
  Plugin 'kien/ctrlp.vim'
  " text filtering and alignment
  Plugin 'godlygeek/tabular'

  " Language specific repos
  " groovy
  Plugin 'vim-scripts/groovy.vim'
  " grade support
  Plugin 'tfnico/vim-gradle'
  " wisely add 'end' in ruby, vim script, etc
  Plugin 'tpope/vim-endwise'
  " Ruby on Rails power tools
  Plugin 'tpope/vim-rails'
  " mappings for HTML, XML, PHP, eRuby, JSP, etc
  Plugin 'tpope/vim-ragtag'
  " runtime files for Haml, Sass, and SCSS
  Plugin 'tpope/vim-haml'
  " runtime files for Markdown
  Plugin 'tpope/vim-markdown'
  " tools for developing Node.js
  Plugin 'moll/vim-node'
  " improved Javascript indentation and syntax
  Plugin 'pangloss/vim-javascript'
  " CoffeeScript support
  Plugin 'kchmck/vim-coffee-script'

  " vim-scripts repos
" Plugin 'vim-scripts/TabBar'
  " keep/restore fcitx state when toggling insert mode
  Plugin 'vim-scripts/fcitx.vim'
  " extended % matching for HTML, LaTeX, etc
  Plugin 'vim-scripts/matchit.zip'
  " Markdown preview instantly
  Plugin 'vim-scripts/instant-markdown.vim'

  " non github repos

  " themes repos
  Plugin 'nanotech/jellybeans.vim'
  Plugin 'bling/vim-airline'

  call vundle#end()
" }}}

" General settings {{{

  filetype plugin indent on
  syntax on

  set title
  set mouse=a

  set shortmess=at      " shorten error messages

  set nrformats+=alpha  " in-/decrease letters with C-a/C-x

  set modeline          " enable modelines
  set modelines=5

  set number            " enable line numbers
  set ruler             " enable something
  set cursorline        " enable hiliting of cursor line

  set backspace=2       " backspace over EOL etc.

  set background=dark   " i prefer dark backgrounds

  set hidden            " buffer switching should be quick
  set confirm           " ask instead of just print errors
  set equalalways       " make splits equal size

  set lazyredraw        " don't redraw while executing macros

  set noshowmode        " don't display mode, it's already in the status line

  set laststatus=2      " always show statusline

  set encoding=utf-8    " Necessary to show Unicode glyphs
  set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

  set timeoutlen=1000
  set ttimeoutlen=50
" }}}

" General Keybindings {{{

  let mapleader=","
  let maplocalleader=","

  set pastetoggle=<F10>
" }}}

" GUI or no GUI, that's the question {{{
  if has('gui_running')
    set guicursor+=a:blinkon0       " Cursor doesn't blink - it's annoying
    set guioptions-=m               " No Menubar
    set guioptions-=T               " No Toolbar
    set guioptions-=l               " No Scrollbar left
    set guioptions-=L               " No Scrollbar left when split
    set guioptions-=r               " No Scrollbar right
    set guioptions-=r               " No Scrollbar right when split

    set gfn=Meslo\ LG\ S\ DZ\ for\ Powerline\ 10

    set lines=40                    " Height
    set columns=85                  " Width

    set background=dark

    colorscheme jellybeans

  else
    colorscheme jellybeans
  endif
" }}}

" Tabstops {{{
  set tabstop=2
  set shiftwidth=2
  set softtabstop=2
  set autoindent
  set smartindent
  set expandtab
" }}}

" Invisibles {{{
  set listchars=tab:▸\ ,eol:¬
  set list
  nmap <silent> <F11> :set list!<CR>
" }}}

" Folds {{{
  set foldmethod=marker
  set foldcolumn=1
" }}}

" Pairings {{{
  set showmatch
" }}}

" Margins {{{
  set scrolloff=5
  set sidescroll=5
" }}}

" Search {{{
  set incsearch
  set ignorecase

  " Toggle that stupid highlight search
  nmap <silent> ,n :set invhls<CR>:set hls?<CR>
" }}}

" Backup files {{{
  set nobackup
  set nowb
  set noswapfile
" }}}

" Completion {{{
  set wildmenu
  set wildmode=longest,full,list

  set ofu=syntaxcomplete#Complete
" }}}

" Wrapping {{{
  set linebreak
  set showbreak=↳\
" toggle wrapping
  nmap <silent> <F12> :let &wrap = !&wrap<CR>
" }}}

" Tabs Navigatoin {{{

" Since most terminal emulators do not intercept Ctrl-Tab, they just send the
" same code as for Tab, use <Leader>(which is ',' by default) intead of <C>
" If want to change that, please checkout this post below:
" http://www.staldal.nu/tech/2009/01/10/how-to-use-ctrl-tab-in-gnu-screen/
  nnoremap <Leader><S-Tab> :tabprevious<CR>
  nnoremap <Leader><Tab> :tabnext<CR>
  nnoremap <C-t> :tabnew<CR>

  "map <C-W> <Esc>:confirm bdelete<CR>

  inoremap <Leader><Tab> <Esc>:tabnext<CR>
  inoremap <Leader><S-Tab> <Esc>:tabpreviuos<CR>
  inoremap <C-t> <Esc>:tabnew<CR>
" }}}

" Macros {{{
" }}}

" Plugins {{{
" neocomplete {{{
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  " Set minimum syntax keyword length.
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

  " Define dictionary.
  let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
          \ }

  " Define keyword.
  if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    " return neocomplete#close_popup() . "\<CR>"
    " For no inserting <CR> key.
    return pumvisible() ? neocomplete#close_popup() : "\<CR>"
  endfunction
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><C-y> neocomplete#close_popup()
  inoremap <expr><C-e> neocomplete#cancel_popup()
  " Close popup by <Space>.
  "inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

  " For cursor moving in insert mode(Not recommended)
  "inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
  "inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
  "inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
  "inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
  " Or set this.
  "let g:neocomplete#enable_cursor_hold_i = 1
  " Or set this.
  "let g:neocomplete#enable_insert_char_pre = 1

  " AutoComplPop like behavior.
  let g:neocomplete#enable_auto_select = 1

  " Shell like behavior(not recommended).
  "set completeopt+=longest
  "let g:neocomplete#enable_auto_select = 1
  "let g:neocomplete#disable_auto_complete = 1
  "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
  "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

  " For perlomni.vim setting.
  " https://github.com/c9s/perlomni.vim
  let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

  " Prevent neocomplete to close DiffGitCached window from vim-fugitive
  let g:neocomplete#enable_auto_close_preview = 0
" }}}

" neosnippet {{{
  " Plugin key-mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: "\<TAB>"

  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif

  " Tell Neosnippet about the other snippets
  let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
" }}}

" Colorizer {{{
  let g:colorizer_nomap = 1
  let g:colorizer_startup = 0
" }}}

" RagTag {{{
  imap <M-O> <Esc>o
  imap <C-J> <Down>
  let g:ragtag_global_maps = 1

  imap <C-Space> <C-X><Space>
  imap <C-CR> <C-X><CR>
" }}}

" TagBar {{{
  nnoremap <silent> <Leader>t <Esc>:TagbarToggle<CR>
" }}}

" NERDTree {{{
  nnoremap <silent> <Leader>n :NERDTreeToggle<CR>

  let g:NERDTreeChDirMode = 2
  let g:NERDTreeShowBookmarks = 1
  let g:NERDTreeWinPos = "left"
  let g:NERDTreeShowHidden = 1
" }}}

" ctrlp {{{
  let g:ctrlp_map = '<leader>c'
  " Ignore these directories
  set wildignore+=*/build/**,*/tmp/*,*.so,*.swp,*.zip
  let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
  " disable caching
  let g:ctrlp_use_caching=0
" }}}

" Airline {{{
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_right_sep = ''

  let g:airline_symbols.paste = 'ρ'
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
  let g:airline_symbols.whitespace = 'Ξ'

  let g:airline#extensions#tabline#enabled = 1

  let g:airline#extensions#whitespace#trailing_format = 'TR[%s]'
  let g:airline#extensions#whitespace#mixed_indent_format = 'MI[%s]'
" }}}

" Instant-Markdown {{{
  let g:instant_markdown_slow = 1
  let g:instant_markdown_autostart = 0
  nmap <F8> <Esc>:InstantMarkdownPreview<CR>
" }}}
" }}}
