"
"   V I M R C
"
"   @updated:   Mi 29 Jun 2012
"   @revision:  3
"   ~/.vimrc is a symbolic link to ~/myConfigs/vim/vimrc

set nocompatible               " be iMproved

" Vundle {{{
  filetype off
  set rtp+=~/.vim/bundle/vundle/
  call vundle#rc()

  " let Vundle manage Vundle
  Plugin 'gmarik/vundle'

  " Vundles
  " Libraris bundles
    " utility functions
  Plugin 'tomtom/tlib_vim'
    " interpret file by function and cache file
  Plugin 'MarcWeber/vim-addon-mw-utils'

  " Github repos
    " git wrapper
  Plugin 'tpope/vim-fugitive'
    " quoting/parenthesizing made simple
  Plugin 'tpope/vim-surround'
    " pairs of handy bracket mappings
  Plugin 'tpope/vim-unimpaired'
    " auto-close chars
  Plugin 'Townk/vim-autoclose'
    " tree explorer plugin for vim
  Plugin 'scrooloose/nerdtree'
    " TextMate-style snippets for Vim
  Plugin 'garbas/vim-snipmate'
    " snippets repos
  Plugin 'honza/vim-snippets'
    " vim insert mode completions with Tab
  Plugin 'ervandew/supertab'
    " extensible & universal comment
  Plugin 'tomtom/tcomment_vim'
    " quick buffer selector/switcher
  Plugin 'tomtom/tselectbuffer_vim'
    " displays tags in a window
  Plugin 'majutsushi/tagbar'
    " colorize text in the form #rrggbb or #rgb
  Plugin 'lilydjwg/colorizer'
" Plugin 'fholgado/minibufexpl.vim'
    " full path fuzzy finder
  Plugin 'kien/ctrlp.vim'
    " text filtering and alignment
  Plugin 'godlygeek/tabular'

  " Language specific repos
  " wisely add 'end' in ruby, vim script, etc
  Plugin 'tpope/vim-endwise'
  " Ruby on Rails power tools
  Plugin 'tpope/vim-rails'
  " mappings for HTML, XML, PHP, eRuby, JSP, etc
  Plugin 'tpope/vim-ragtag'
  " runtime files for Haml, Sass, and SCSS
  Plugin 'tpope/vim-haml'
  " runtime files for Markdown
  Plugin 'tpope/vim-markdown'
  " tools for developing Node.js
  Plugin 'moll/vim-node'
  " improved Javascript indentation and syntax
  Plugin 'pangloss/vim-javascript'
  " CoffeeScript support
  Plugin 'kchmck/vim-coffee-script'

  " vim-scripts repos
" Plugin 'vim-scripts/TabBar'
    " keep/restore fcitx state when toggling insert mode
  Plugin 'vim-scripts/fcitx.vim'
    " extended % matching for HTML, LaTeX, etc
  Plugin 'vim-scripts/matchit.zip'
    " Markdown preview instantly
  Plugin 'vim-scripts/instant-markdown.vim'

  " non github repos

  " themes repos
  Plugin 'altercation/vim-colors-solarized'
  Plugin 'chriskempson/base16-vim'
  Plugin 'nanotech/jellybeans.vim'
" Plugin 'Lokaltog/vim-powerline'
  Plugin 'bling/vim-airline'

" }}}
" General settings {{{
  filetype on
  filetype plugin indent on
  syntax on

  set title
  set mouse=a

  set shortmess=at      " shorten error messages

  set nrformats+=alpha  " in-/decrease letters with C-a/C-x

  set modeline          " enable modelines
  set modelines=5

  set number            " enable line numbers
  set ruler             " enable something
  set cursorline        " enable hiliting of cursor line

  set backspace=2       " backspace over EOL etc.

  set background=dark   " i prefer dark backgrounds

  set hidden            " buffer switching should be quick
  set confirm           " ask instead of just print errors
  set equalalways       " make splits equal size

  set lazyredraw        " don't redraw while executing macros

  set noshowmode        " don't display mode, it's already in the status line

  set laststatus=2      " always show statusline

  set encoding=utf-8    " Necessary to show Unicode glyphs
  set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

  set timeoutlen=1000
  set ttimeoutlen=50

  let mapleader=","
  let maplocalleader=","

" }}}
" General Keybinds {{{

  " Set MapLeader
  let mapleader = ","

  " Delete previous word with C-BS
  imap <C-BS> <C-W>

  " Toggle Buffer Selection
  map <F2> <Esc>:TSelectBuffer<CR>


  " Set text wrapping toggles
  nmap <silent> <leader>w :set invwrap<CR>:set wrap?<CR>

  " Set up retabbing on a source file
  nmap <silent> <leader>rr :1,$retab<CR>

  " cd to the directory containing the file in the buffer
  nmap <silent> <leader>cd :lcd %:h<CR>

  " Make the directory that contains the file in the current buffer.
  " This is useful when you edit a file in a directory that doesn't
  " (yet) exist
  nmap <silent> <leader>md :!mkdir -p %:p:h<CR>

  " Increase @revision # by 1
  nmap <silent> <leader>incr /@updated wwwd$"=strftime("%a %d %b %Y") p/@revision$

" }}}
" {{{ Window movement
  nmap <M-h> :winc h<CR>
  nmap <M-j> :winc j<CR>
  nmap <M-k> :winc k<CR>
  nmap <M-l> :winc l<CR>
" }}}
" GUI or no GUI, that's the question {{{
  if has('gui_running')
    set guicursor+=a:blinkon0       " Cursor doesn't blink - it's annoying
    set guioptions-=m               " No Menubar
    set guioptions-=T               " No Toolbar
    set guioptions-=l               " No Scrollbar left
    set guioptions-=L               " No Scrollbar left when split
    set guioptions-=r               " No Scrollbar right
    set guioptions-=r               " No Scrollbar right when split

    set gfn=Meslo\ LG\ S\ DZ\ for\ Powerline\ 10

    set lines=40                    " Height
    set columns=85                  " Width

    set background=dark

"   colorscheme solarized
"   colorscheme base16-default
"   colorscheme base16-tomorrow
    colorscheme jellybeans

  else
"   colorscheme solarized
"   let g:solarized_termcolors=16
"   let g:solarized_contrast="normal"
"   let g:solarized_visibility="normal"
"   colorscheme base16-default
"   colorscheme base16-tomorrow
    colorscheme jellybeans

  endif
" }}}
" Tabstops {{{
  set tabstop=2
  set shiftwidth=2
  set softtabstop=2
  set autoindent
  set smartindent
  set expandtab
" }}}
" Invisibles {{{
  set listchars=tab:▸\ ,eol:¬
  set list
  nmap <silent> <F5> :set list!<CR>
" }}}
" Folds {{{
  set foldmethod=marker
  set foldcolumn=1
  " au BufWinLeave * mkview
  " au BufWinEnter * silent loadview
" }}}
" Pairings {{{
  set showmatch
" }}}
" Margins {{{
  set scrolloff=5
  set sidescroll=5
" }}}
" Search {{{
  set incsearch
  set ignorecase

  " Toggle that stupid highlight search
  nmap <silent> ,n :set invhls<CR>:set hls?<CR>
" }}}
" Backup files {{{
  set nobackup
  set nowb
  set noswapfile
" }}}
" Completion {{{
  set wildmenu
  set wildmode=longest,full,list

  set ofu=syntaxcomplete#Complete
" }}}
" Snipmate {{{
" imap <tab> <C-r>=TriggerSnippet()<CR>
" }}}
" Wrapping {{{
  set linebreak
  set showbreak=↳\
" toggle wrapping
  nmap <silent> <F12> :let &wrap = !&wrap<CR>
" }}}
" Bubbling {{{
  nmap <C-up> [e
  nmap <C-down> ]e
  vmap <C-up> [egv
  vmap <C-down> ]egv
" }}}
" Pasting {{{
  set paste
  nnoremap p ]p
  nnoremap <c-p> p
" }}}
" Macros {{{
  " Execute macro "q" with space
  nmap <Space> @q
  " Map @ to + for more comfortable macros on DE kb layout
  nmap + @
" }}}
" Colorizer {{{
  let g:colorizer_nomap = 1
  let g:colorizer_startup = 0
" }}}
" RagTag {{{
  imap <M-O> <Esc>o
  imap <C-J> <Down>
  let g:ragtag_global_maps = 1

  imap <C-Space> <C-X><Space>
  imap <C-CR> <C-X><CR>
" }}}
" CTags {{{
  map <C-\> <Esc>:tab split<CR>:exec("tag ".expand("<cword>"))<CR>
  map <C-T> <Esc>:tabnew<CR>
  map <C-W> <Esc>:confirm bdelete<CR>
  map <C-Tab> <Esc>:tabnext<CR>
  map <C-S-Tab> <Esc>:tabpreviuos<CR>
" }}}
" TagBar {{{
  nnoremap <silent> <F4> <Esc>:TagbarToggle<CR>
" }}}
" NERDTree {{{
  nnoremap <silent> <F3> :NERDTreeToggle<CR>

  let g:NERDTreeChDirMode = 2
  let g:NERDTreeShowBookmarks = 1
  let g:NERDTreeWinPos = "left"
  let g:NERDTreeShowHidden = 1
" }}}
" Airline {{{
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
" }}}
" Instant-Markdown {{{
  let g:instant_markdown_slow = 1
  let g:instant_markdown_autostart = 0
  nmap <F9> <Esc>:InstantMarkdownPreview<CR>
" }}}
