" Mapping for vim & plugins
" ===========================================================

" Global Mappings {{{
" Use spacebar as leader and ; as secondary-leader
" Required before loading plugins!
let g:mapleader="\<Space>"
let g:maplocalleader=';'
nnoremap ^] <Nop>
nnoremap ^[ <Nop>

" Release keymappings prefixes, evict entirely for use of plug-ins.
nnoremap <Space>  <Nop>
xnoremap <Space>  <Nop>
nnoremap ,        <Nop>
xnoremap ,        <Nop>
nnoremap ;        <Nop>
xnoremap ;        <Nop>
nnoremap m        <Nop>
xnoremap m        <Nop>
" }}}
" General Keybindings & Mappings {{{
set pastetoggle=<F10>

" Allow saving of files as sudo when I forgot to start vim using sudo.
"command W w !sudo tee % > /dev/null

" Window-control prefix
nnoremap [Window] <Nop>
nmap     s [Window]

" Fix keybind name for Ctrl+Spacebar
map  <Nul> <C-Space>
map! <Nul> <C-Space>

" Disable arrow movement, resize splits instead.
if get(g:, 'elite_mode')
  nnoremap <Up>    :resize +2<CR>
  nnoremap <Down>  :resize -2<CR>
  nnoremap <Left>  :vertical resize +2<CR>
  nnoremap <Right> :vertical resize -2<CR>
endif

" Double leader key for toggling visual-line mode
nmap <silent> <Leader><Leader> V
vmap <Leader><Leader> <Esc>

" Change current word in a repeatable manner
nnoremap cn *``cgn
nnoremap cN *``cgN

" Change selected word in a repeatable manner
vnoremap <expr> cn "y/\\V\<C-r>=escape(@\", '/')\<CR>\<CR>" . "``cgn"
vnoremap <expr> cN "y/\\V\<C-r>=escape(@\", '/')\<CR>\<CR>" . "``cgN"

nnoremap cp yap<S-}>p
nnoremap <Leader>a =ip

" xnoremap p  "0p
" nnoremap x "_x

" Toggle fold
nnoremap <CR> za

" Focus the current fold by closing all others
nnoremap <S-Return> zMza

" Use backspace key for matchit.vim
nmap <BS> %
xmap <BS> %

nmap <Tab>   <C-w>w
nmap <S-Tab> <C-w>W

" Show highlight names under cursor
nmap <silent> gh :echo 'hi<'.synIDattr(synID(line('.'), col('.'), 1), 'name')
  \.'> trans<'.synIDattr(synID(line('.'), col('.'), 0), 'name').'> lo<'
  \.synIDattr(synIDtrans(synID(line('.'), col('.'), 1)), 'name').'>'<CR>
" }}}
" Toggle editor visuals {{{
nmap <silent> <Leader>ts :setlocal spell!<CR>
nmap <silent> <Leader>tn :setlocal nonumber!<CR>
nmap <silent> <Leader>tl :setlocal nolist!<CR>
nmap <silent> <Leader>th :nohlsearch<CR>
nmap <silent> <Leader>tw :setlocal wrap! breakindent!<CR>
" }}}
" Tabs Navigatoin {{{
nnoremap <silent> ge :<C-u>tabnew<CR>
nnoremap <silent> g0 :<C-u>tabfirst<CR>
nnoremap <silent> g$ :<C-u>tablast<CR>
nnoremap <silent> gp :<C-u>tabprevious<CR>
nnoremap <silent> gn :<C-u>tabnext<CR>
" Uses g:lasttab set on TabLeave in MyAutoCmd
let g:lasttab = 1
nmap <silent> \\ :execute 'tabn '.g:lasttab<CR>
" }}}
" Totally Custom {{{
" --------------

" Remove spaces at the end of lines
nnoremap <silent> ,<Space> :<C-u>silent! keeppatterns %substitute/\s\+$//e<CR>

" C-r: Easier search and replace
xnoremap <C-r> :<C-u>call <SID>get_selection('/')<CR>:%s/\V<C-R>=@/<CR>//gc<Left><Left><Left>

" Returns visually selected text
function! s:get_selection(cmdtype) "{{{
  let s:temp = @s
  normal! gv"sy
  let @/ = substitute(escape(@s, '\'.a:cmdtype), '\n', '\\n', 'g')
  let @s = s:temp
endfunction "}}}

" Background dark/light toggle and contrasts
nnoremap <silent><Leader>b :<C-u>call <SID>toggle_background()<CR>

function! s:toggle_background()
  if ! exists('g:colors_name')
    echomsg 'No colorscheme set'
    return
  endif
  let l:scheme = g:colors_name

  if l:scheme =~# 'dark' || l:scheme =~# 'light'
    " Rotate between different theme backgrounds
    execute 'colorscheme' (l:scheme =~# 'dark'
      \ ? substitute(l:scheme, 'dark', 'light', '')
      \ : substitute(l:scheme, 'light', 'dark', ''))
  else
    execute 'set background='.(&background ==# 'dark' ? 'light' : 'dark')
    if ! exists('g:colors_name')
      execute 'colorscheme' l:scheme
      echomsg 'The colorscheme `'.l:scheme
        \ .'` doesn''t have background variants!'
    else
      echo 'Set colorscheme to '.&background.' mode'
    endif
  endif
endfunction

" Location list movement
nmap <Leader>j :lnext<CR>
nmap <Leader>k :lprev<CR>

" Duplicate lines
nnoremap <Leader>d m`YP``
vnoremap <Leader>d YPgv

" Source line and selection in vim
vnoremap <Leader>S y:execute @@<CR>:echo 'Sourced selection.'<CR>
nnoremap <Leader>S ^vg_y:execute @@<CR>:echo 'Sourced line.'<CR>

" Yank buffer's absolute path to X11 clipboard
nnoremap <Leader>y :let @+=expand("%:p")<CR>:echo 'Copied to clipboard.'<CR>

" Drag current line/s vertically and auto-indent
vnoremap mk :m-2<CR>gv=gv
vnoremap mj :m'>+<CR>gv=gv
noremap  mk :m-2<CR>
noremap  mj :m+<CR>

" Last session management shortcuts
nmap <Leader>se :<C-u>SessionSave last<CR>
nmap <Leader>os :<C-u>execute 'source '.g:session_directory.'/last.vim'<CR>

if has('mac')
  " Open the macOS dictionary on current word
  nmap <Leader>? :!open dict://<cword><CR><CR>

  " Use Dash on Mac, for context help
  if executable('/Applications/Dash.app/Contents/MacOS/Dash')
    autocmd MyAutoCmd FileType yaml.ansible,go,php,css,less,html,markdown
      \ nmap <silent><buffer> K :!open -g dash://"<C-R>=split(&ft, '\.')[0]<CR>:<cword>"&<CR><CR>
    autocmd MyAutoCmd FileType javascript,javascript.jsx,sql,ruby,conf,sh
      \ nmap <silent><buffer> K :!open -g dash://"<cword>"&<CR><CR>
  endif

  " Use Zeal on Linux for context help
elseif executable('zeal')
  autocmd MyAutoCmd FileType yaml.ansible,go,php,css,less,html,markdown
    \ nmap <silent><buffer> K :!zeal --query "<C-R>=split(&ft, '\.')[0]<CR>:<cword>"&<CR><CR>
  autocmd MyAutoCmd FileType javascript,javascript.jsx,sql,ruby,conf,sh
    \ nmap <silent><buffer> K :!zeal --query "<cword>"&<CR><CR>
endif
" }}}
" Display diff from last save {{{
command! DiffOrig vert new | setlocal bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
" }}}
" Append modeline to EOF {{{
nnoremap <silent> <Leader>ml :call <SID>append_modeline()<CR>

" Append modeline after last line in buffer
" See: http://vim.wikia.com/wiki/Modeline_magic
function! s:append_modeline() "{{{
  let l:modeline = printf(' vim: set ts=%d sw=%d tw=%d %set :',
    \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, '%s', l:modeline, '')
  call append(line('$'), l:modeline)
endfunction "}}}
" }}}
" Windows and buffers {{{
nnoremap <silent> [Window]v  :<C-u>split<CR>
nnoremap <silent> [Window]g  :<C-u>vsplit<CR>
nnoremap <silent> [Window]t  :tabnew<CR>
nnoremap <silent> [Window]o  :<C-u>only<CR>
nnoremap <silent> [Window]b  :b#<CR>
nnoremap <silent> [Window]c  :close<CR>
nnoremap <silent> [Window]x  :<C-u>call <SID>BufferEmpty()<CR>

" Split current buffer, go to previous window and previous buffer
nnoremap <silent> [Window]sv :split<CR>:wincmd p<CR>:e#<CR>
nnoremap <silent> [Window]sg :vsplit<CR>:wincmd p<CR>:e#<CR>

function! WipeHiddenBuffers() " {{{
  let tpbl=[]
  call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
  for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
    silent execute 'bwipeout' buf
  endfor
endfunction " }}}

function! s:BufferEmpty() " {{{
  let l:current = bufnr('%')
  if ! getbufvar(l:current, '&modified')
    enew
    silent! execute 'bdelete '.l:current
  endif
endfunction " }}}

function! s:SweepBuffers() " {{{
  let s:bufs = range(1, bufnr('$'))
  let s:hidden = filter(s:bufs, 'buflisted(v:val) && !bufloaded(v:val)')
  if ! empty(s:hidden)
    execute 'silent bdelete' join(s:hidden)
  endif
endfunction " }}}

" OpenChangedFiles COMMAND
" Open a split for each dirty file in git
function! OpenChangedFiles() " {{{
  only " Close all windows, unless they're modified
  let status =
    \ system('git status -s | grep "^ \?\(M\|A\|UU\)" | sed "s/^.\{3\}//"')
  let filenames = split(status, "\n")
  exec 'edit ' . filenames[0]
  for filename in filenames[1:]
    exec 'sp ' . filename
  endfor
endfunction " }}}
" }}}
" Tags {{{
nmap <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
nmap <C-]>v :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
nmap <C-]>h :sp <CR>:exec("tag ".expand("<cword>"))<CR>
" }}}

" denite.nvim {{{
if dein#tap('denite.nvim')
  nnoremap <silent><LocalLeader>r :<C-u>Denite -resume -refresh<CR>
  nnoremap <silent><LocalLeader>f :<C-u>Denite file/rec<CR>
  nnoremap <silent><LocalLeader>b :<C-u>Denite buffer file/old -default-action=switch<CR>
  nnoremap <silent><LocalLeader>d :<C-u>Denite directory_rec -default-action=cd<CR>
  nnoremap <silent><LocalLeader>v :<C-u>Denite register -buffer-name=register<CR>
  xnoremap <silent><LocalLeader>v :<C-u>Denite register -buffer-name=register -default-action=replace<CR>
  nnoremap <silent><LocalLeader>l :<C-u>Denite location_list -buffer-name=list<CR>
  nnoremap <silent><LocalLeader>q :<C-u>Denite quickfix -buffer-name=list<CR>
  nnoremap <silent><LocalLeader>n :<C-u>Denite dein<CR>
  nnoremap <silent><LocalLeader>g :<C-u>Denite grep<CR>
  nnoremap <silent><LocalLeader>j :<C-u>Denite jump change file/point<CR>
  nnoremap <silent><LocalLeader>u :<C-u>Denite junkfile:new junkfile<CR>
  nnoremap <silent><LocalLeader>o :<C-u>Denite outline<CR>
  nnoremap <silent><LocalLeader>s :<C-u>Denite session -buffer-name=list<CR>
  nnoremap <silent><expr> <LocalLeader>t &filetype == 'help' ? "g\<C-]>" :
    \ ":\<C-u>DeniteCursorWord -buffer-name=tag
    \  tag:include\<CR>"
  nnoremap <silent><LocalLeader>h :<C-u>Denite help<CR>
  nnoremap <silent><LocalLeader>/ :<C-u>Denite line<CR>
  nnoremap <silent><LocalLeader>* :<C-u>DeniteCursorWord line<CR>
  nnoremap <silent><LocalLeader>z :<C-u>Denite z<CR>
  nnoremap <silent><LocalLeader>; :<C-u>Denite command command_history<CR>
  nnoremap <silent><LocalLeader>` :<C-u>Denite menu<CR>

  " chemzqm/denite-git
  nnoremap <silent> <Leader>gl :<C-u>Denite gitlog:all<CR>
  nnoremap <silent> <Leader>gs :<C-u>Denite gitstatus<CR>
  nnoremap <silent> <Leader>gc :<C-u>Denite gitchanged:<CR>

  " Open Denite with word under cursor or selection
  nnoremap <silent> <Leader>gf :DeniteCursorWord file/rec<CR>
  nnoremap <silent> <Leader>gg :DeniteCursorWord grep<CR>
  vnoremap <silent> <Leader>gg
    \ :<C-u>call <SID>get_selection('/')<CR>
    \ :execute 'Denite grep:::'.@/<CR><CR>

  function! s:get_selection(cmdtype)
    let l:temp = @s
    normal! gv"sy
    let @/ = substitute(escape(@s, '\'.a:cmdtype), '\n', '\\n', 'g')
    let @s = l:temp
  endfunction
endif

if dein#tap('vim-denite-z')
  command! -nargs=+ -complete=file Z
    \ call denite#start([{'name': 'z', 'args': [<q-args>], {'immediately': 1}}])
endif
" }}}
" deoplete.nvim {{{
if has('nvim') && dein#tap('deoplete.nvim')
  autocmd MyAutoCmd CompleteDone * silent! pclose!

  " Movement within 'ins-completion-menu'
  imap <expr><C-j>   pumvisible() ? "\<Down>" : "\<C-j>"
  imap <expr><C-k>   pumvisible() ? "\<Up>" : "\<C-k>"

  " Scroll pages in menu
  inoremap <expr><C-f> pumvisible() ? "\<PageDown>" : "\<Right>"
  inoremap <expr><C-b> pumvisible() ? "\<PageUp>" : "\<Left>"
  imap     <expr><C-d> pumvisible() ? "\<PageDown>" : "\<C-d>"
  imap     <expr><C-u> pumvisible() ? "\<PageUp>" : "\<C-u>"

  " Undo completion
  inoremap <expr><C-g> deoplete#undo_completion()

  " Redraw candidates
  inoremap <expr><C-l> deoplete#refresh()

  " <CR>: If popup menu visible, expand snippet or close popup with selection,
  "       Otherwise, check if within empty pair and use delimitMate.
  imap <silent><expr><CR> pumvisible() ? (neosnippet#expandable() ? "\<Plug>(neosnippet_expand)" : "\<C-y>")
    \ : (delimitMate#WithinEmptyPair() ? "\<C-R>=delimitMate#ExpandReturn()\<CR>" : "\<CR>")

  " <Tab> completion:
  " 1. If popup menu is visible, select and insert next item
  " 2. Otherwise, if within a snippet, jump to next input
  " 3. Otherwise, if preceding chars are whitespace, insert tab char
  " 4. Otherwise, start manual autocomplete
  imap <silent><expr><Tab> pumvisible() ? "\<Down>"
    \ : (neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)"
    \ : (<SID>is_whitespace() ? "\<Tab>"
    \ : deoplete#manual_complete()))

  smap <silent><expr><Tab> pumvisible() ? "\<Down>"
    \ : (neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)"
    \ : (<SID>is_whitespace() ? "\<Tab>"
    \ : deoplete#manual_complete()))

  inoremap <expr><S-Tab>  pumvisible() ? "\<Up>" : "\<C-h>"

  function! s:is_whitespace() "{{{
    let l:col = col('.') - 1
    return ! l:col || getline('.')[l:col - 1] =~? '\s'
  endfunction "}}}
endif
" }}}
" neocomplete.vim {{{
if !has('nvim') && dein#tap('neocomplete.vim')
  let g:neocomplete#fallback_mappings = [ "\<C-x>\<C-o>", "\<C-x>\<C-n>" ]

  " Movement within 'ins-completion-menu'
  imap <expr><C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
  imap <expr><C-k> pumvisible() ? "\<C-p>" : "\<C-k>"
  imap <expr><C-f> pumvisible() ? "\<PageDown>" : "\<Right>"
  imap <expr><C-b> pumvisible() ? "\<PageUp>" : "\<Left>"
  imap <expr><C-d> pumvisible() ? "\<PageDown>" : "\<Right>"
  imap <expr><C-u> pumvisible() ? "\<PageUp>" : "\<Left>"

  " <C-n>: neocomplete.
  imap <expr><C-n>  pumvisible() ? "\<C-n>" : "\<C-x>\<C-u>\<C-p>\<Down>"
  " <C-p>: keyword completion.
  imap <expr><C-p>  pumvisible() ? "\<C-p>" : "\<C-p>\<C-n>"

  " Special plugin key-mappings
  "inoremap <expr><C-l>  neocomplete#mappings#complete_common_string()
  inoremap <expr><C-l>  neocomplete#mappings#refresh()
  inoremap <expr><C-g>   neocomplete#undo_completion()

  " Start file completion TODO Not working all the time
  imap <silent><expr><C-x><C-f> neocomplete#start_manual_complete('file')

  " <CR>: If popup menu visible, expand snippet or close popup with selection,
  "       Otherwise, check if within empty pair and use delimitMate.
  imap <silent><expr><CR> pumvisible() ? (neosnippet#expandable() ? "\<Plug>(neosnippet_expand)" : "\<C-y>")
    \ : (delimitMate#WithinEmptyPair() ? "\<C-R>=delimitMate#ExpandReturn()\<CR>" : "\<CR>")

  " <Tab> completion:
  " 1. If popup menu is visible, select and insert next item
  " 2. Otherwise, if within a snippet, jump to next input
  " 3. Otherwise, if preceding chars are whitespace, insert tab char
  " 4. Otherwise, start manual autocomplete
  imap <silent><expr><Tab> pumvisible() ? "\<C-n>"
    \ : (neosnippet#jumpable() ? "\<Plug>(neosnippet_jump)"
    \ : (<SID>is_whitespace() ? "\<Tab>"
    \ : neocomplete#start_manual_complete()))

  smap <silent><expr><Tab> pumvisible() ? "\<C-n>"
    \ : (neosnippet#jumpable() ? "\<Plug>(neosnippet_jump)"
    \ : (<SID>is_whitespace() ? "\<Tab>"
    \ : neocomplete#start_manual_complete()))

  inoremap <expr><S-Tab>  pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:is_whitespace() "{{{
    let l:col = col('.') - 1
    return ! l:col || getline('.')[l:col - 1] =~? '\s'
  endfunction "}}}
endif
" }}}
" neosnippet.vim {{{
if dein#tap('neosnippet.vim')
  " Plugin key-mappings.
  imap <expr><C-o> (pumvisible()? "\<C-y>" : '') . "\<Plug>(neosnippet_expand_or_jump)"
  smap <C-o> <Plug>(neosnippet_expand_or_jump)
  xmap <C-o> <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  imap <expr><TAB>
    \ pumvisible() ? "\<C-n>" :
    \ neosnippet#expandable_or_jumpable() ?
    \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "
    \<Plug>(neosnippet_expand_or_jump)"
    \: "\<TAB>"
endif
" }}}
" emmet-vim {{{
if dein#tap('emmet-vim')
  autocmd MyAutoCmd FileType html,css,jsx,javascript,javascript.jsx
    \ EmmetInstall
    \ | imap <buffer> <C-Return> <Plug>(emmet-expand-abbr)
endif
" }}}
" NerdTree {{{
if dein#tap('nerdtree')
  let g:NERDTreeMapOpenSplit = 'sv'
  let g:NERDTreeMapOpenVSplit = 'sg'
  let g:NERDTreeMapOpenInTab = 'st'
  let g:NERDTreeMapOpenInTabSilent = 'sT'
  let g:NERDTreeMapUpdirKeepOpen = '<BS>'
  let g:NERDTreeMapOpenRecursively = 't'
  let g:NERDTreeMapCloseChildren = 'T'
  let g:NERDTreeMapToggleHidden = '.'

  nnoremap <silent> <Leader>e :<C-u>NERDTreeToggle<CR>
  nnoremap <silent> <Leader>ea :<C-u>NERDTreeFind<CR>
endif
" }}}
" vim-commentary {{{
if dein#tap('vim-commentary')
  xmap <Leader>v  <Plug>Commentary
  nmap <Leader>v  <Plug>CommentaryLine
  xmap gc  <Plug>Commentary
  nmap gc  <Plug>Commentary
  omap gc  <Plug>Commentary
  nmap gcc <Plug>CommentaryLine
  nmap cgc <Plug>ChangeCommentary
  nmap gcu <Plug>Commentary<Plug>Commentary
endif
" }}}
" vim-choosewin {{{
if dein#tap('vim-choosewin')
  nmap -         <Plug>(choosewin)
  nmap <Leader>- :<C-u>ChooseWinSwapStay<CR>
endif
" }}}
" jedi-vim {{{
if dein#tap('jedi-vim')
  let g:jedi#completions_command = ''
  let g:jedi#documentation_command = 'K'
  let g:jedi#goto_command = '<C-]>'
  let g:jedi#goto_assignments_command = '<Leader>g'
  let g:jedi#rename_command = '<Leader>r'
  let g:jedi#usages_command = '<Leader>n'
endif
" }}}
" undotree {{{
if dein#tap('undotree')
  nnoremap <Leader>gu :UndotreeToggle<CR>
endif
" }}}
" EasyMotion {{{
if dein#tap('vim-easymotion')
  nmap ss <Plug>(easymotion-s2)
  nmap sd <Plug>(easymotion-s)
  nmap sf <Plug>(easymotion-overwin-f)
  map  sh <Plug>(easymotion-linebackward)
  map  sl <Plug>(easymotion-lineforward)
  " map  sj <Plug>(easymotion-j)
  " map  sk <Plug>(easymotion-k)
  map  s/ <Plug>(easymotion-sn)
  omap s/ <Plug>(easymotion-tn)
  map  sn <Plug>(easymotion-next)
  map  sp <Plug>(easymotion-prev)
endif
" }}}
" TagBar {{{
if dein#tap('tagbar')
  nnoremap <silent> <Leader>o :<C-u>TagbarToggle<CR>
endif
" }}}
" vim-operator-surround {{{
if dein#tap('vim-operator-surround')
  map <silent>sa <Plug>(operator-surround-append)
  map <silent>sd <Plug>(operator-surround-delete)
  map <silent>sr <Plug>(operator-surround-replace)
  nmap <silent>saa <Plug>(operator-surround-append)<Plug>(textobj-multiblock-i)
  nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
  nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
endif
" }}}
" vim-operator-replace {{{
if dein#tap('vim-operator-replace')
  xmap p <Plug>(operator-replace)
endif
" }}}
" vim-operator-flashy {{{
if dein#tap('vim-operator-flashy')
  map y <Plug>(operator-flashy)
  nmap Y <Plug>(operator-flashy)$
endif
" }}}
" vim-niceblock {{{
if dein#tap('vim-niceblock')
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
endif
" }}}
" vim-asterisk {{{
if dein#tap('vim-asterisk')
  map *   <Plug>(asterisk-g*)
  map g*  <Plug>(asterisk-*)
  map #   <Plug>(asterisk-g#)
  map g#  <Plug>(asterisk-#)
  map z*  <Plug>(asterisk-z*)
  map gz* <Plug>(asterisk-gz*)
  map z#  <Plug>(asterisk-z#)
  map gz# <Plug>(asterisk-gz#)
endif
" }}}
" accelerated-jk {{{
if dein#tap('accelerated-jk')
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
endif
" }}}
" vim-bookmarks {{{
if dein#tap('vim-bookmarks')
  nmap ma :<C-u>cgetexpr bm#location_list()<CR>
    \ :<C-u>Denite quickfix -buffer-name=list<CR>
  nmap mn <Plug>BookmarkNext
  nmap mp <Plug>BookmarkPrev
  nmap mm <Plug>BookmarkToggle
  nmap mi <Plug>BookmarkAnnotate
endif
" }}}
" vim-go {{{
if dein#tap('vim-go')
  autocmd MyAutoCmd FileType go
    \   nmap <C-]> <Plug>(go-def)
    \ | nmap <Leader>god  <Plug>(go-describe)
    \ | nmap <Leader>goc  <Plug>(go-callees)
    \ | nmap <Leader>goC  <Plug>(go-callers)
    \ | nmap <Leader>goi  <Plug>(go-info)
    \ | nmap <Leader>gom  <Plug>(go-implements)
    \ | nmap <Leader>gos  <Plug>(go-callstack)
    \ | nmap <Leader>goe  <Plug>(go-referrers)
    \ | nmap <Leader>gor  <Plug>(go-run)
    \ | nmap <Leader>gov  <Plug>(go-vet)
endif
" }}}
" vimagit {{{
if dein#tap('vimagit')
  nnoremap <silent> mg :Magit<CR>
  nnoremap <silent> mgv :call magit#show_magit('h')<CR>
endif
" }}}
" vim-easygit {{{
if dein#tap('vim-easygit')
  nnoremap <silent> <Leader>gd :Gdiff<CR>
  nnoremap <silent> <Leader>gD :Gdiffoff<CR>
  nnoremap <silent> <Leader>gC :Gcommit -v<CR>
  nnoremap <silent> <Leader>gb :Gblame<CR>
  nnoremap <silent> <Leader>gB :Gbrowse<CR>
  nnoremap <silent> <Leader>gS :Gstatus<CR>
  nnoremap <silent> <Leader>gp :Gpush<CR>
endif
" }}}
" tern_for_vim {{{
if dein#tap('tern_for_vim')
  autocmd MyAutoCmd FileType javascript,jsx,javascript.jsx
    \  nnoremap <silent><buffer> K          :<C-u>TernDoc<CR>
    \| nnoremap <silent><buffer> <C-]>      :<C-u>TernDefSplit<CR>
    \| nnoremap <silent><buffer> <Leader>g  :<C-u>TernType<CR>
    \| nnoremap <silent><buffer> <Leader>n  :<C-u>TernRefs<CR>
    \| nnoremap <silent><buffer> <Leader>r  :<C-u>TernRename<CR>
endif
" }}}
" vim-gitgutter {{{
if dein#tap('vim-gitgutter')
  nmap <Leader>hj <Plug>GitGutterNextHunk
  nmap <Leader>hk <Plug>GitGutterPrevHunk
  nmap <Leader>hs <Plug>GitGutterStageHunk
  nmap <Leader>hr <Plug>GitGutterUndoHunk
  nmap <Leader>hp <Plug>GitGutterPreviewHunk
endif
" }}}
" committia.vim {{{
if dein#tap('committia.vim')
  let g:committia_hooks = {}
  function! g:committia_hooks.edit_open(info)
    imap <buffer><C-d> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-u> <Plug>(committia-scroll-diff-up-half)

    setlocal winminheight=1 winheight=1
    resize 10
    startinsert
  endfunction
endif
" }}}
" goyo.vim {{{
if dein#tap('goyo.vim')
  nnoremap <Leader>G :Goyo<CR>
endif
" }}}
" vim-peekaboo {{{
if dein#tap('vim-peekaboo')
  nnoremap <buffer> <silent> " :<C-u>call peekaboo#peek(v:count1, 'quote',  0)<CR>
  xnoremap <buffer> <silent> " :<C-u>call peekaboo#peek(v:count1, 'quote',  1)<CR>
  nnoremap <buffer> <silent> @ :<C-u>call peekaboo#peek(v:count1, 'replay', 0)<CR>
  inoremap <buffer> <silent> <C-r> <C-o>:call peekaboo#peek(1, 'ctrl-r',  0)<CR>
endif
" }}}
" vim-expand-region {{{
if dein#tap('vim-expand-region')
  xmap v <Plug>(expand_region_expand)
  xmap V <Plug>(expand_region_shrink)
endif
" }}}
" sideways.vim {{{
if dein#tap('sideways.vim')
  nnoremap <silent> m" :SidewaysJumpLeft<CR>
  nnoremap <silent> m' :SidewaysJumpRight<CR>
  omap <silent> a, <Plug>SidewaysArgumentTextobjA
  xmap <silent> a, <Plug>SidewaysArgumentTextobjA
  omap <silent> i, <Plug>SidewaysArgumentTextobjI
  xmap <silent> i, <Plug>SidewaysArgumentTextobjI
endif
" }}}
" splitjoin.vim {{{
if dein#tap('splitjoin.vim')
  let g:splitjoin_join_mapping = ''
  let g:splitjoin_split_mapping = ''
  nmap sj :SplitjoinJoin<CR>
  nmap sk :SplitjoinSplit<CR>
endif
" }}}
" linediff.vim {{{
if dein#tap('linediff.vim')
  vnoremap ,df :Linediff<CR>
  vnoremap ,da :LinediffAdd<CR>
  nnoremap ,ds :<C-u>LinediffShow<CR>
  nnoremap ,dr :<C-u>LinediffReset<CR>
endif
" }}}
" dsf.vim {{{
if dein#tap('dsf.vim')
  nmap dsf <Plug>DsfDelete
  nmap csf <Plug>DsfChange
endif
" }}}
" vim-textobj-multiblock {{{
if dein#tap('vim-textobj-multiblock')
  omap <silent> ab <Plug>(textobj-multiblock-a)
  omap <silent> ib <Plug>(textobj-multiblock-i)
  xmap <silent> ab <Plug>(textobj-multiblock-a)
  xmap <silent> ib <Plug>(textobj-multiblock-i)
endif
" }}}
" vim-textobj-function {{{
if dein#tap('vim-textobj-function')
  omap <silent> af <Plug>(textobj-function-a)
  omap <silent> if <Plug>(textobj-function-i)
  xmap <silent> af <Plug>(textobj-function-a)
  xmap <silent> if <Plug>(textobj-function-i)
endif
" }}}
" vim-autoformat {{{
noremap <F3> :Autoformat<CR>
" Custom formatters {{{
" -p = --pad-oper
" -c = --convert-tabs
" -H = --pad-header
" -s# = --indent=spaces=#
" -t = --indent=tab
" -k1 = --align-pointer=type
" -W1 = --align-reference=type
" -xd = --pad-first-paren-out
let g:formatdef_my_astyle_c = '"astyle --mode=c --style=google -xdk1W1pcH".(&expandtab ? "s".shiftwidth() : "t")'
let g:formatdef_my_clang_c = '"clang-format -style=file"'
let g:formatters_c = ['my_clang_c']

let g:formatdef_my_astyle_cpp = '"astyle --mode=c --style=google -xdk1W1pcH".(&expandtab ? "s".shiftwidth() : "t")'
let g:formatdef_my_clang_cpp = '"clang-format -style=file"'
let g:formatters_cpp = ['my_clang_cpp']
"}}}
" }}}
" vim: set foldmethod=marker ts=2 sw=2 tw=80 expandtab :
