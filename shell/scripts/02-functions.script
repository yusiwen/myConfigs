#!/bin/sh

which() {
  printf '\e[?7t'

  TYPE=`builtin type $@`
  builtin which "$@" \
    && echo $TYPE

  ALIAS='alias'
  FUNCTION='function'
  BUILTIN='builtin'
  NOTFOUND='not found'
  if [[ "$TYPE" =~ "$ALIAS" ]]; then
  elif [[ "$TYPE" =~ "$FUNCTION" ]]; then
  elif [[ "$TYPE" =~ "$BUILTIN" ]]; then
  elif [[ "$TYPE" =~ "$NOTFOUND" ]]; then
    whereis "$@"
  else
    whereis "$@"
    file $(builtin type "$@" | awk '{print $3}')
  fi

  printf '\e[?7t'
}

du1() { du -h --max-depth=1 "$@" | sort -k 1,1hr -k 2,2f; }

# Purge all rc packages
purgerc() {
  RC=`dpkg -l | grep "^rc" | cut -d ' ' -f 3`
  if [ -z $RC ]; then
    echo "No 'rc' status package was found."
    return 1
  fi
  echo "$RC"
  printf "Purge all [Y/n]? "
  read -s choice
  case $choice in
    Y|""|y)
      echo "$RC" | xargs sudo dpkg --purge
      ;;
    *)
      return 1
      ;;
  esac
}

# Extract some pages from a PDF file.
pdfpextr() {
  # this function uses 3 arguments:
  #   $1 is the first page of the range to extract
  #   $2 is the last page of the range to extract
  #   $3 is the input file
  #   output file will be named "inputfile_pXX-pYY.pdf"
  if [ $# -ne 2 ]; then
    echo 'Usage: pdfpextr start_page end_page input_file'
    echo '  output file wille be named "{input_file}_pXX-pYY.pdf"'
    return 1
  fi
  gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
    -dFirstPage=${1} \
    -dLastPage=${2} \
    -sOutputFile=${3%.pdf}_p${1}-p${2}.pdf \
    ${3}
}

# Fix pdf embedded fonts problem
#   see: http://stackoverflow.com/a/10282269/3387137
pdffixfont() {
  # this function uses 2 arguments:
  #   $1 is the original file with embedded fonts problem
  #   $2 is the output file
  if [ $# -ne 2 ]; then
    echo 'Usage: pdffixfont input_file output_file'
    return 1
  fi
  gs -o ${2} \
    -dPDFSETTINGS=/prepress \
    -sDEVICE=pdfwrite \
    ${1}
}

# Split media file by cue
#   see: http://en.linuxreviews.org/HOWTO_splitt_lossless_audio_files_(ape,_flac,_wv,_wav)_using_.cue_files
splitbycue() {
  # this function uses 3 arguments:
  #   $1 is the cue file
  #   $2 is the media file, can be .ape/.flac/.wav
  #   $3 is the output format, can be 'wav','flac'...
  if [ $# -ne 3 ]; then
    echo 'Usage: splitbycue cue_file media_file output_format'
    return 1
  fi

  cuebreakpoints ${1} | shnsplit -o ${3} ${2}
}

# Convert all FLAC files in current directory to ALAC
#   see: https://gist.github.com/vol4ok/2587886
flac2alac() {
  for f in *.flac
  do
    ffmpeg -i "./$f" -acodec alac "./${f%.flac}.m4a";
  done
}

# Add folder to $PATH if it doesn't exist in it
#   see: http://superuser.com/questions/39751/add-directory-to-path-if-its-not-already-there
addpath() {
  if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
    PATH="${PATH:+"$PATH:"}$1"
  fi
}

# Find largest directories or files in current folder
maxs() {
  numbers=10
  type='d'
  re='^[0-9]+$'
  if [ $# -eq 0 ]; then
    numbers=10
    type='d'
  elif [ $# -eq 1 ]; then
    if [ "$1" = "-h" ]; then
      echo "maxs [-fdh] [NUMBER]"
    fi

    if ! [[ $1 =~ $re ]]; then
      echo "error: Not a number: $1" >&2; return 1
    fi
    numbers="${1}"
    type='d'
  else
    if [ "$1" = "-f" ]; then
      type='f'
    elif [ "$1" = "-d" ]; then
      type='d'
    else
      echo "error: Wrong option: $1" >&2; return 1
    fi

    if ! [[ $2 =~ $re ]]; then
      echo "error: Not a number: $2" >&2; return 1
    fi
    numbers="${2}"
  fi

  find . -type "$type" -print0 | xargs -0 du | sort -n | tail -"$numbers" | cut -f2 | xargs -I{} du -sh {}
}

