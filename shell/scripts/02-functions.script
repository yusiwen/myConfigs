#!/bin/bash

whichv() {
  printf '\e[?7t'

  TYPE="$(builtin type "$@")"
  builtin which "$@" &&
    echo "$TYPE"

  ALIAS='alias'
  FUNCTION='function'
  BUILTIN='builtin'
  NOTFOUND='not found'
  if [[ "$TYPE" =~ $ALIAS ]] || [[ "$TYPE" =~ $FUNCTION ]] || [[ "$TYPE" =~ $BUILTIN ]] || [[ "$TYPE" =~ $NOTFOUND ]]; then
    whereis "$@"
  else
    whereis "$@"
    file "$(builtin type "$@" | awk '{print $3}')"
  fi

  printf '\e[?7t'
}

du1() { du -h --max-depth=1 "$@" | sort -k 1,1hr -k 2,2f; }

# Purge all rc packages
purgerc() {
  RC=$(dpkg -l | grep "^rc" | cut -d ' ' -f 3)
  if [ -z "$RC" ]; then
    echo "No 'rc' status package was found."
    return 1
  fi
  echo "$RC"
  printf "Purge all [Y/n]? "
  read -rs choice
  case $choice in
  Y | "" | y)
    echo "$RC" | xargs sudo dpkg --purge
    ;;
  *)
    return 1
    ;;
  esac
}

# Extract some pages from a PDF file.
pdfpextr() {
  # this function uses 3 arguments:
  #   $1 is the first page of the range to extract
  #   $2 is the last page of the range to extract
  #   $3 is the input file
  #   output file will be named "inputfile_pXX-pYY.pdf"
  if [ $# -ne 2 ]; then
    echo 'Usage: pdfpextr start_page end_page input_file'
    echo '  output file wille be named "{input_file}_pXX-pYY.pdf"'
    return 1
  fi
  gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
    -dFirstPage="${1}" \
    -dLastPage="${2}" \
    -sOutputFile="${3%.pdf}_p${1}-p${2}.pdf" \
    "${3}"
}

# Fix pdf embedded fonts problem
#   see: http://stackoverflow.com/a/10282269/3387137
pdffixfont() {
  # this function uses 2 arguments:
  #   $1 is the original file with embedded fonts problem
  #   $2 is the output file
  if [ $# -ne 2 ]; then
    echo 'Usage: pdffixfont input_file output_file'
    return 1
  fi
  gs -o "${2}" \
    -dPDFSETTINGS=/prepress \
    -sDEVICE=pdfwrite \
    "${1}"
}

# Split media file by cue
#   see: http://en.linuxreviews.org/HOWTO_splitt_lossless_audio_files_(ape,_flac,_wv,_wav)_using_.cue_files
splitbycue() {
  # this function uses 3 arguments:
  #   $1 is the cue file
  #   $2 is the media file, can be .ape/.flac/.wav
  #   $3 is the output format, can be 'wav','flac'...
  if [ $# -ne 3 ]; then
    echo 'Usage: splitbycue cue_file media_file output_format'
    return 1
  fi

  cuebreakpoints "${1}" | shnsplit -o "${3}" "${2}"
}

# Convert all FLAC files in current directory to ALAC
#   see: https://gist.github.com/vol4ok/2587886
flac2alac() {
  for f in *.flac; do
    ffmpeg -i "./$f" -acodec alac "./${f%.flac}.m4a"
  done
}

# Add folder to $PATH if it doesn't exist in it
#   see: http://superuser.com/questions/39751/add-directory-to-path-if-its-not-already-there
addpath() {
  if [ -d "${1}" ] && [[ ":$PATH:" != *":${1}:"* ]]; then
    PATH="${PATH:+"$PATH:"}$1"
  fi
}

# Find largest directories or files in current folder
maxs() {
  numbers=10
  type='d'
  re='^[0-9]+$'
  if [ $# -eq 0 ]; then
    numbers=10
    type='d'
  elif [ $# -eq 1 ]; then
    if [ "$1" = "-h" ]; then
      echo "maxs [-fdh] [NUMBER]"
    fi

    if ! [[ "${1}" =~ $re ]]; then
      echo "error: Not a number: ${1}" >&2
      return 1
    fi
    numbers="${1}"
    type='d'
  else
    if [ "${1}" = "-f" ]; then
      type='f'
    elif [ "${1}" = "-d" ]; then
      type='d'
    else
      echo "error: Wrong option: ${1}" >&2
      return 1
    fi

    if ! [[ "${2}" =~ $re ]]; then
      echo "error: Not a number: ${2}" >&2
      return 1
    fi
    numbers="${2}"
  fi

  find . -type "$type" -print0 | xargs -0 du | sort -n | tail -"$numbers" | cut -f2 | xargs -I{} du -sh {}
}

# Check if running in WSL
is_running_in_wsl() {
  if [ $(uname -r | sed -n 's/.*\( *Microsoft *\).*/\1/ip') ]; then
    echo "1"
  else
    echo "0"
  fi
}

# https://polothy.github.io/post/2019-08-19-fzf-git-checkout/
fzf-git-branch() {
  git rev-parse HEAD >/dev/null 2>&1 || return

  git branch --color=always --all --sort=-committerdate |
    grep -v HEAD |
    fzf --height 50% --ansi --no-multi --preview-window right:65% \
      --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})' |
    sed "s/.* //"
}

fzf-git-checkout() {
  git rev-parse HEAD >/dev/null 2>&1 || return

  local branch

  branch=$(fzf-git-branch)
  if [[ "$branch" = "" ]]; then
    echo "No branch selected."
    return
  fi

  # If branch name starts with 'remotes/' then it is a remote branch. By
  # using --track and a remote branch name, it is the same as:
  # git checkout -b branchName --track origin/branchName
  if [[ "$branch" = 'remotes/'* ]]; then
    git checkout --track $branch
  else
    git checkout $branch
  fi
}

# https://gist.github.com/junegunn/f4fca918e937e6bf5bad
GIT_FZF_DEFAULT_OPTS=(
  --ansi --reverse --height=100% 
  --bind j:preview-down
	--bind k:preview-up
	--bind pgdn:preview-page-down
	--bind pgup:preview-page-up
	--bind q:abort
)

git-fuzzy-diff() {
  PREVIEW_PAGER="less --tabs=4 -Rc"
  ENTER_PAGER=${PREVIEW_PAGER}

  # Don't just diff the selected file alone, get related files first using
  # '--name-status -R' in order to include moves and renames in the diff.
  # See for reference: https://stackoverflow.com/q/71268388/3018229
  PREVIEW_COMMAND='git diff --color=always '$@' -- \
		$(echo $(git diff --name-status -R '$@' | grep {}) | cut -d" " -f 2-) \
		| '$PREVIEW_PAGER

  # Show additional context compared to preview
  ENTER_COMMAND='git diff --color=always '$@' -U10000 -- \
		$(echo $(git diff --name-status -R '$@' | grep {}) | cut -d" " -f 2-) \
		| '$ENTER_PAGER

  git diff --name-only $@ |
    fzf ${GIT_FZF_DEFAULT_OPTS[@]} --exit-0 --preview "${PREVIEW_COMMAND}" \
      --preview-window=top:85% --bind "enter:execute:${ENTER_COMMAND}"
}

git-fuzzy-log() {
  PREVIEW_COMMAND='f() {
		set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}")
		[ $# -eq 0 ] || (
			git show --no-patch --color=always $1
			echo
			git show --stat --format="" --color=always $1 |
			while read line; do
				tput dim
				echo " $line" | sed "s/\x1B\[m/\x1B\[2m/g"
				tput sgr0
			done |
			tac | sed "1 a \ " | tac
		)
	}; f {}'

  ENTER_COMMAND='(grep -o "[a-f0-9]\{7\}" | head -1 |
		xargs -I % bash -ic "git-fuzzy-diff %^1 %") <<- "FZF-EOF"
		{}
		FZF-EOF'

  git log --graph --color=always --format="%C(auto)%h %s%d " |
    fzf ${GIT_FZF_DEFAULT_OPTS[@]} --no-sort --tiebreak=index \
      --preview "${PREVIEW_COMMAND}" --preview-window=top:15 \
      --bind "enter:execute:${ENTER_COMMAND}"
}
