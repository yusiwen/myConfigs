#!/usr/bin/env bash

whichv() { # {{{
  printf '\e[?7t'

  TYPE="$(builtin type "$@")"
  builtin which "$@" &&
    echo "$TYPE"

  ALIAS='alias'
  FUNCTION='function'
  BUILTIN='builtin'
  NOTFOUND='not found'
  if [[ "$TYPE" =~ $ALIAS ]] || [[ "$TYPE" =~ $FUNCTION ]] || [[ "$TYPE" =~ $BUILTIN ]] || [[ "$TYPE" =~ $NOTFOUND ]]; then
    whereis "$@"
  else
    whereis "$@"
    file "$(builtin type "$@" | awk '{print $3}')"
  fi

  printf '\e[?7t'
} # }}}

function check_command() { # {{{
  if type "$1" >/dev/null 2>&1; then
    true
  else
    false
  fi
} # }}}

du1() { du -h --max-depth=1 "$@" | sort -k 1,1hr -k 2,2f; }

# Purge all rc packages
purgerc() { # {{{
  RC=$(dpkg -l | grep "^rc" | cut -d ' ' -f 3)
  if [ -z "$RC" ]; then
    echo "No 'rc' status package was found."
    return 1
  fi
  echo "$RC"
  printf "Purge all [Y/n]? "
  read -rs choice
  case $choice in
  Y | "" | y)
    echo "$RC" | xargs sudo dpkg --purge
    ;;
  *)
    return 1
    ;;
  esac
} # }}}

# Extract some pages from a PDF file.
pdfpextr() { # {{{
  # this function uses 3 arguments:
  #   $1 is the first page of the range to extract
  #   $2 is the last page of the range to extract
  #   $3 is the input file
  #   output file will be named "inputfile_pXX-pYY.pdf"
  if [ $# -ne 2 ]; then
    echo 'Usage: pdfpextr start_page end_page input_file'
    echo '  output file wille be named "{input_file}_pXX-pYY.pdf"'
    return 1
  fi
  gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
    -dFirstPage="${1}" \
    -dLastPage="${2}" \
    -sOutputFile="${3%.pdf}_p${1}-p${2}.pdf" \
    "${3}"
} # }}}

# Fix pdf embedded fonts problem
#   see: http://stackoverflow.com/a/10282269/3387137
pdffixfont() { # {{{
  # this function uses 2 arguments:
  #   $1 is the original file with embedded fonts problem
  #   $2 is the output file
  if [ $# -ne 2 ]; then
    echo 'Usage: pdffixfont input_file output_file'
    return 1
  fi
  gs -o "${2}" \
    -dPDFSETTINGS=/prepress \
    -sDEVICE=pdfwrite \
    "${1}"
} # }}}

# Split media file by cue
#   see: http://en.linuxreviews.org/HOWTO_splitt_lossless_audio_files_(ape,_flac,_wv,_wav)_using_.cue_files
splitbycue() { # {{{
  # this function uses 3 arguments:
  #   $1 is the cue file
  #   $2 is the media file, can be .ape/.flac/.wav
  #   $3 is the output format, can be 'wav','flac'...
  if [ $# -ne 3 ]; then
    echo 'Usage: splitbycue cue_file media_file output_format'
    return 1
  fi

  cuebreakpoints "${1}" | shnsplit -o "${3}" "${2}"
} # }}}

# Convert all FLAC files in current directory to ALAC
#   see: https://gist.github.com/vol4ok/2587886
flac2alac() { # {{{
  for f in *.flac; do
    ffmpeg -i "./$f" -acodec alac "./${f%.flac}.m4a"
  done
} # }}}

# Add folder to $PATH if it doesn't exist in it
#   see: http://superuser.com/questions/39751/add-directory-to-path-if-its-not-already-there
addpath() { # {{{
  if [ -d "${1}" ] && [[ ":$PATH:" != *":${1}:"* ]]; then
    PATH="${PATH:+"$PATH:"}$1"
  fi
} # }}}

# Find largest directories or files in current folder
maxs() { # {{{
  numbers=10
  type='d'
  re='^[0-9]+$'
  if [ $# -eq 0 ]; then
    numbers=10
    type='d'
  elif [ $# -eq 1 ]; then
    if [ "$1" = "-h" ]; then
      echo "maxs [-fdh] [NUMBER]"
    fi

    if ! [[ "${1}" =~ $re ]]; then
      echo "error: Not a number: ${1}" >&2
      return 1
    fi
    numbers="${1}"
    type='d'
  else
    if [ "${1}" = "-f" ]; then
      type='f'
    elif [ "${1}" = "-d" ]; then
      type='d'
    else
      echo "error: Wrong option: ${1}" >&2
      return 1
    fi

    if ! [[ "${2}" =~ $re ]]; then
      echo "error: Not a number: ${2}" >&2
      return 1
    fi
    numbers="${2}"
  fi

  find . -type "$type" -print0 | xargs -0 du | sort -n | tail -"$numbers" | cut -f2 | xargs -I{} du -sh {}
} # }}}

# Check if running in WSL
is_running_in_wsl() { # {{{
  if [ $(uname -r | sed -n 's/.*\( *Microsoft *\).*/\1/ip') ]; then
    echo "1"
  else
    echo "0"
  fi
} # }}}

# Git {{{
# https://polothy.github.io/post/2019-08-19-fzf-git-checkout/
fzf-git-branch() { # {{{
  git rev-parse HEAD >/dev/null 2>&1 || return

  git branch --color=always --all --sort=-committerdate |
    grep -v HEAD |
    fzf --height 50% --ansi --no-multi --preview-window right:65% \
      --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})' |
    sed 's/^\*\?\s\+//'      
} # }}}

fzf-git-checkout() { # {{{
  git rev-parse HEAD >/dev/null 2>&1 || return

  local current_branch
  current_branch=$(git branch --show-current)

  if [ -n "$(git status -s)" ]; then
    echo -n 'The working directory is dirty, stash before checkout? [YES|no] '
    read -r yn

    case $yn in
      "" | yes | YES | Yes | y | Y) git stash -u || return 1 ;;
      *) ;;
    esac
  fi

  local branch

  branch=$(fzf-git-branch)
  if [[ "$branch" = "" ]]; then
    echo "No branch selected."
    return
  fi
  
  echo -n "Checkout specific commit? [yes|NO] "
  read -r yn

  local get_commit=0
  case $yn in
    yes | YES | Yes | y | Y) get_commit=1;;
    *) ;;
  esac

  local commit=""
  if [ $get_commit = 1 ]; then
    commit=$(git log "$branch" --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" | fzf | cut -d' ' -f 2)
  fi

  if [[ "$commit" = "" ]]; then
    commit="$branch"
  fi

  if [ "$commit" = "$current_branch" ]; then
    return
  fi

  # If branch name starts with 'remotes/' then it is a remote branch. By
  # using --track and a remote branch name, it is the same as:
  # git checkout -b branchName --track origin/branchName
  if [[ "$commit" = 'remotes/'* ]]; then
    git checkout --track $commit
  else
    git checkout $commit
  fi
} # }}}

# https://gist.github.com/junegunn/f4fca918e937e6bf5bad
git-fuzzy-diff() { # {{{
  local PREVIEW_PAGER="less --tabs=4 -Rc"

  local REVISION="${@[1]}"
  if [ "$REVISION" = '.' ]; then
    REVISION='HEAD'
  fi

  # Don't just diff the selected file alone, get related files first using
  # '--name-status -R' in order to include moves and renames in the diff.
  # See for reference: https://stackoverflow.com/q/71268388/3018229
  local PREVIEW_COMMAND='git diff --color=always '$REVISION' -- \
		$(echo $(git diff --name-status -R '$@' | grep {}) | cut -d" " -f 2-) \
		| '$PREVIEW_PAGER

  git diff --submodule --word-diff --name-only "$@" |
    fzf --exit-0 --preview "${PREVIEW_COMMAND}" \
      --preview-window=top:85%
} # }}}

git-fuzzy-log() { # {{{
  PREVIEW_COMMAND='f() {
		set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}")
		[ $# -eq 0 ] || (
			git show --no-patch --color=always $1
			echo
			git show --stat --format="" --color=always $1 |
			while read line; do
				tput dim
				echo " $line" | sed "s/\x1B\[m/\x1B\[2m/g"
				tput sgr0
			done |
			tac | sed "1 a \ " | tac
		)
	}; f {}'

  git log --graph --color=always --format="%C(auto)%h %s%d " |\
    fzf --no-sort --tiebreak=index \
      --preview "${PREVIEW_COMMAND}" --preview-window=top:15,hidden |\
    sed 's/^[^[:alnum:]]*//' | awk '{ print $1 }'
} # }}}
# }}}

# using ripgrep combined with preview
# find-in-file - usage: fif <searchTerm>
fif() { # {{{
  if [ ! "$#" -gt 0 ]; then
    echo "Need a string to search for!"
    return 1
  fi
  rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
} # }}}

# Github {{{
get_latest_release() {
  curl --silent "https://api.github.com/repos/$1/releases/latest" | # Get latest release from GitHub api
    grep '"tag_name":' |                                            # Get tag line
    sed -E 's/.*"([^"]+)".*/\1/'                                    # Pluck JSON value
}
#}}}

# Python {{{
function _pip() {
  if check_command pip_search; then
    if [ $1 = "search" ]; then
      pip_search "$2"
    else
      pip "$@"
    fi
  else
    pip "$@"
  fi

}

function _pip3() {
  if check_command pip_search; then
    if [ $1 = "search" ]; then
      pip_search "$2"
    else
      pip3 "$@"
    fi
  else
    pip3 "$@"
  fi

}
#}}}

# Docker {{{
docker-fuzzy-image-ls() {
  local cid
  cid=$(docker image ls --format '{{.ID | printf "%-15s"}} {{.Repository | printf "%-50.50s"}}\t{{.Tag | printf "%-20.20s"}}\t{{.Size}}' |\
    fzf --no-sort --tiebreak=index \
        --preview 'docker image inspect {1}' --preview-window=top:15,hidden \
        --preview-label='image details')

  if [ -n "$cid" ]; then
    if [ "$1" = '-t' ]; then
      echo "$cid" | awk '{ print $2":"$3 }'
    else
      echo "$cid" | awk '{ print $1 }'
    fi
  fi
}

docker-fuzzy-container-ls() {
  local format="--format '{{.ID | printf \"%-15s\"}} {{.Names | printf \"%-40.40s\"}}\t{{.Status | printf \"%-16.16s\"}} {{.Image}}'"
  local arguments
  arguments="container ls $format"
  if [ -n "$1" ]; then
    arguments="container ls $1 $format"
  fi
  local command="docker $arguments"

  eval "$command" |\
    fzf --no-sort --tiebreak=index \
        --preview 'docker container inspect {1}' --preview-window=top:15,hidden \
        --preview-label='container details' |\
    cut -d ' ' -f 1
}

docker-get-pid-by-container-id() {
  local container_id
  container_id=$(docker-fuzzy-container-ls)
  docker inspect --format '{{.State.Pid}}' "$container_id"
}

docker-fuzzy-network-ls() {
  docker network ls --format '{{.ID | printf "%-15s"}} {{.Name | printf "%-20.20s"}}\t{{.Driver}}\t{{.Scope}}' |\
    fzf --no-sort --tiebreak=index \
        --preview 'docker network inspect {1}' --preview-window=top:15,hidden \
        --preview-label='network details' |\
    cut -d ' ' -f 1
}

docker-veth-ls() {
  if ! check_command docker; then
    return
  fi

  for container in $(docker ps -q); do
    local container_name=
    container_name=$(docker ps --format '{{.Names}}' -f "id=$container")
    local iflink=
    iflink=$(docker exec -it "$container" cat /sys/class/net/eth0/iflink)
    iflink=$(echo "$iflink" | tr -d '\r')
    local veth=
    veth=$(grep -l "$iflink" /sys/class/net/veth*/ifindex)
    veth=$(echo "$veth" | sed -e 's;^.*net/\(.*\)/ifindex$;\1;')
    echo "$container : $veth : $container_name"
done
}
#}}}

# Select a docker container to execute command
function de() { # {{{
  local cid
  cid=$(docker-fuzzy-container-ls)

  [ -n "$cid" ] && docker exec "$cid" "$@"
} # }}}
# Select a docker container to start and attach to
function da() { # {{{
  local cid
  cid=$(docker-fuzzy-container-ls -a)

  [ -n "$cid" ] && docker start "$cid" && docker attach "$cid"
} # }}}
# Select a running docker container to stop
function ds() { # {{{
  local cid
  cid=$(docker-fuzzy-container-ls)

  [ -n "$cid" ] && docker stop "$cid"
} # }}}
# Select docker containers to remove
function _drm() { # {{{
  local cid
  cid=$(docker-fuzzy-container-ls -a)
  [ -n "$cid" ] && docker rm "$cid"
} # }}}
# Select a docker image or images to remove
function _drmi() { # {{{
  local cid
  cid=$(docker-fuzzy-image-ls -t)
  [ -n "$cid" ] && docker rmi "$cid"
} # }}}

function _docker_compose_project() { # {{{
  local cli_project_name
  local project_name
  local docker_compose_command

  cli_project_name=$(printf "%s\n" "$@" | grep -n '\-p\|--project-name')
  if [ -z "$cli_project_name" ]; then
    if [ -e .compose_project ]; then
      project_name=$(grep 'COMPOSE_PROJECT_NAME' .compose_project|cut -d'=' -f2) 
    fi
  fi

  docker_compose_command='docker compose'
  if docker compose version >/dev/null 2>&1  && check_command docker-compose; then
    if check_command docker-compose; then
      docker_compose_command='docker-compose'
    else
      echo 'docker compose must be installed.'
      return 1
    fi
  fi

  if [ -n "$project_name" ] && [ -z "$cli_project_name" ]; then
    "$docker_compose_command" --project-name "$project_name" "$@"
  else
    "$docker_compose_command" "$@"
  fi
} # }}}

function _docker_compose_project_dir() { # {{{
  if ! check_command docker; then
    echo 'docker is not found, please install docker first.'
    return 1
  fi

  if ! check_command jq; then
    echo 'jq is not found, please install jq first.'
    return 1
  fi

  if ! check_command fzf; then
    echo 'fzf is not found, please install fzf first.'
    return 1
  fi

  local selection
  selection=$(docker compose ls -q | fzf)

  local project_path
  project_path=$(docker compose ls --filter "name=$selection" --format json | jq -r '.[].ConfigFiles')
  dirname "$project_path"
} # }}}

function _docker_compose_change_dir_to_project() { # {{{
  cd "$(_docker_compose_project_dir)" || return 1
} # }}}

function _docker_images_group_by_id() { # {{{
  local lines
  IFS=$'\n' lines=( $(docker images --format '{{.ID}}' | sort | uniq) )
  for id in "${lines[@]}"; do
    last_id=''
    images=( $(docker images --format '{{.ID}} {{.Repository}}:{{.Tag}}' | grep "${id}") )
    for image in "${images[@]}"; do
      current_id=$(echo "$image" | sed -n -e 's/^\(.*\)\s\(.*\)$/\1/p')
      name=$(echo "$image" | sed -n -e 's/^\(.*\)\s\(.*\)$/\2/p')
      suffix=''

      if docker container ls --format '{{.Image}}' | grep -q "$name"; then
        suffix=" (${BOLD_YELLOW}running${NC})"
      fi

      if [ "$last_id" != "$current_id" ]; then
        echo "${BOLD_GREEN}$id${NC} - $name$suffix"
      else
        echo "               $name$suffix"
      fi

      last_id="$id"
    done
  done
} # }}}

function _docker_images_group_by_name() { # {{{
  local lines
  IFS=$'\n' lines=( $(docker images --format '{{.Repository}}:{{.Tag}}' | sort | uniq) )
  local max_name_length
  for name in "${lines[@]}"; do
    len="${#name}"
    if [ "$len" -gt "$max_name_length" ]; then
      max_name_length="$len"
    fi
  done

  local previous_image_name_without_tag
  IFS=$'\n' lines=( $(docker images --format '{{.Repository}}' | sort | uniq) )
  for name in "${lines[@]}"; do
    last_id=''
    images=( $(docker images --format '{{.ID}} {{.Repository}}:{{.Tag}}' | grep "${name}") )
    for image in "${images[@]}"; do
      current_id=$(echo "$image" | sed -n -e 's/^\(.*\)\s\(.*\)$/\1/p')
      name_with_tag=$(echo "$image" | sed -n -e 's/^\(.*\)\s\(.*\)$/\2/p')
      name_without_tag=${name_with_tag%:*}
      if [ ! "$previous_image_name_without_tag" = "$name_without_tag" ]; then
        printf "\e[1;2m%${max_name_length}s\e[m\n" "-" | tr ' ' '-'
      fi
      suffix=''

      if docker container ls --format '{{.Image}}' | grep -q "$name_with_tag"; then
        suffix="(${BOLD_YELLOW}running${NC})"
      fi

      if [ "$last_id" != "$current_id" ]; then
        printf "%${max_name_length}s %12b %b\n" "$name_with_tag" "${BOLD_GREEN}$current_id${NC}" "$suffix"
      else
        printf "%${max_name_length}s %12s %b\n" "$name_with_tag" " " "$suffix"
      fi

      last_id="$current_id"
      previous_image_name_without_tag="$name_without_tag"
    done
  done
} # }}}

function _docker_search_tags() { # {{{
  if ! check_command jq; then
    echo 'jq is not found, please install jq first.'
    return
  fi
  if ! check_command wget; then
    echo 'wget is not found, please install wget first.'
    return
  fi

  if [ -z "$1" ]; then
    echo 'Please input search keyword.'
    return
  fi

  local namespace
  local repo 

  if echo "$1" | grep -q '/'; then
    namespace=$(echo "$1" | cut -d'/' -f1)
    repo=$(echo "$1" | cut -d'/' -f2)
  else
    namespace='library'
    repo="$1"
  fi

  wget -q -O - "https://hub.docker.com/v2/namespaces/$namespace/repositories/$repo/tags"|jq -r '.results[].name' 
} # }}}

function _docker_pull_tags() { # {{{
  if ! check_command fzf; then
    echo 'fzf is not found, please install fzf first.'
    return
  fi

  _docker_search_tags "$1" | fzf | xargs -I{} docker pull "$1:{}"
} # }}}

function _docker_run_in_shell() { # {{{
  if ! check_command fzf; then
    echo 'fzf is not found, please install fzf first.'
    return
  fi

  docker images --format '{{.Repository}}:{{.Tag}}' | fzf | xargs docker run --rm -i -t --entrypoint=sh
} # }}}

function _mvn_setting_switch() { # {{{
  if [ ! -d "$HOME"/.m2 ]; then
    return
  fi
  local settings
  settings=$(find "$HOME"/.m2/settings*.xml | fzf)
  [ -n "$settings" ] && mvn -s "$settings" "$@"
} # }}}

function _mvnd_setting_switch() { # {{{
  if [ ! -d "$HOME"/.m2 ]; then
    return
  fi
  local settings
  settings=$(find "$HOME"/.m2/settings*.xml | fzf)
  [ -n "$settings" ] && mvnd -s "$settings" "$@"
} # }}}

# GPG Preset Passphrase {{{
function gpg_agent_preset()
{
  local gpg_passphrase="$1"
  # authorize preset mechanism, in our context agent is not loaded yet.
  # echo allow-preset-passphrase  >> ~/.gnupg/gpg-agent.conf

  # this will start the agent ang give use keygripID
  local keygrip
  keygrip=( $(gpg-connect-agent -q 'keyinfo --list' /bye | awk '/KEYINFO/ { print $3 }') )

  local k
  for k in "${keygrip[@]}"
  do
    echo "$gpg_passphrase"  | /usr/lib/gnupg/gpg-preset-passphrase --preset "$k"
  done
} # }}}

# https://github.com/ardnew/bash-busy/blob/main/busy.bash
# Usage: busy [delay] <prompt> <expression>
function busy() { # {{{
	# Define the animation frames in-order.
	#local -a frame=( '/' '-' '\' '|' )
	local -a frame=( ⠋ ⠙ ⠹ ⠸ ⠼ ⠴ ⠦ ⠧ ⠇ ⠏ )
	
	local delay='0.1s' # Animated frame duration
	local prompt       # Message displayed after frame animation

	# Test if first argument appears to be a sleep(1) duration.
	local pat='^([0-9](\.[0-9]*)?|[0-9]*\.[0-9]{1,})[smhd]?$'
	if [[ ${#} -gt 0 ]] && [[ "${1}" =~ ${pat} ]]; then
		delay=${1}
		prompt=${2}
		shift
		shift
	else
		prompt=${1}
		shift
	fi
	
	# Find the widest frame in the animation.
	local wide=0
	for s in "${frame[@]}"; do 
		[[ ${#s} -gt ${wide} ]] && wide=${#s}
	done

	local n=0
	printf ' %*s %s\r' ${wide} '' "${prompt}"
	while ! eval -- "${*}"; do
		printf ' %*s \r' ${wide} "${frame[((n=++n%${#frame[@]}))]}"
		sleep "${delay}"
	done
	# Clear the animation frame and prompt
	printf ' %*s %*s\r' ${wide} '' ${#prompt} ''
} # }}}

# {{{ Java
function link_jdk_version_to_latest_installed_dir() {
  local jdk_version="$1"
  local jdk_installed
  jdk_installed="$(/usr/bin/ls -d "$SDKMAN_CANDIDATES_DIR/java/$jdk_version"*tem|head -1)"
  if [ -n "$jdk_installed" ] && [ -n "$jdk_version" ]; then
    ln -sfnv "$jdk_installed" "$SDKMAN_CANDIDATES_DIR/java/$jdk_version"
  fi
}

function link_jdks() {
  if [ -e "$SDKMAN_CANDIDATES_DIR/java" ]; then
    link_jdk_version_to_latest_installed_dir 8
    link_jdk_version_to_latest_installed_dir 11
    link_jdk_version_to_latest_installed_dir 17
    link_jdk_version_to_latest_installed_dir 21
  fi
}
# }}}

# vim: foldmethod=marker :
