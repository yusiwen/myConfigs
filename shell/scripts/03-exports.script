#!/usr/bin/env bash

# .local/bin {{{
# re-check if '$HOME/.local/bin' exists and is in $PATH
if [ ! -d "$HOME/.local/bin" ]; then
  mkdir -p "$HOME"/.local/bin
fi
if [ -d "$HOME/.local/bin" ] && [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
  PATH="$HOME/.local/bin:$PATH"
  export PATH
fi
# }}}

# {{{ NeoVim
export XDG_CONFIG_HOME=$HOME/.config
mkdir -p "$XDG_CONFIG_HOME"
export XDG_CACHE_HOME=$HOME/.cache
mkdir -p "$XDG_CACHE_HOME"
export XDG_DATA_HOME=$HOME/.local/share
mkdir -p "$XDG_DATA_HOME"
#}}}

# {{{ Oracle instant client
if [ -z "$ORACLE_HOME" ] || [ ! -d "$ORACLE_HOME" ]; then
  CLIENT_INSTALLATION_PATH="/opt/instantclient"
  if [ -d "$CLIENT_INSTALLATION_PATH" ]; then
    ORACLE_HOME=$CLIENT_INSTALLATION_PATH
    # truncate trailing '/'
    ORACLE_HOME=$(printf '%s' "${ORACLE_HOME%/}")
    export ORACLE_HOME
    export ORACLE_BASE=$CLIENT_INSTALLATION_PATH
    export PATH=$PATH:$ORACLE_HOME:$ORACLE_HOME/sdk
    export TNS_ADMIN=$ORACLE_HOME/network/admin
    export NLS_LANG=AMERICAN_AMERICA.UTF8
    # On linux,
    #   for 'sqlplus', 'libaio1' must be installed;
    #   for 'proc', 'libclntsh.so.XX.1' must be installed.
    # NOTE: On Ubuntu, 'LD_LIBRARY_PATH' can't be set in .profile,
    #   it can only be set in '/etc/ld.so.conf.d/XXX.conf' and run 'ldconfig'
    if [ -z "$LD_LIBRARY_PATH" ]; then
      export LD_LIBRARY_PATH=$ORACLE_HOME
    else
      export LD_LIBRARY_PATH=$ORACLE_HOME:$LD_LIBRARY_PATH
    fi

    if [ "$OS" = 'Darwin' ]; then
      export DYLD_LIBRARY_PATH=$ORACLE_HOME
    fi
  fi
fi
#}}}

# {{{ MySQL Connector
MYSQL_CONNECTOR_INST_PATH="/opt/mysql"
if [ -d "$MYSQL_CONNECTOR_INST_PATH" ]; then
  MYSQL_CONNECTOR=$(/bin/ls -dr $MYSQL_CONNECTOR_INST_PATH/mysql-connector*/ 2>/dev/null | head -1)
  if [ -n "$MYSQL_CONNECTOR" ]; then
    # truncate trailing '/'
    MYSQL_CONNECTOR=$(printf '%s' "${MYSQL_CONNECTOR%/}")
    export MYSQL_CONNECTOR
    export PATH=$PATH:$MYSQL_CONNECTOR/bin
    # NOTE: On Ubuntu, 'LD_LIBRARY_PATH' can't be set in .profile,
    #   it can only be set in '/etc/ld.so.conf.d/XXX.conf' and run 'ldconfig'
    if [ -z "$LD_LIBRARY_PATH" ]; then
      export LD_LIBRARY_PATH=$MYSQL_CONNECTOR/lib
    else
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MYSQL_CONNECTOR/lib
    fi
  fi
fi
#}}}

# {{{ Java
if [ -z "$JAVA_HOME" ] || [ ! -d "$JAVA_HOME" ]; then
  if [ "$OS" = 'Darwin' ]; then
    # MacOS
    JAVA_HOME=$(/usr/libexec/java_home)
  else
    # Linux
    # find newest Java SDK version under /opt/java
    JDK_INSTALLATION_PATH='/opt/java'
    if [ -d "$JDK_INSTALLATION_PATH" ]; then
      # select the newest version of JDK to be JAVA_HOME
      JAVA_NAME=$(/bin/ls -dr $JDK_INSTALLATION_PATH/jdk*/ 2>/dev/null| head -1)
      # set JAVA_HOME (truncated trailing '/')
      JAVA_HOME=$(printf '%s' "${JAVA_NAME%/}")
    else
      JAVA_HOME=
    fi
  fi

  if [ -n "$JAVA_HOME" ]; then
    export JAVA_HOME
    export JDK_HOME=$JAVA_HOME
    export PATH=$JAVA_HOME/bin:$PATH
  fi
fi

if [ -z "$M2_HOME" ] || [ ! -d "$M2_HOME" ]; then
  MVN_INSTALLATION_PATH="/opt/maven"
  if [ ! -d "$MVN_INSTALLATION_PATH" ]; then
    MVN_INSTALLATION_PATH="$HOME/maven"
  fi
  if [ -d "$MVN_INSTALLATION_PATH" ]; then
    MVN_NAME=$(/bin/ls -dr "$MVN_INSTALLATION_PATH"/*-maven-*/ 2>/dev/null | head -1)
    # set M2_HOME (truncated trailing '/')
    M2_HOME=$(printf '%s' "${MVN_NAME%/}")
    if [ -n "$M2_HOME" ]; then
      export M2_HOME
      export M2=$M2_HOME/bin
      export MAVEN_OPTS="-Xms64m -Xmx256m"
      export PATH=$PATH:$M2
    fi

    if [ -d "$MVN_INSTALLATION_PATH/repository" ]; then
      export M2_REPO=$MVN_INSTALLATION_PATH/repository
    fi
  fi
else
  MAVEN_OPTS="-Xms64m -Xmx256m"
  MAVEN_ARGS="-B"
  export MAVEN_OPTS
  export MAVEN_ARGS
fi

if [ -z "$CONFLUENT_HOME" ] || [ ! -d "$CONFLUENT_HOME" ]; then
  if [ -d /opt/confluent ]; then
    export CONFLUENT_HOME=/opt/confluent
    export PATH=$PATH:$CONFLUENT_HOME/bin
  elif [ -d "$HOME/confluent" ]; then
    export CONFLUENT_HOME=$HOME/confluent
    export PATH=$PATH:$CONFLUENT_HOME/bin
  fi
fi
#}}}

# {{{ Ruby
if command -v ruby &>/dev/null && command -v gem &>/dev/null; then
  GEM_HOME=$(ruby -e 'puts Gem.user_dir')
  export GEM_HOME
  export GEM_PATH=$GEM_HOME
  PATH="$GEM_HOME/bin:$PATH"
  export PATH
fi
#}}}

# {{{ GoLang
if [ -e /usr/local/go/bin/go ] || [ -e /opt/go/bin/go ] || [ -e "$HOME"/.local/go/bin/go ]; then
  if [ "$OS" = 'Darwin' ]; then
    GOROOT=$(brew --prefix golang)/libexec
    export GOROOT
  else
    GOROOT=/usr/local/go
    if [ ! -e "$GOROOT" ]; then
      if [ -e "/opt/go/bin/go" ]; then
        GOROOT=/opt/go
      elif [ -e "$HOME"/.local/go/bin/go ]; then
        GOROOT="$HOME"/.local/go
      fi
    else
      GOROOT=
    fi
    export GOROOT
  fi
  export GOPATH=$HOME/.gopackages
  mkdir -p "$GOPATH"
  export GO111MODULE=on
  export GOPRIVATE=git.yusiwen.cn
  export GOPROXY=https://goproxy.cn,direct
  PATH="$PATH:$GOROOT/bin:$GOPATH/bin"
  export PATH
fi
#}}}

# {{{ Node.js with th/n
if [ -d "$HOME"/.n ]; then
  N_PREFIX="$HOME/.n"
  export N_PREFIX
  PATH="$PATH:$N_PREFIX/bin"
  export PATH
fi
# }}}

# {{{ Ansible
if command -v ansible &>/dev/null; then
  ANSIBLE_INVENTORY=$HOME/git/myAnsible/etc/ansible/hosts
  export ANSIBLE_INVENTORY
fi
#}}}

# {{{ Rust
if [ -e "$HOME/.cargo/env" ]; then
  source "$HOME/.cargo/env"
fi
#}}}

# {{{ Python
export WORKON_HOME=$HOME/venv
if command -v python2 &>/dev/null; then
  PYTHON_HOST_PROG=$(which python2)
  export PYTHON_HOST_PROG
fi
if command -v python3 &>/dev/null; then
  PYTHON3_HOST_PROG=$(which python3)
  export PYTHON3_HOST_PROG
fi
#}}}

# {{{ Hadoop & Yarn & Hive & Spark
if [ -z "$HADOOP_HOME" ] || [ ! -d "$HADOOP_HOME" ]; then 
  if [ -d /opt/hadoop ]; then
    HADOOP_HOME=/opt/hadoop
    export HADOOP_HOME

    export HADOOP_MAPRED_HOME=$HADOOP_HOME
    export HADOOP_COMMON_HOME=$HADOOP_HOME

    export HADOOP_HDFS_HOME=$HADOOP_HOME
    export YARN_HOME=$HADOOP_HOME
    export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HADOOP_COMMON_LIB_NATIVE_DIR
    export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin
    export HADOOP_INSTALL=$HADOOP_HOME

    export HADOOP_LOG_DIR=$HOME/.cache/hadoop/logs
    export YARN_LOG_DIR=$HOME/.cache/yarn/logs
  fi
fi

if [ -z "$HIVE_HOME" ] || [ ! -d "$HIVE_HOME" ]; then
  if [ -d /opt/hive ]; then
    HIVE_HOME=/opt/hive
    export HIVE_HOME
    PATH=$PATH:$HIVE_HOME/bin
    export PATH
  fi
fi
# }}}

# {{{ Containerd CNI Plugins
if [ -d /opt/cni/bin ]; then
  export CNI_PATH=/opt/cni/bin
fi
# }}}

# {{{ Montiors
# Set $DISPLAY on WSL, needed by VcXsrv
if [ ! -z "$(uname -a | grep 'microsoft')" ]; then
  export DISPLAY="`sed -n 's/nameserver //p' /etc/resolv.conf`:0"
fi

if [ ! -z "$DISPLAY" ]; then
  MONITOR=
  if [ "$HOSTNAME" = 'deskmini-server' ]; then
    MONITOR='HDMI-A-0'
  elif [ "$HOSTNAME" = 'matebook-deepin' ]; then
    MONITOR='eDP'
  else
    if command -v xrandr &>/dev/null; then
      MONITOR="$(xrandr -q | grep ' connected ' | head -n 1 | cut -d ' ' -f 1)"
    fi
  fi
  export MONITOR
fi
#}}}

# {{{ Misc
# set TERM to 'screen-256color' in tmux
# if [ -z "$TMUX" ]; then
#   TERM=xterm-256color
# else
#   TERM=screen-256color
# fi
# export TERM
# TERMINAL used in i3-sensible-terminal
if type alacritty >/dev/null 2>&1; then
  TERMINAL=alacritty
  export TERMINAL
elif type urxvtc >/dev/null 2>&1; then
  TERMINAL=urxvtc
  export TERMINAL
else
  TERMINAL=
  export TERMINAL
fi

if [ -z "$EDITOR" ]; then
  if type nvim >/dev/null 2>&1; then
    export EDITOR=nvim
  elif type vim >/dev/null 2>&1; then
    export EDITOR=vim
  else
    export EDITOR=nano
  fi
  export GIT_EDITOR="${EDITOR}"
fi

if [ -z "$HOSTNAME" ]; then
  HOSTNAME=$(hostname)
  export HOSTNAME
fi

# i3wm color scheme, see i3/_config
if [ -z "$I3_COLOR_THEME" ]; then
  I3_COLOR_THEME=dark
  export I3_COLOR_THEME
fi

# Add $HOME/bin to $PATH if exists && not added
if [ -d "$HOME/bin" ] && [[ ":$PATH:" != *":$HOME/bin:"* ]]; then
  PATH="$HOME/bin${PATH:+:"$PATH"}"
  export PATH
fi

# Add $HOME/bin to $PATH if exists && not added
if [ -d "$HOME/.local/bin" ] && [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
  PATH="$HOME/.local/bin${PATH:+:"$PATH"}"
  export PATH
fi

# CMake
if [ -d "/opt/cmake" ] && [[ ":$PATH:" != *":/opt/cmake:"* ]]; then
  PATH="/opt/cmake/bin${PATH:+:"$PATH"}"
  export PATH
fi

# Homebrew's sbin path
if [ -d "/usr/local/sbin" ] && [[ ":$PATH:" != *":/usr/local/sbin:"* ]]; then
  PATH="/usr/local/sbin:${PATH:+:"$PATH"}"
  export PATH
fi

# Use mirror for Homebrew-bottles
if [ "$OS" = 'Darwin' ]; then
  export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles
fi

GPG_TTY=$(tty)
export GPG_TTY

# fzf {{{
_fzf_default_opts=(
  --reverse
  --ansi
  --height 80%
  --bind alt-j:preview-down
  --bind alt-k:preview-up
  --bind alt-f:preview-page-down
  --bind alt-b:preview-page-up
  --bind pgdn:preview-page-down
  --bind pgup:preview-page-up
  --bind "ctrl-/:toggle-preview"
)

FZF_DEFAULT_OPTS="${_fzf_default_opts[*]}"
export FZF_DEFAULT_OPTS
# }}}

# Export host IP within WSL
if [ "$(is_running_in_wsl)" = '1' ]; then
  WSL_HOST_IP=$(grep nameserver < /etc/resolv.conf | awk '{ print $2 }')
  export WSL_HOST_IP
  # Set https proxy for git
  git config --global http.https://github.com.proxy socks5://"$WSL_HOST_IP":7890
fi

# Support symbolic link in git bash on windows
if [ "$OS" = 'Windows_NT' ]; then
  export MSYS=winsymlinks:nativestrict
fi
#}}}

# Source any extended scrips stored in $HOME/.exports/ folder
if [ -d "$HOME"/.exports ]; then
  for script in "$HOME"/.exports/*; do
    if [ -e "$script" ]; then
      # shellcheck source=/dev/null
      source "$script"
    fi
  done
fi

# vim: foldmethod=marker :
