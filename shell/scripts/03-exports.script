#!/bin/bash

#{{{ Distribution Information
# Determine OS platform
OS=$(uname)
export OS
# If Linux, try to determine specific distribution
if [ "$OS" = 'Linux' ]; then
  # If available, use LSB to identify distribution
  if [ -f /etc/lsb-release ] || [ -d /etc/lsb-release.d ]; then
    DISTRO=$(lsb_release -i | cut -d: -f2 | sed s/'^\t'//)
  # Otherwise, use release info file
  else
    DISTRO=$(awk -F= '/^NAME/{print $2}' /etc/os-release | xargs | cut -d ' ' -f1)
  fi
  export DISTRO
fi
# For everything else (or if above failed), just use generic identifier
[ "$DISTRO" = '' ] && export DISTRO=$OS
#}}}

#{{{ NeoVim
export XDG_CONFIG_HOME=$HOME/.config
mkdir -p "$XDG_CONFIG_HOME"
export XDG_CACHE_HOME=$HOME/.cache
mkdir -p "$XDG_CACHE_HOME"
export XDG_DATA_HOME=$HOME/.local/share
mkdir -p "$XDG_DATA_HOME"

#}}}

#{{{ Oracle instant client
if [ -z "$ORACLE_HOME" ] || [ ! -d "$ORACLE_HOME" ]; then
  CLIENT_INSTALLATION_PATH="/opt/oracle"
  if [ -d "$CLIENT_INSTALLATION_PATH" ]; then
    ORACLE_HOME=$(/bin/ls -dr $CLIENT_INSTALLATION_PATH/instantclient*/ 2>/dev/null | head -1)
    if [ -n "$ORACLE_HOME" ]; then
      # truncate trailing '/'
      ORACLE_HOME=$(printf '%s' "${ORACLE_HOME%/}")
      export ORACLE_HOME
      export ORACLE_BASE=$CLIENT_INSTALLATION_PATH
      export PATH=$PATH:$ORACLE_HOME:$ORACLE_HOME/sdk
      export TNS_ADMIN=$ORACLE_HOME/network/admin
      export NLS_LANG=american_america.ZHS32GB18030
      # On linux,
      #   for 'sqlplus', 'libaio1' must be installed;
      #   for 'proc', 'libclntsh.so.XX.1' must be installed.
      # NOTE: On Ubuntu, 'LD_LIBRARY_PATH' can't be set in .profile,
      #   it can only be set in '/etc/ld.so.conf.d/XXX.conf' and run 'ldconfig'
      if [ -z "$LD_LIBRARY_PATH" ]; then
        export LD_LIBRARY_PATH=$ORACLE_HOME
      else
        export LD_LIBRARY_PATH=$ORACLE_HOME:$LD_LIBRARY_PATH
      fi

      if [ "$OS" = 'Darwin' ]; then
        export DYLD_LIBRARY_PATH=$ORACLE_HOME
      fi
    fi
  fi
fi
#}}}

#{{{ MySQL Connector
MYSQL_CONNECTOR_INST_PATH="/opt/mysql"
if [ -d "$MYSQL_CONNECTOR_INST_PATH" ]; then
  MYSQL_CONNECTOR=$(/bin/ls -dr $MYSQL_CONNECTOR_INST_PATH/mysql-connector*/ 2>/dev/null | head -1)
  if [ -n "$MYSQL_CONNECTOR" ]; then
    # truncate trailing '/'
    MYSQL_CONNECTOR=$(printf '%s' "${MYSQL_CONNECTOR%/}")
    export MYSQL_CONNECTOR
    export PATH=$PATH:$MYSQL_CONNECTOR/bin
    # NOTE: On Ubuntu, 'LD_LIBRARY_PATH' can't be set in .profile,
    #   it can only be set in '/etc/ld.so.conf.d/XXX.conf' and run 'ldconfig'
    if [ -z "$LD_LIBRARY_PATH" ]; then
      export LD_LIBRARY_PATH=$MYSQL_CONNECTOR/lib
    else
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MYSQL_CONNECTOR/lib
    fi
  fi
fi
#}}}

#{{{ Java
if [ -z "$JAVA_HOME" ] || [ ! -d "$JAVA_HOME" ]; then
  if [ "$OS" = 'Darwin' ]; then
    # MacOS
    JAVA_HOME=$(/usr/libexec/java_home)
  else
    # Linux
    # find newest Java SDK version under /opt/java
    JDK_INSTALLATION_PATH='/opt/java'
    if [ -d "$JDK_INSTALLATION_PATH" ]; then
      # select the newest version of JDK to be JAVA_HOME
      JAVA_NAME=$(/bin/ls -dr $JDK_INSTALLATION_PATH/j*/ 2>/dev/null| head -1)
      # set JAVA_HOME (truncated trailing '/')
      JAVA_HOME=$(printf '%s' "${JAVA_NAME%/}")
    else
      JAVA_HOME=
    fi
  fi

  if [ -n "$JAVA_HOME" ]; then
    export JAVA_HOME
    export JDK_HOME=$JAVA_HOME
    export PATH=$JAVA_HOME/bin:$PATH
  fi
fi

if [ -z "$M2_HOME" ] || [ ! -d "$M2_HOME" ]; then
  MVN_INSTALLATION_PATH="$HOME/maven"
  if [ -d "$MVN_INSTALLATION_PATH" ]; then
    MVN_NAME=$(/bin/ls -dr "$MVN_INSTALLATION_PATH"/*-maven-*/ 2>/dev/null | head -1)
    # set M2_HOME (truncated trailing '/')
    M2_HOME=$(printf '%s' "${MVN_NAME%/}")
    if [ -n "$M2_HOME" ]; then
      export M2_HOME
      export M2=$M2_HOME/bin
      export MAVEN_OPTS="-Xms64m -Xmx256m"
      export PATH=$PATH:$M2
    fi

    if [ -d "$MVN_INSTALLATION_PATH/repository" ]; then
      export M2_REPO=$MVN_INSTALLATION_PATH/repository
    fi
  fi
fi
#}}}

#{{{ Node.js
if [ -z "$NPM_PACKAGES" ] || [[ ":$PATH:" != *:"$NPM_PACKAGES":* ]]; then
  export NPM_PACKAGES="$HOME/.npm-packages"
  export NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"
  export PATH="$NPM_PACKAGES/bin:$PATH"
  # Unset manpath so we can inherit from /etc/manpath via the `manpath`
  # command
  unset MANPATH  # delete if you already modified MANPATH elsewhere in your config
  MANPATH="$NPM_PACKAGES/share/man:$(manpath)"
  export MANPATH
fi
#}}}

#{{{ Ruby
if command -v ruby &>/dev/null && command -v gem &>/dev/null; then
  GEM_HOME=$(ruby -e 'puts Gem.user_dir')
  export GEM_HOME
  export GEM_PATH=$GEM_HOME
  PATH="$GEM_HOME/bin:$PATH"
  export PATH
fi
#}}}

#{{{ GoLang
if [ -d "/usr/local/go" ]; then
  export GOROOT=/usr/local/go
  export GOPATH=$HOME/gopackage
  export GO111MODULE=on
  export GOPROXY=https://goproxy.io,direct
  PATH="$PATH:$GOROOT/bin:$GOPATH/bin"
  export PATH
fi
#}}}

#{{{ Python
# Add $HOME/.local/bin to $PATH if exists && not added
if [ -d "$HOME/.local/bin" ] && [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
  PATH="$HOME/.local/bin:$PATH"
  export PATH
fi
export WORKON_HOME=$HOME/venv
#}}}

#{{{ Misc
export TERM=xterm-256color
# TERMINAL used in i3-sensible-terminal
if type alacritty >/dev/null 2>&1; then
  TERMINAL=alacritty
  export TERMINAL
elif type urxvtc >/dev/null 2>&1; then
  TERMINAL=urxvtc
  export TERMINAL
else
  TERMINAL=
  export TERMINAL
fi

if [ -z "$EDITOR" ]; then
  if type nvim >/dev/null 2>&1; then
    export EDITOR=nvim
  elif type vim >/dev/null 2>&1; then
    export EDITOR=vim
  else
    export EDITOR=nano
  fi
  export GIT_EDITOR="${EDITOR}"
fi

if [ -z "$HOSTNAME" ]; then
  HOSTNAME=$(hostname)
  export HOSTNAME
fi

# i3wm color scheme, see i3/_config
if [ -z "$I3_COLOR_THEME" ]; then
  I3_COLOR_THEME=dark
  export I3_COLOR_THEME
fi

# Add $HOME/bin to $PATH if exists && not added
if [ -d "$HOME/bin" ] && [[ ":$PATH:" != *":$HOME/bin:"* ]]; then
  PATH="$HOME/bin${PATH:+:"$PATH"}"
  export PATH
fi

# Add $HOME/bin to $PATH if exists && not added
if [ -d "$HOME/.local/bin" ] && [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
  PATH="$HOME/.local/bin${PATH:+:"$PATH"}"
  export PATH
fi

# CMake
if [ -d "/opt/cmake" ] && [[ ":$PATH:" != *":/opt/cmake:"* ]]; then
  PATH="/opt/cmake/bin${PATH:+:"$PATH"}"
  export PATH
fi

# Homebrew's sbin path
if [ -d "/usr/local/sbin" ] && [[ ":$PATH:" != *":/usr/local/sbin:"* ]]; then
  PATH="/usr/local/sbin:${PATH:+:"$PATH"}"
  export PATH
fi

# Use mirror for Homebrew-bottles
if [ "$OS" = 'Darwin' ]; then
  export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles
fi
#}}}

# Source any extended scrips stored in $HOME/.exports/ folder
if [ -d "$HOME"/.exports ]; then
  for script in "$HOME"/.exports/*; do
    if [ -e "$script" ]; then
      # shellcheck source=/dev/null
      source "$script"
    fi
  done
fi
# vim: foldmethod=marker :
