#!/usr/bin/env zsh
#=== LOAD PREREQUISITES IF EXISTS =====================
if [ -e "$HOME/.zshrc.prerequisites" ]; then
  source "$HOME/.zshrc.prerequisites"
fi
#=== HELPER METHODS ===================================
function error() { print -P "%F{160}[ERROR] ---%f%b $1" >&2 && exit 1; }
function info() { print -P "%F{34}[INFO] ---%f%b $1"; }
#=== ZINIT ============================================
typeset -gAH ZINIT;
ZINIT[HOME_DIR]=$HOME/.local/share/zinit  ZPFX=$ZINIT[HOME_DIR]/polaris
ZINIT[BIN_DIR]=$ZINIT[HOME_DIR]/zinit.git ZINIT[OPTIMIZE_OUT_DISK_ACCESSES]=1
ZINIT[COMPLETIONS_DIR]=$ZINIT[HOME_DIR]/completions ZINIT[SNIPPETS_DIR]=$ZINIT[HOME_DIR]/snippets
ZINIT[ZCOMPDUMP_PATH]=$ZINIT[HOME_DIR]/zcompdump    ZINIT[PLUGINS_DIR]=$ZINIT[HOME_DIR]/plugins
ZI_REPO='zdharma-continuum'; GH_RAW_URL='https://raw.githubusercontent.com'
if [[ ! -e $ZINIT[BIN_DIR] ]]; then
  info 'Downloading Zinit' \
    && command git clone \
        --branch 'main' \
        https://github.com/$ZI_REPO/zinit \
        $ZINIT[BIN_DIR] \
    || error 'Unable to download zinit' \
    && info 'Installing Zinit' \
    && command chmod g-rwX $ZINIT[HOME_DIR] \
    && zcompile $ZINIT[BIN_DIR]/zinit.zsh \
    && info 'Successfully installed Zinit' \
    || error 'Unable to install Zinit'
fi
source $ZINIT[BIN_DIR]/zinit.zsh \
  && autoload -Uz _zinit \
  && (( ${+_comps} )) \
  && _comps[zinit]=_zinit
#####################
# PROMPT            #
#####################
if [ -e "$HOME/.zshrc.prompt" ]; then
  source $HOME/.zshrc.prompt
else
  source $HOME/myConfigs/shell/zshrc.zinit.p10k
fi
##########################
# OMZ Libs and Plugins   #
##########################
# IMPORTANT:
# Ohmyzsh plugins and libs are loaded first as some these sets some defaults which are required later on.
# Otherwise something will look messed up
# ie. some settings help zsh-autosuggestions to clear after tab completion
setopt promptsubst
# Explanation:
# 1. Loading tmux first, to prevent jumps when tmux is loaded after .zshrc
# 2. History plugin is loaded early (as it has some defaults) to prevent empty history stack for other plugins
zinit lucid for \
    atinit"
      ZSH_TMUX_FIXTERM=false
      ZSH_TMUX_AUTOSTART=false
      ZSH_TMUX_AUTOCONNECT=false" \
  OMZP::tmux \
  atinit"HIST_STAMPS=dd.mm.yyyy" \
  OMZL::history.zsh \

zinit wait lucid for \
    if'[[ "$(uname -o)" != "Msys" ]]' \
	OMZL::clipboard.zsh \
	OMZL::compfix.zsh \
	OMZL::completion.zsh \
	OMZL::correction.zsh \
    atload"
      alias ..='cd ..'
      alias ...='cd ../..'
      alias ....='cd ../../..'
      alias .....='cd ../../../..'" \
	OMZL::directories.zsh \
	OMZL::git.zsh \
	OMZL::grep.zsh \
	OMZL::key-bindings.zsh \
	OMZL::spectrum.zsh \
	OMZL::functions.zsh \
	OMZL::termsupport.zsh \
    atload"alias gcd='gco dev'" \
	OMZP::git \
  OMZP::z \
    wait'type fzf >/dev/null 2>&1' \
    if'[[ -d "$HOME"/.fzf ]]' \
	OMZP::fzf \
  OMZP::command-not-found \
    if'[[ "$(uname -o)" != "Msys" ]]' \
    if'type docker >/dev/null 2>&1' \
    as"completion" \
  https://raw.githubusercontent.com/docker/cli/master/contrib/completion/zsh/_docker \
    if'[[ "$(uname -o)" != "Msys" ]]' \
    if'type docker >/dev/null 2>&1 || type docker-compose >/dev/null 2>&1' \
    as"completion" \
  OMZP::docker-compose/_docker-compose \
    as"completion" \
  https://share.yusiwen.cn/public/_fvm \
  djui/alias-tips \
  hlissner/zsh-autopair \
  chriskempson/base16-shell
#####################
# PLUGINS           #
#####################
zinit wait lucid light-mode for \
    atinit"
      zstyle ':fzf-tab:*' switch-group '<' '>'" \
  Aloxaf/fzf-tab \
    atinit"
      ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
      ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=241'
      ZSH_AUTOSUGGEST_USE_ASYNC='true'" \
    atload"_zsh_autosuggest_start" \
  zsh-users/zsh-autosuggestions \
    atinit"
      typeset -gA FAST_HIGHLIGHT; FAST_HIGHLIGHT[git-cmsg-len]=100;
      zpcompinit; zpcdreplay" \
  zdharma-continuum/fast-syntax-highlighting \
    atpull'zinit creinstall -q .' \
    atinit"
      zstyle ':completion:*' completer _expand _complete _ignored _approximate
      zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
      zstyle ':completion:*' menu select=2
      zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
      zstyle ':completion:*:*:*:*:processes' command 'ps -u $USER -o pid,user,comm,cmd -w -w'
      zstyle ':completion:*:descriptions' format '-- %d --'
      zstyle ':completion:*:processes' command 'ps -au$USER'
      zstyle ':completion:complete:*:options' sort false
      zstyle ':fzf-tab:complete:_zlua:*' query-string input
      zstyle ':fzf-tab:complete:cd:*' extra-opts --preview=$extract'exa -1 --color=always ${~ctxt[hpre]}$in'
      zstyle ':fzf-tab:complete:kill:argument-rest' extra-opts --preview=$extract'ps --pid=$in[(w)1] -o cmd --no-headers -w -w' --preview-window=down:3:wrap" \
    blockf \
  zsh-users/zsh-completions \
    pick"zsh-lazyload.zsh" \
  qoomon/zsh-lazyload \
  unixorn/fzf-zsh-plugin \
    wait'type fzf>/dev/null 2>&1' \
  urbainvaes/fzf-marks \
    pick"zsh-autocomplete.plugin.zsh" \
  marlonrichert/zsh-autocomplete
#####################
# PROGRAMS          #
#####################
zinit wait lucid light-mode for \
    if'[[ "$(uname -o)" != "Msys" ]]' \
    as'command' \
    atinit'export N_PREFIX="$HOME/.n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"' \
    pick"**/n" \
  tj/n \
    from'gh-r' as'command' atinit'export PATH="$HOME/.yarn/bin:$PATH"' mv'yarn* -> yarn' pick"yarn/bin/yarn" bpick'*.tar.gz' \
  yarnpkg/yarn \
    from'gh-r' as'program' mv'fd* -> fd' pick'fd/fd' \
  @sharkdp/fd \
    from'gh-r' as'program' mv'bat* -> bat' pick'bat/bat' \
    atinit"export MANROFFOPT='-c'" \
  @sharkdp/bat \
  fdellwing/zsh-bat \
    from'gh-r' as'program' mv'lazygit* -> lazygit' \
  jesseduffield/lazygit \
    from'gh-r' as'program' pick'eza' \
    atload"
      alias la='eza --all --git --color=auto'
      alias ls='eza --git --color=auto'
      alias ll='eza --long --all --git --color=auto'
    " \
  eza-community/eza \
    from'gh-r' as'program' pick'**/delta' \
  dandavison/delta \
    from'gh-r' as'program' pick'zellij' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  zellij-org/zellij \
    from'gh-r' as'program' pick'k9s' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  derailed/k9s \
    from'gh-r' as'program' pick'stern' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  stern/stern \
    from'gh-r' as'program' pick'flux' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  fluxcd/flux2 \
    from'gh-r' as'program' mv'gdu* -> gdu' pick'gdu' \
  dundee/gdu \
    from'gh-r' as'program' pick'navi' \
  denisidoro/navi \
    from'gh-r' as'program' mv'yq* -> yq' pick'yq' \
  mikefarah/yq \
    from'gh-r' as'program' pick'**/dust' \
  bootandy/dust \
    from'gh-r' as'program' mv'docker-compose* -> docker-compose' pick'docker-compose' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
    if'type docker >/dev/null 2>&1' \
  docker/compose \
    from'gh-r' as'program' pick'dive' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
    if'type docker >/dev/null 2>&1' \
  wagoodman/dive \
    from'gh-r' as'program' pick'**/keadm/keadm' \
    bpick'keadm*' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  kubeedge/kubeedge \
    from'gh-r' as'program' mv'k0sctl* -> k0sctl' pick'k0sctl' \
  k0sproject/k0sctl \
    as"program" pick"$HOME/.sdkman" id-as'sdkman' run-atpull \
    atclone"wget 'https://get.sdkman.io/?rcupdate=false' -O scr.sh; SDKMAN_DIR=$HOME/.sdkman bash scr.sh" \
    atpull"SDKMAN_DIR=$HOME/.sdkman sdk selfupdate" \
    atinit"export SDKMAN_DIR=$HOME/.sdkman; source $HOME/.sdkman/bin/sdkman-init.sh" \
  zdharma-continuum/null

zinit wait light-mode lucid is-snippet for \
  $HOME/git/myConfigs/shell/scripts/00-environment.script \
  $HOME/git/myConfigs/shell/scripts/02-functions.script \
  $HOME/git/myConfigs/shell/scripts/03-programs.script \
  $HOME/git/myConfigs/shell/scripts/03-completions.script \
  $HOME/git/myConfigs/shell/scripts/04-keybindings.script \
  $HOME/git/myConfigs/shell/scripts/06-aliases.script \
  $HOME/git/myConfigs/shell/scripts/99-customize.script

if [ "$PROMPT_TYPE" = 'p10k' ]; then
  # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
  [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
fi

unset TMUX

## [Completion]
## Completion scripts setup. Remove the following line to uninstall
[[ -f /home/yusiwen/.config/.dart-cli-completion/zsh-config.zsh ]] && . /home/yusiwen/.config/.dart-cli-completion/zsh-config.zsh || true
## [/Completion]

