#!/bin/bash

# ███████╗███████╗██╗  ██╗██████╗  ██████╗
# ╚══███╔╝██╔════╝██║  ██║██╔══██╗██╔════╝
#   ███╔╝ ███████╗███████║██████╔╝██║
#  ███╔╝  ╚════██║██╔══██║██╔══██╗██║
# ███████╗███████║██║  ██║██║  ██║╚██████╗
# ╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝
#
# Zsh rc file
# http://git.io/vtVXR
# yusiwen@gmail.com

# Path to your oh-my-zsh configuration.
export ZSH=$HOME/.oh-my-zsh
export ZSH_CUSTOM="$ZSH/custom"

# Add $HOME/.local/bin to $PATH if exists and not added
# I usually install some apps, like 'kubectl', in $HOME/.local/bin
# for compdef to find the command, $PATH needs to be upgraded first
if [ -d "$HOME/.local/bin" ] && [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
  PATH="$HOME/.local/bin:$PATH"
  export PATH
fi

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME=""

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Set to this to use case-sensitive completion
CASE_SENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
DISABLE_AUTO_UPDATE="true"

# Uncomment to change how often before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want to disable command autocorrection
# DISABLE_CORRECTION="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
if [ "$(uname)" = 'Darwin' ]; then
  plugins=(brew golang virtualenv git git-flow svn mvn node npm yarn pip ruby rvm gem colored-man-pages colorize z docker docker-compose zsh-autosuggestions zsh-syntax-highlighting helm ansible)
else
  plugins=(golang virtualenv git git-flow svn mvn node npm yarn pip ruby rvm gem colored-man-pages colorize z docker docker-compose kubectl minikube zsh-autosuggestions zsh-syntax-highlighting helm ansible)
fi

ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=241"
ZSH_AUTOSUGGEST_USE_ASYNC="true"

# ZSH uses the KEYTIMEOUT parameter to determine how long to wait (in hundredths of a second)
# for additional characters in sequence. Default is 0.4 seconds.

# 10ms for key sequences
KEYTIMEOUT=1

source "$ZSH/oh-my-zsh.sh"

# Customize to your needs...
source "$HOME/myConfigs/shell/git-prompt.zsh"

if [ -z "$OS" ]; then
  export OS=$(uname)
fi

if [ "$OS" = 'Linux' ]; then
  if [ "$DISTRO" = 'Ubuntu' ]; then
    if [ -f /etc/zsh_command_not_found ]; then
      source /etc/zsh_command_not_found
    fi
  fi
fi

if [[ "$OS" != 'Darwin' ]]; then
  if [[ $(tty) =~ \/dev\/tty[0-9]* ]]; then
    if type fbterm >/dev/null 2>&1; then
      fbterm
    fi
  fi
fi

# Base16 Shell
if [[ -f "$HOME/.base16rc" ]]; then
  source $HOME/.base16rc
fi

# fzf
if [[ -f "$HOME/.fzf.zsh" ]]; then
  source ~/.fzf.zsh
fi

# Fix wrong permissions on WSL
if grep -q Microsoft /proc/version 2>/dev/null; then
  if [ "$(umask)" = '0000' ] || [ "$(umask)" = '000' ]; then
    umask 0022
  fi
fi

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Load all of my custom scripts
for script in $HOME/myConfigs/shell/scripts/*.script; do
  source "$script"
done

cd
