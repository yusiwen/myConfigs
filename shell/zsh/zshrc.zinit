#!/usr/bin/env zsh
zmodload zsh/zprof
#=== LOAD PREREQUISITES IF EXISTS =====================
if [ -e "$HOME/.zshrc.prerequisites" ]; then
  source "$HOME/.zshrc.prerequisites"
fi
#=== HELPER METHODS ===================================
function error() { print -P "%F{160}[ERROR] ---%f%b $1" >&2 && exit 1; }
function info() { print -P "%F{34}[INFO] ---%f%b $1"; }
#=== ZINIT ============================================
typeset -gAH ZINIT;
ZINIT[HOME_DIR]=$HOME/.local/share/zinit  ZPFX=$ZINIT[HOME_DIR]/polaris
ZINIT[BIN_DIR]=$ZINIT[HOME_DIR]/zinit.git ZINIT[OPTIMIZE_OUT_DISK_ACCESSES]=1
ZINIT[COMPLETIONS_DIR]=$ZINIT[HOME_DIR]/completions ZINIT[SNIPPETS_DIR]=$ZINIT[HOME_DIR]/snippets
ZINIT[ZCOMPDUMP_PATH]=$ZINIT[HOME_DIR]/zcompdump    ZINIT[PLUGINS_DIR]=$ZINIT[HOME_DIR]/plugins
ZI_REPO='zdharma-continuum'; GH_RAW_URL='https://raw.githubusercontent.com'
if [[ ! -e $ZINIT[BIN_DIR] ]]; then
  info 'Downloading Zinit' \
    && command git clone \
        --branch 'main' \
        https://github.com/$ZI_REPO/zinit \
        $ZINIT[BIN_DIR] \
    || error 'Unable to download zinit' \
    && info 'Installing Zinit' \
    && command chmod g-rwX $ZINIT[HOME_DIR] \
    && zcompile $ZINIT[BIN_DIR]/zinit.zsh \
    && info 'Successfully installed Zinit' \
    || error 'Unable to install Zinit'
fi
source $ZINIT[BIN_DIR]/zinit.zsh \
  && autoload -Uz _zinit \
  && (( ${+_comps} )) \
  && _comps[zinit]=_zinit
#####################
# PROMPT            #
#####################
if [ -e "$HOME/.zshrc.prompt" ]; then
  source $HOME/.zshrc.prompt
else
  source $HOME/myConfigs/shell/zsh/zshrc.zinit.p10k
fi
##########################
# OMZ Libs and Plugins   #
##########################
# IMPORTANT:
# Ohmyzsh plugins and libs are loaded first as some these sets some defaults which are required later on.
# Otherwise something will look messed up
# ie. some settings help zsh-autosuggestions to clear after tab completion
setopt promptsubst
# Explanation:
# 1. Loading tmux first, to prevent jumps when tmux is loaded after .zshrc
# 2. History plugin is loaded early (as it has some defaults) to prevent empty history stack for other plugins
zinit lucid for \
    atinit"
      ZSH_TMUX_FIXTERM=false
      ZSH_TMUX_AUTOSTART=false
      ZSH_TMUX_AUTOCONNECT=false" \
    if'type tmux >/dev/null 2>&1' \
  OMZP::tmux \
    atinit"HIST_STAMPS=dd.mm.yyyy" \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  OMZL::history.zsh

zinit wait lucid for \
    if'[[ "$(uname -o)" != "Msys" ]]' \
	OMZL::clipboard.zsh \
    if'[[ "$(uname -o)" != "Msys" ]]' \
	OMZL::compfix.zsh \
    if'[[ "$(uname -o)" != "Msys" ]]' \
	OMZL::completion.zsh \
    if'[[ "$(uname -o)" != "Msys" ]]' \
	OMZL::correction.zsh \
    atload"
      alias ..='cd ..'
      alias ...='cd ../..'
      alias ....='cd ../../..'
      alias .....='cd ../../../..'" \
    if'[[ "$(uname -o)" != "Msys" ]]' \
	OMZL::directories.zsh \
	OMZL::git.zsh \
	OMZL::grep.zsh \
	OMZL::key-bindings.zsh \
	OMZL::spectrum.zsh \
	OMZL::functions.zsh \
	OMZL::termsupport.zsh \
    atload"alias gcd='gco dev'" \
	OMZP::git \
  OMZP::z \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  OMZP::command-not-found \
    if'[[ "$(uname -o)" != "Msys" ]]' \
    if'type docker >/dev/null 2>&1' \
    as"completion" \
  OMZP::docker/completions/_docker \
    if'[[ "$(uname -o)" != "Msys" ]]' \
    if'type docker >/dev/null 2>&1 || type docker-compose >/dev/null 2>&1' \
    as"completion" \
  OMZP::docker-compose/_docker-compose
#####################
# PLUGINS           #
#####################
zinit wait lucid light-mode for \
    pick"zsh-lazyload.zsh" \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  qoomon/zsh-lazyload \
    atinit"
      zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
      zstyle ':fzf-tab:complete:cd:*' fzf-preview 'if type eza>/dev/null 2>&1; then eza -1 --color=always $realpath; else ls -1 $realpath; fi'
      zstyle ':fzf-tab:*' switch-group '<' '>'" \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  Aloxaf/fzf-tab \
    atinit"
      ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
      ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=241'
      ZSH_AUTOSUGGEST_USE_ASYNC='false'" \
    atload"_zsh_autosuggest_start" \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  zsh-users/zsh-autosuggestions \
    atinit"
      typeset -gA FAST_HIGHLIGHT; FAST_HIGHLIGHT[git-cmsg-len]=100; zpcompinit; zpcdreplay" \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  zdharma-continuum/fast-syntax-highlighting \
    blockf atpull'zinit creinstall -q .' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  zsh-users/zsh-completions \
    run-atpull \
    atpull'if [ -f $HOME/.fzf/install ]; then git -C $HOME/.fzf pull && $HOME/.fzf/install --bin; fi' \
  unixorn/fzf-zsh-plugin \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  djui/alias-tips \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  chriskempson/base16-shell \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  hlissner/zsh-autopair \
    wait'type bat >/dev/null 2>&1' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  fdellwing/zsh-bat
#####################
# PROGRAMS          #
#####################
zinit wait lucid light-mode for \
    from'gh-r' as'program' id-as'yarn' \
    mv'yarn* -> yarn' pick"yarn/bin/yarn" bpick'*.tar.gz' \
    atinit'export PATH="$HOME/.yarn/bin:$PATH"' \
  yarnpkg/yarn \
    from'gh-r' as'program' id-as'fd' \
    pick'**/fd' \
  @sharkdp/fd \
    from'gh-r' as'program' id-as'bat' \
    mv'bat* -> bat' pick'bat/bat' \
    atinit"export MANROFFOPT='-c'" \
  @sharkdp/bat \
    from'gh-r' as'program' id-as'lazygit' \
    mv'lazygit* -> lazygit' \
    has'git' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  jesseduffield/lazygit \
    from'gh-r' as'program' id-as'lazygit' \
    mv'lazygit* -> lazygit' bpick'*Windows*' \
    has'git' \
    if'[[ "$(uname -o)" = "Msys" ]]' \
  jesseduffield/lazygit \
    from'gh-r' as'program' id-as'gitleaks' \
    pick'gitleaks' \
    has'git' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  @gitleaks/gitleaks \
    from'gh-r' as'program' id-as'gitleaks' \
    pick'gitleaks.exe' bpick'*windows*' \
    has'git' \
    if'[[ "$(uname -o)" = "Msys" ]]' \
  @gitleaks/gitleaks \
    from'gh-r' as'program' ver'v0.18.17' id-as'eza' pick'eza' \
    atload"
      alias la='eza --all --git --color=auto'
      alias ls='eza --git --color=auto'
      alias ll='eza --long --all --git --color=auto'
    " \
  eza-community/eza \
    from'gh-r' as'program' id-as'delta' pick'**/delta' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  dandavison/delta \
    from'gh-r' as'program' id-as'delta' pick'**/delta.exe' bpick'*windows*' \
    if'[[ "$(uname -o)" = "Msys" ]]' \
  dandavison/delta \
    from'gh-r' as'program' id-as'zellij' pick'zellij' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  zellij-org/zellij \
    from'gh-r' as'program' id-as'k9s' pick'k9s' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  derailed/k9s \
    from'gh-r' as'program' id-as'stern' pick'stern' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  stern/stern \
    from'gh-r' as'program' id-as'flux' pick'flux' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  fluxcd/flux2 \
    from'gh-r' as'program' id-as'gdu' \
    mv'gdu* -> gdu' pick'gdu' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  dundee/gdu \
    from'gh-r' as'program' id-as'gdu' \
    mv'gdu* -> gdu' pick'gdu' bpick'*windows*' \
    if'[[ "$(uname -o)" = "Msys" ]]' \
  dundee/gdu \
    from'gh-r' as'program' id-as'navi' pick'navi' \
  denisidoro/navi \
    from'gh-r' as'program' id-as'yq' \
    mv'yq* -> yq' pick'yq' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  mikefarah/yq \
    from'gh-r' as'program' id-as'yq' \
    mv'yq* -> yq' pick'yq' bpick'*windows*.zip' \
    if'[[ "$(uname -o)" = "Msys" ]]' \
  mikefarah/yq \
    from'gh-r' as'program' id-as'dust' pick'**/dust' \
  bootandy/dust \
    from'gh-r' as'program' id-as'docker-compose' \
    mv'docker-compose* -> docker-compose' pick'docker-compose' \
    has'docker' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  docker/compose \
    from'gh-r' as'program' id-as'dive' pick'dive' \
    has'docker' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  wagoodman/dive \
    from'gh-r' as'program' id-as'lazydocker' pick'lazydocker' \
    has'docker' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  jesseduffield/lazydocker \
    from'gh-r' as'program' id-as'kubeedge' pick'**/keadm/keadm' \
    bpick'keadm*' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  kubeedge/kubeedge \
    from'gh-r' as'program' id-as'k0sctl' \
    mv'k0sctl* -> k0sctl' pick'k0sctl' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  k0sproject/k0sctl \
    from'gh-r' as'program' id-as'rg' pick'**/rg' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  BurntSushi/ripgrep \
    from'gh-r' as'program' id-as'rg' pick'**/rg' bpick'*windows-msvc*' \
    if'[[ "$(uname -o)" = "Msys" ]]' \
  BurntSushi/ripgrep \
    from'gh-r' as'program' id-as'codegpt' \
    mv'codegpt* -> codegpt' pick'codegpt' \
    has'git' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  appleboy/CodeGPT \
    from'gh-r' as'program' id-as'codegpt' \
    mv'codegpt* -> codegpt' pick'codegpt' bpick'*windows*' \
    has'git' \
    if'[[ "$(uname -o)" = "Msys" ]]' \
  appleboy/CodeGPT \
    from'gh-r' as'program' id-as'media-get' \
    mv'media-get* -> media-get' pick'media-get' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  foamzou/media-get \
    from'gh-r' as'program' id-as'media-get' \
    mv'media-get*.exe -> media-get.exe' pick'media-get.exe' bpick'*win.exe*' \
    if'[[ "$(uname -o)" = "Msys" ]]' \
  foamzou/media-get \
    from'gh-r' as'program' id-as'gum' pick'**/gum' \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  charmbracelet/gum \
    as'program' id-as'micromamba' pick"$HOME/.micromamba/bin" run-atpull \
    atclone'curl -sL https://raw.githubusercontent.com/mamba-org/micromamba-releases/main/install.sh | PREFIX_LOCATION="$HOME/.micromamba" INIT_YES="no" bash -s' \
    atpull'if type micromamba >/dev/null 2>&1; then micromamba self-update; fi' \
    atinit'export MAMBA_ROOT_PREFIX="$HOME/.micromamba"; [[ :$PATH: == *":$HOME/.local/bin:"* ]] || PATH+=":$HOME/.local/bin"' \
    atload'export MAMBA_ROOT_PREFIX="$HOME/.micromamba"; [[ -e $HOME/.local/bin/micromamba ]] && $HOME/.local/bin/micromamba shell hook --shell zsh --root-prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null | eval' \
  zdharma-continuum/null \
    as"program" id-as'kubectl' run-atpull \
    atclone"curl -sLo- 'https://share.yusiwen.cn/public/k8s/kubectl_installer.sh' | bash -s -- install" \
    atpull"curl -sLo- 'https://share.yusiwen.cn/public/k8s/kubectl_installer.sh' | bash -s -- update" \
  zdharma-continuum/null \
    as"program" id-as'helm' run-atpull \
    atclone"curl -sLo- 'https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3' | bash -s" \
    atpull"curl -sLo- 'https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3' | bash -s" \
    if'[[ "$(uname -o)" != "Msys" ]]' \
  zdharma-continuum/null \
    as"program" id-as'helm' run-atpull \
    atclone"export HELM_INSTALL_DIR=$HOME/.local/bin && curl -sLo- 'https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3' | bash -s -- --no-sudo" \
    atpull"export HELM_INSTALL_DIR=$HOME/.local/bin && curl -sLo- 'https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3' | bash -s -- --no-sudo" \
    if'[[ "$(uname -o)" = "Msys" ]]' \
  zdharma-continuum/null \
    as'program' id-as'n' pick"$HOME/.n/bin/n" run-atpull \
    atclone'curl -sL https://raw.githubusercontent.com/mklement0/n-install/stable/bin/n-install | N_PREFIX="$HOME/.n" bash -s -- -y -n' \
    atpull'curl -sL https://raw.githubusercontent.com/mklement0/n-install/stable/bin/n-update | N_PREFIX="$HOME/.n" bash -s -- -y' \
    atinit'export N_PREFIX="$HOME/.n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"' \
    if'[[ "$(uname -o)" != 'Msys' ]] && ! grep -q 'microsoft' <<< $(uname -r)' \
  zdharma-continuum/null \
    as"program" pick"$HOME/.sdkman" id-as'sdkman' run-atpull \
    atclone"wget 'https://get.sdkman.io/?rcupdate=false' -O scr.sh; SDKMAN_DIR=$HOME/.sdkman bash scr.sh" \
    atpull"SDKMAN_DIR=$HOME/.sdkman sdk selfupdate && ! type link_jdks>/dev/null 2>&1 || link_jdks" \
    atinit"export SDKMAN_DIR=$HOME/.sdkman; source $HOME/.sdkman/bin/sdkman-init.sh" \
  zdharma-continuum/null

zinit wait light-mode lucid is-snippet for \
  $HOME/git/myConfigs/shell/scripts/00-environment.script \
  $HOME/git/myConfigs/shell/scripts/01-colors.script \
  $HOME/git/myConfigs/shell/scripts/02-functions.script \
  $HOME/git/myConfigs/shell/scripts/03-programs.script \
  $HOME/git/myConfigs/shell/scripts/03-completions.script \
  $HOME/git/myConfigs/shell/scripts/04-keybindings.script \
    if'[[ "$(uname -o)" = "Msys" ]]' \
  $HOME/git/myConfigs/shell/scripts/05-themes.script \
  $HOME/git/myConfigs/shell/scripts/06-aliases.script \
  $HOME/git/myConfigs/shell/scripts/99-customize.script

if [ "$PROMPT_TYPE" = 'p10k' ]; then
  # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
  [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
fi

unset TMUX

## [Completion]
## Completion scripts setup. Remove the following line to uninstall
[[ -f "$HOME"/.config/.dart-cli-completion/zsh-config.zsh ]] && . "$HOME"/.config/.dart-cli-completion/zsh-config.zsh || true
## [/Completion]
